# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType

__all__ = [
    "ErrorObject",
    "GeneralError",
    "MultipleActionsNotAllowedError",
    "RequiredFieldError",
    "ResourceNotFoundError",
]


class ErrorObject(_BaseType):
    """This is the representation of a single error."""

    #: Error identifier.
    code: str
    #: Plain text description of the cause of the error.
    message: str

    def __init__(self, *, code: str, message: str):
        self.code = code
        self.message = message

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ErrorObject":
        if data["code"] == "General":
            from ._schemas.error import GeneralErrorSchema

            return GeneralErrorSchema().load(data)
        if data["code"] == "MultipleActionsNotAllowed":
            from ._schemas.error import MultipleActionsNotAllowedErrorSchema

            return MultipleActionsNotAllowedErrorSchema().load(data)
        if data["code"] == "RequiredField":
            from ._schemas.error import RequiredFieldErrorSchema

            return RequiredFieldErrorSchema().load(data)
        if data["code"] == "ResourceNotFound":
            from ._schemas.error import ResourceNotFoundErrorSchema

            return ResourceNotFoundErrorSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.error import ErrorObjectSchema

        return ErrorObjectSchema().dump(self)


class GeneralError(ErrorObject):
    """Returned when a server-side problem occurs. In some cases, the requested action may successfully complete after the error is returned. Therefore, it is recommended to verify the status of the requested resource after receiving a 500 error.

    If you encounter this error, report it using the [Support Portal](https://commercetools.atlassian.net/servicedesk/customer/portal/30).

    """

    def __init__(self, *, message: str):

        super().__init__(message=message, code="General")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "GeneralError":
        from ._schemas.error import GeneralErrorSchema

        return GeneralErrorSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.error import GeneralErrorSchema

        return GeneralErrorSchema().dump(self)


class MultipleActionsNotAllowedError(ErrorObject):
    """Returned when `actions` in the request body contains more than one object."""

    def __init__(self, *, message: str):

        super().__init__(message=message, code="MultipleActionsNotAllowed")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "MultipleActionsNotAllowedError":
        from ._schemas.error import MultipleActionsNotAllowedErrorSchema

        return MultipleActionsNotAllowedErrorSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.error import MultipleActionsNotAllowedErrorSchema

        return MultipleActionsNotAllowedErrorSchema().dump(self)


class RequiredFieldError(ErrorObject):
    """Returned when a value is not defined for a required field."""

    #: Name of the field missing the value.
    field: str

    def __init__(self, *, message: str, field: str):
        self.field = field

        super().__init__(message=message, code="RequiredField")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RequiredFieldError":
        from ._schemas.error import RequiredFieldErrorSchema

        return RequiredFieldErrorSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.error import RequiredFieldErrorSchema

        return RequiredFieldErrorSchema().dump(self)


class ResourceNotFoundError(ErrorObject):
    """Returned when the resource addressed by the request URL does not exist."""

    def __init__(self, *, message: str):

        super().__init__(message=message, code="ResourceNotFound")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ResourceNotFoundError":
        from ._schemas.error import ResourceNotFoundErrorSchema

        return ResourceNotFoundErrorSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.error import ResourceNotFoundErrorSchema

        return ResourceNotFoundErrorSchema().dump(self)
