# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import typing
import warnings

from ...models.common import Error

if typing.TYPE_CHECKING:
    from ...base_client import BaseClient


class FrontasticActionByNamespaceByActionRequestBuilder:

    _client: "BaseClient"
    _namespace: str
    _action: str

    def __init__(
        self,
        namespace: str,
        action: str,
        client: "BaseClient",
    ):
        self._namespace = namespace
        self._action = action
        self._client = client

    def get(
        self,
        *,
        headers: typing.Dict[str, str] = None,
        options: typing.Dict[str, typing.Any] = None,
    ) -> object:
        """Use the GET method to allow the frontend to fetch data from a backend system. For the response, we recommend to use standard HTTP codes and `application/json` encoded content. The response will be structured [as defined by the `body` property of the action](/../frontend-development/developing-an-action-extension#1-implement-the-action). The following response example contains information about a cart."""
        headers = {} if headers is None else headers
        response = self._client._get(
            endpoint=f"/frontastic/action/{self._namespace}/{self._action}",
            params={},
            headers=headers,
            options=options,
        )
        if response.status_code == 200:
            return object.deserialize(response.json())
        elif response.status_code == 400:
            obj = Error.deserialize(response.json())
            raise self._client._create_exception(obj, response)
        warnings.warn("Unhandled status code %d" % response.status_code)

    def post(
        self,
        body: typing.Any,
        *,
        headers: typing.Dict[str, str] = None,
        options: typing.Dict[str, typing.Any] = None,
    ) -> object:
        """Use the POST method to write data to a backend system. Any JSON serializable payload is accepted. The following request example adds a product to a cart. For the response, we recommend to use standard HTTP codes and `application/json` encoded content. The response will be structured [as defined by the `body` property of the action](/../frontend-development/developing-an-action-extension#1-implement-the-action). The following response example contains the updated cart information, which includes the added product."""
        headers = {} if headers is None else headers
        response = self._client._post(
            endpoint=f"/frontastic/action/{self._namespace}/{self._action}",
            params={},
            headers={"Content-Type": "application/json", **headers},
            options=options,
        )
        if response.status_code == 200:
            return object.deserialize(response.json())
        elif response.status_code == 400:
            obj = Error.deserialize(response.json())
            raise self._client._create_exception(obj, response)
        warnings.warn("Unhandled status code %d" % response.status_code)

    def put(
        self,
        body: typing.Any,
        *,
        headers: typing.Dict[str, str] = None,
        options: typing.Dict[str, typing.Any] = None,
    ) -> typing.Any:
        """Use the PUT method to write data to a backend system. Any JSON serializable payload is accepted. The following request example adds a product to a cart. For the response, we recommend to use standard HTTP codes and `application/json` encoded content. The response will be structured [as defined by the `body` property of the action](/../frontend-development/developing-an-action-extension#1-implement-the-action). The following response example contains the updated cart information, which includes the added product."""
        headers = {} if headers is None else headers
        response = self._client._put(
            endpoint=f"/frontastic/action/{self._namespace}/{self._action}",
            params={},
            headers={"Content-Type": "application/json", **headers},
            options=options,
        )
        if response.status_code == 200:
            return typing.Any.deserialize(response.json())
        elif response.status_code == 400:
            obj = Error.deserialize(response.json())
            raise self._client._create_exception(obj, response)
        warnings.warn("Unhandled status code %d" % response.status_code)
