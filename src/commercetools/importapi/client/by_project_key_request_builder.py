# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import typing
import warnings

from .categories.by_project_key_categories_request_builder import (
    ByProjectKeyCategoriesRequestBuilder,
)
from .customers.by_project_key_customers_request_builder import (
    ByProjectKeyCustomersRequestBuilder,
)
from .import_containers.by_project_key_import_containers_request_builder import (
    ByProjectKeyImportContainersRequestBuilder,
)
from .import_operations.by_project_key_import_operations_request_builder import (
    ByProjectKeyImportOperationsRequestBuilder,
)
from .inventories.by_project_key_inventories_request_builder import (
    ByProjectKeyInventoriesRequestBuilder,
)
from .order_patches.by_project_key_order_patches_request_builder import (
    ByProjectKeyOrderPatchesRequestBuilder,
)
from .orders.by_project_key_orders_request_builder import (
    ByProjectKeyOrdersRequestBuilder,
)
from .prices.by_project_key_prices_request_builder import (
    ByProjectKeyPricesRequestBuilder,
)
from .product_drafts.by_project_key_product_drafts_request_builder import (
    ByProjectKeyProductDraftsRequestBuilder,
)
from .product_types.by_project_key_product_types_request_builder import (
    ByProjectKeyProductTypesRequestBuilder,
)
from .product_variant_patches.by_project_key_product_variant_patches_request_builder import (
    ByProjectKeyProductVariantPatchesRequestBuilder,
)
from .product_variants.by_project_key_product_variants_request_builder import (
    ByProjectKeyProductVariantsRequestBuilder,
)
from .products.by_project_key_products_request_builder import (
    ByProjectKeyProductsRequestBuilder,
)
from .standalone_prices.by_project_key_standalone_prices_request_builder import (
    ByProjectKeyStandalonePricesRequestBuilder,
)
from .types.by_project_key_types_request_builder import ByProjectKeyTypesRequestBuilder

if typing.TYPE_CHECKING:
    from ..base_client import BaseClient


class ByProjectKeyRequestBuilder:
    _client: "BaseClient"
    _project_key: str

    def __init__(
        self,
        project_key: str,
        client: "BaseClient",
    ):
        self._project_key = project_key
        self._client = client

    def import_containers(self) -> ByProjectKeyImportContainersRequestBuilder:
        return ByProjectKeyImportContainersRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def import_operations(self) -> ByProjectKeyImportOperationsRequestBuilder:
        return ByProjectKeyImportOperationsRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def categories(self) -> ByProjectKeyCategoriesRequestBuilder:
        return ByProjectKeyCategoriesRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def prices(self) -> ByProjectKeyPricesRequestBuilder:
        return ByProjectKeyPricesRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def standalone_prices(self) -> ByProjectKeyStandalonePricesRequestBuilder:
        return ByProjectKeyStandalonePricesRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def products(self) -> ByProjectKeyProductsRequestBuilder:
        return ByProjectKeyProductsRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def product_drafts(self) -> ByProjectKeyProductDraftsRequestBuilder:
        return ByProjectKeyProductDraftsRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def product_types(self) -> ByProjectKeyProductTypesRequestBuilder:
        return ByProjectKeyProductTypesRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def product_variants(self) -> ByProjectKeyProductVariantsRequestBuilder:
        return ByProjectKeyProductVariantsRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def product_variant_patches(
        self,
    ) -> ByProjectKeyProductVariantPatchesRequestBuilder:
        return ByProjectKeyProductVariantPatchesRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def orders(self) -> ByProjectKeyOrdersRequestBuilder:
        return ByProjectKeyOrdersRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def order_patches(self) -> ByProjectKeyOrderPatchesRequestBuilder:
        return ByProjectKeyOrderPatchesRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def customers(self) -> ByProjectKeyCustomersRequestBuilder:
        return ByProjectKeyCustomersRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def inventories(self) -> ByProjectKeyInventoriesRequestBuilder:
        return ByProjectKeyInventoriesRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )

    def types(self) -> ByProjectKeyTypesRequestBuilder:
        return ByProjectKeyTypesRequestBuilder(
            project_key=self._project_key,
            client=self._client,
        )
