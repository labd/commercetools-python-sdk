# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..common import ProductPriceModeEnum
from .common import ImportResourceSchema, LocalizedStringField

# Fields


# Marshmallow Schemas
class SearchKeywordsSchema(helpers.BaseSchema):
    _regex = helpers.RegexField(
        unknown=marshmallow.EXCLUDE,
        metadata={
            "pattern": re.compile("^[a-z]{2}(-[A-Z]{2})?$"),
            "type": helpers.LazyNestedField(
                nested=helpers.absmod(__name__, ".SearchKeywordSchema"),
                allow_none=True,
                many=True,
                unknown=marshmallow.EXCLUDE,
                load_default=None,
                data_key="/^[a-z]{2}(-[A-Z]{2})?$/",
            ),
        },
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.SearchKeywords(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class SearchKeywordSchema(helpers.BaseSchema):
    text = marshmallow.fields.String(allow_none=True, load_default=None)
    suggest_tokenizer = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "custom": helpers.absmod(__name__, ".CustomTokenizerSchema"),
            "whitespace": helpers.absmod(__name__, ".WhitespaceTokenizerSchema"),
        },
        metadata={"omit_empty": True},
        load_default=None,
        data_key="suggestTokenizer",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.SearchKeyword(**data)


class SuggestTokenizerSchema(helpers.BaseSchema):
    type = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SuggestTokenizer(**data)


class CustomTokenizerSchema(SuggestTokenizerSchema):
    inputs = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True), allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomTokenizer(**data)


class WhitespaceTokenizerSchema(SuggestTokenizerSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.WhitespaceTokenizer(**data)


class ProductImportSchema(ImportResourceSchema):
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    product_type = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ProductTypeKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productType",
    )
    slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    description = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
    )
    categories = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CategoryKeyReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    meta_title = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
        data_key="metaTitle",
    )
    meta_description = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
        data_key="metaDescription",
    )
    meta_keywords = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
        data_key="metaKeywords",
    )
    tax_category = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxCategoryKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="taxCategory",
    )
    search_keywords = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchKeywordsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="searchKeywords",
    )
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.StateKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    publish = marshmallow.fields.Boolean(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    price_mode = marshmallow_enum.EnumField(
        ProductPriceModeEnum,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="priceMode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.ProductImport(**data)
