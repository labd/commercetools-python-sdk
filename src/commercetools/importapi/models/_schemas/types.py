# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..types import CustomFieldReferenceValue, ResourceTypeId, TypeTextInputHint
from .common import ImportResourceSchema, LocalizedStringField

# Fields


# Marshmallow Schemas


class FieldTypeSchema(helpers.BaseSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.FieldType(**data)


class CustomFieldBooleanTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldBooleanType(**data)


class CustomFieldDateTimeTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldDateTimeType(**data)


class CustomFieldDateTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldDateType(**data)


class CustomFieldEnumTypeSchema(FieldTypeSchema):
    values = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".CustomFieldEnumValueSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldEnumType(**data)


class CustomFieldEnumValueSchema(helpers.BaseSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    label = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.CustomFieldEnumValue(**data)


class CustomFieldLocalizedEnumTypeSchema(FieldTypeSchema):
    values = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".CustomFieldLocalizedEnumValueSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldLocalizedEnumType(**data)


class CustomFieldLocalizedEnumValueSchema(helpers.BaseSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    label = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.CustomFieldLocalizedEnumValue(**data)


class CustomFieldLocalizedStringTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldLocalizedStringType(**data)


class CustomFieldMoneyTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldMoneyType(**data)


class CustomFieldNumberTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldNumberType(**data)


class CustomFieldReferenceTypeSchema(FieldTypeSchema):
    reference_type_id = marshmallow_enum.EnumField(
        CustomFieldReferenceValue,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="referenceTypeId",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldReferenceType(**data)


class CustomFieldSetTypeSchema(FieldTypeSchema):
    element_type = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("name", "name"),
        discriminator_schemas={
            "Boolean": helpers.absmod(__name__, ".CustomFieldBooleanTypeSchema"),
            "DateTime": helpers.absmod(__name__, ".CustomFieldDateTimeTypeSchema"),
            "Date": helpers.absmod(__name__, ".CustomFieldDateTypeSchema"),
            "Enum": helpers.absmod(__name__, ".CustomFieldEnumTypeSchema"),
            "LocalizedEnum": helpers.absmod(
                __name__, ".CustomFieldLocalizedEnumTypeSchema"
            ),
            "LocalizedString": helpers.absmod(
                __name__, ".CustomFieldLocalizedStringTypeSchema"
            ),
            "Money": helpers.absmod(__name__, ".CustomFieldMoneyTypeSchema"),
            "Number": helpers.absmod(__name__, ".CustomFieldNumberTypeSchema"),
            "Reference": helpers.absmod(__name__, ".CustomFieldReferenceTypeSchema"),
            "Set": helpers.absmod(__name__, ".CustomFieldSetTypeSchema"),
            "String": helpers.absmod(__name__, ".CustomFieldStringTypeSchema"),
            "Time": helpers.absmod(__name__, ".CustomFieldTimeTypeSchema"),
        },
        load_default=None,
        data_key="elementType",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldSetType(**data)


class CustomFieldStringTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldStringType(**data)


class CustomFieldTimeTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["name"]
        return models.CustomFieldTimeType(**data)


class FieldDefinitionSchema(helpers.BaseSchema):
    type = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("name", "name"),
        discriminator_schemas={
            "Boolean": helpers.absmod(__name__, ".CustomFieldBooleanTypeSchema"),
            "DateTime": helpers.absmod(__name__, ".CustomFieldDateTimeTypeSchema"),
            "Date": helpers.absmod(__name__, ".CustomFieldDateTypeSchema"),
            "Enum": helpers.absmod(__name__, ".CustomFieldEnumTypeSchema"),
            "LocalizedEnum": helpers.absmod(
                __name__, ".CustomFieldLocalizedEnumTypeSchema"
            ),
            "LocalizedString": helpers.absmod(
                __name__, ".CustomFieldLocalizedStringTypeSchema"
            ),
            "Money": helpers.absmod(__name__, ".CustomFieldMoneyTypeSchema"),
            "Number": helpers.absmod(__name__, ".CustomFieldNumberTypeSchema"),
            "Reference": helpers.absmod(__name__, ".CustomFieldReferenceTypeSchema"),
            "Set": helpers.absmod(__name__, ".CustomFieldSetTypeSchema"),
            "String": helpers.absmod(__name__, ".CustomFieldStringTypeSchema"),
            "Time": helpers.absmod(__name__, ".CustomFieldTimeTypeSchema"),
        },
        load_default=None,
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    label = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    required = marshmallow.fields.Boolean(allow_none=True, load_default=None)
    input_hint = marshmallow_enum.EnumField(
        TypeTextInputHint,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="inputHint",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.FieldDefinition(**data)


class TypeImportSchema(ImportResourceSchema):
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    description = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
    )
    resource_type_ids = marshmallow.fields.List(
        marshmallow_enum.EnumField(ResourceTypeId, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="resourceTypeIds",
    )
    field_definitions = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".FieldDefinitionSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="fieldDefinitions",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.TypeImport(**data)
