# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType

__all__ = ["ImportSummary", "OperationStates"]


class ImportSummary(_BaseType):
    """Describes the status of an [ImportContainer](/import-container#importcontainer) by the number of resources in each [Processing State](/processing-state#processingstate).
    Can be used to monitor the import progress per [Import Container](/import-container).

    """

    #: The import status of an [ImportContainer](/import-container#importcontainer) given by the number of resources in each [Processing State](/processing-state#processingstate).
    states: "OperationStates"
    #: The total number of [ImportOperations](/import-operation#importoperation) received for this Import Summary.
    total: int

    def __init__(self, *, states: "OperationStates", total: int):
        self.states = states
        self.total = total

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ImportSummary":
        from ._schemas.importsummaries import ImportSummarySchema

        return ImportSummarySchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.importsummaries import ImportSummarySchema

        return ImportSummarySchema().dump(self)


class OperationStates(_BaseType):
    """The number of resources in each [Processing State](/processing-state#processingstate)."""

    #: The number of resources in the `processing` state.
    processing: int
    #: The number of resources in the `validationFailed` state.
    validation_failed: int
    #: The number of resources in the `unresolved` state.
    unresolved: int
    #: The number of resources in the `waitForMasterVariant` state.
    wait_for_master_variant: int
    #: The number of resources in the `imported` state.
    imported: int
    #: The number of resources in the `rejected` state.
    rejected: int
    #: The number of resources in the `canceled` state.
    canceled: int

    def __init__(
        self,
        *,
        processing: int,
        validation_failed: int,
        unresolved: int,
        wait_for_master_variant: int,
        imported: int,
        rejected: int,
        canceled: int
    ):
        self.processing = processing
        self.validation_failed = validation_failed
        self.unresolved = unresolved
        self.wait_for_master_variant = wait_for_master_variant
        self.imported = imported
        self.rejected = rejected
        self.canceled = canceled

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "OperationStates":
        from ._schemas.importsummaries import OperationStatesSchema

        return OperationStatesSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.importsummaries import OperationStatesSchema

        return OperationStatesSchema().dump(self)
