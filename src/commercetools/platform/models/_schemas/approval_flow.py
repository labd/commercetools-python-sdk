# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..approval_flow import ApprovalFlowStatus
from .common import BaseResourceSchema
from .type import FieldContainerField

# Fields


# Marshmallow Schemas
class ApprovalFlowSchema(BaseResourceSchema):
    created_by = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CreatedBySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="createdBy",
    )
    last_modified_by = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LastModifiedBySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="lastModifiedBy",
    )
    order = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.OrderReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    business_unit = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".business_unit.BusinessUnitKeyReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="businessUnit",
    )
    rules = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".approval_rule.ApprovalRuleSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    status = marshmallow_enum.EnumField(
        ApprovalFlowStatus, by_value=True, allow_none=True, load_default=None
    )
    rejection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ApprovalFlowRejectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    approvals = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ApprovalFlowApprovalSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    eligible_approvers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".approval_rule.RuleApproverSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="eligibleApprovers",
    )
    pending_approvers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".approval_rule.RuleApproverSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="pendingApprovers",
    )
    current_tier_pending_approvers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".approval_rule.RuleApproverSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="currentTierPendingApprovers",
    )
    custom = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApprovalFlow(**data)


class ApprovalFlowApprovalSchema(helpers.BaseSchema):
    approver = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".business_unit.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    approved_at = marshmallow.fields.DateTime(
        allow_none=True, load_default=None, data_key="approvedAt"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApprovalFlowApproval(**data)


class ApprovalFlowPagedQueryResponseSchema(helpers.BaseSchema):
    limit = marshmallow.fields.Integer(allow_none=True, load_default=None)
    offset = marshmallow.fields.Integer(allow_none=True, load_default=None)
    count = marshmallow.fields.Integer(allow_none=True, load_default=None)
    total = marshmallow.fields.Integer(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    results = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ApprovalFlowSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApprovalFlowPagedQueryResponse(**data)


class ApprovalFlowRejectionSchema(helpers.BaseSchema):
    rejecter = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".business_unit.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    rejected_at = marshmallow.fields.DateTime(
        allow_none=True, load_default=None, data_key="rejectedAt"
    )
    reason = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApprovalFlowRejection(**data)


class ApprovalFlowUpdateSchema(helpers.BaseSchema):
    version = marshmallow.fields.Integer(allow_none=True, load_default=None)
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            allow_none=True,
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "approve": helpers.absmod(__name__, ".ApprovalFlowApproveActionSchema"),
                "reject": helpers.absmod(__name__, ".ApprovalFlowRejectActionSchema"),
                "setCustomField": helpers.absmod(
                    __name__, ".ApprovalFlowSetCustomFieldActionSchema"
                ),
                "setCustomType": helpers.absmod(
                    __name__, ".ApprovalFlowSetCustomTypeActionSchema"
                ),
            },
        ),
        allow_none=True,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApprovalFlowUpdate(**data)


class ApprovalFlowUpdateActionSchema(helpers.BaseSchema):
    action = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalFlowUpdateAction(**data)


class ApprovalFlowApproveActionSchema(ApprovalFlowUpdateActionSchema):

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalFlowApproveAction(**data)


class ApprovalFlowRejectActionSchema(ApprovalFlowUpdateActionSchema):
    reason = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalFlowRejectAction(**data)


class ApprovalFlowSetCustomFieldActionSchema(ApprovalFlowUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    value = marshmallow.fields.Raw(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalFlowSetCustomFieldAction(**data)


class ApprovalFlowSetCustomTypeActionSchema(ApprovalFlowUpdateActionSchema):
    type = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.TypeResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    fields = FieldContainerField(
        allow_none=True,
        values=marshmallow.fields.Raw(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalFlowSetCustomTypeAction(**data)
