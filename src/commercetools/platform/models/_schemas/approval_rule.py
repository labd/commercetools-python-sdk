# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..approval_rule import ApprovalRuleStatus
from .common import BaseResourceSchema

# Fields


# Marshmallow Schemas
class ApprovalRuleSchema(BaseResourceSchema):
    created_by = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CreatedBySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="createdBy",
    )
    last_modified_by = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LastModifiedBySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="lastModifiedBy",
    )
    key = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    description = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    status = marshmallow_enum.EnumField(
        ApprovalRuleStatus, by_value=True, allow_none=True, load_default=None
    )
    predicate = marshmallow.fields.String(allow_none=True, load_default=None)
    approvers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ApproverHierarchySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    requesters = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".RuleRequesterSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    business_unit = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".business_unit.BusinessUnitKeyReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="businessUnit",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApprovalRule(**data)


class ApprovalRuleDraftSchema(helpers.BaseSchema):
    key = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    description = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    status = marshmallow_enum.EnumField(
        ApprovalRuleStatus, by_value=True, allow_none=True, load_default=None
    )
    predicate = marshmallow.fields.String(allow_none=True, load_default=None)
    approvers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ApproverHierarchyDraftSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    requesters = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".RuleRequesterDraftSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApprovalRuleDraft(**data)


class ApprovalRulePagedQueryResponseSchema(helpers.BaseSchema):
    limit = marshmallow.fields.Integer(allow_none=True, load_default=None)
    offset = marshmallow.fields.Integer(allow_none=True, load_default=None)
    count = marshmallow.fields.Integer(allow_none=True, load_default=None)
    total = marshmallow.fields.Integer(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    results = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ApprovalRuleSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApprovalRulePagedQueryResponse(**data)


class ApprovalRuleUpdateSchema(helpers.BaseSchema):
    version = marshmallow.fields.Integer(allow_none=True, load_default=None)
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            allow_none=True,
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "setApprovers": helpers.absmod(
                    __name__, ".ApprovalRuleSetApproversActionSchema"
                ),
                "setDescription": helpers.absmod(
                    __name__, ".ApprovalRuleSetDescriptionActionSchema"
                ),
                "setKey": helpers.absmod(__name__, ".ApprovalRuleSetKeyActionSchema"),
                "setName": helpers.absmod(__name__, ".ApprovalRuleSetNameActionSchema"),
                "setPredicate": helpers.absmod(
                    __name__, ".ApprovalRuleSetPredicateActionSchema"
                ),
                "setRequesters": helpers.absmod(
                    __name__, ".ApprovalRuleSetRequestersActionSchema"
                ),
                "setStatus": helpers.absmod(
                    __name__, ".ApprovalRuleSetStatusActionSchema"
                ),
            },
        ),
        allow_none=True,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApprovalRuleUpdate(**data)


class ApprovalRuleUpdateActionSchema(helpers.BaseSchema):
    action = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalRuleUpdateAction(**data)


class ApprovalRuleSetApproversActionSchema(ApprovalRuleUpdateActionSchema):
    approvers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ApproverHierarchyDraftSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalRuleSetApproversAction(**data)


class ApprovalRuleSetDescriptionActionSchema(ApprovalRuleUpdateActionSchema):
    description = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalRuleSetDescriptionAction(**data)


class ApprovalRuleSetKeyActionSchema(ApprovalRuleUpdateActionSchema):
    key = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalRuleSetKeyAction(**data)


class ApprovalRuleSetNameActionSchema(ApprovalRuleUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalRuleSetNameAction(**data)


class ApprovalRuleSetPredicateActionSchema(ApprovalRuleUpdateActionSchema):
    predicate = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalRuleSetPredicateAction(**data)


class ApprovalRuleSetRequestersActionSchema(ApprovalRuleUpdateActionSchema):
    requesters = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".RuleRequesterDraftSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalRuleSetRequestersAction(**data)


class ApprovalRuleSetStatusActionSchema(ApprovalRuleUpdateActionSchema):
    status = marshmallow_enum.EnumField(
        ApprovalRuleStatus, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.ApprovalRuleSetStatusAction(**data)


class ApproverConjunctionSchema(helpers.BaseSchema):
    and_ = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ApproverDisjunctionSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="and",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApproverConjunction(**data)


class ApproverConjunctionDraftSchema(helpers.BaseSchema):
    and_ = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ApproverDisjunctionDraftSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="and",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApproverConjunctionDraft(**data)


class ApproverDisjunctionSchema(helpers.BaseSchema):
    or_ = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".RuleApproverSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="or",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApproverDisjunction(**data)


class ApproverDisjunctionDraftSchema(helpers.BaseSchema):
    or_ = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".RuleApproverDraftSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="or",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApproverDisjunctionDraft(**data)


class ApproverHierarchySchema(helpers.BaseSchema):
    tiers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ApproverConjunctionSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApproverHierarchy(**data)


class ApproverHierarchyDraftSchema(helpers.BaseSchema):
    tiers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ApproverConjunctionDraftSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ApproverHierarchyDraft(**data)


class RuleApproverSchema(helpers.BaseSchema):
    associate_role = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".associate_role.AssociateRoleKeyReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRole",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.RuleApprover(**data)


class RuleApproverDraftSchema(helpers.BaseSchema):
    associate_role = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".associate_role.AssociateRoleResourceIdentifierSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRole",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.RuleApproverDraft(**data)


class RuleRequesterSchema(helpers.BaseSchema):
    associate_role = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".associate_role.AssociateRoleKeyReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRole",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.RuleRequester(**data)


class RuleRequesterDraftSchema(helpers.BaseSchema):
    associate_role = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".associate_role.AssociateRoleResourceIdentifierSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRole",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.RuleRequesterDraft(**data)
