# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..associate_role import Permission
from ..common import ReferenceTypeId
from .common import (
    BaseResourceSchema,
    KeyReferenceSchema,
    ReferenceSchema,
    ResourceIdentifierSchema,
)
from .type import FieldContainerField

# Fields


# Marshmallow Schemas
class AssociateRoleSchema(BaseResourceSchema):
    last_modified_by = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LastModifiedBySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="lastModifiedBy",
    )
    created_by = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CreatedBySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="createdBy",
    )
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    buyer_assignable = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="buyerAssignable"
    )
    name = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    permissions = marshmallow.fields.List(
        marshmallow_enum.EnumField(Permission, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
    )
    custom = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.AssociateRole(**data)


class AssociateRoleDraftSchema(helpers.BaseSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    name = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    buyer_assignable = marshmallow.fields.Boolean(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="buyerAssignable",
    )
    permissions = marshmallow.fields.List(
        marshmallow_enum.EnumField(Permission, by_value=True, allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
    )
    custom = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.CustomFieldsDraftSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.AssociateRoleDraft(**data)


class AssociateRoleKeyReferenceSchema(KeyReferenceSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type_id"]
        return models.AssociateRoleKeyReference(**data)


class AssociateRolePagedQueryResponseSchema(helpers.BaseSchema):
    limit = marshmallow.fields.Integer(allow_none=True, load_default=None)
    offset = marshmallow.fields.Integer(allow_none=True, load_default=None)
    count = marshmallow.fields.Integer(allow_none=True, load_default=None)
    total = marshmallow.fields.Integer(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    results = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AssociateRoleSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.AssociateRolePagedQueryResponse(**data)


class AssociateRoleReferenceSchema(ReferenceSchema):
    obj = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AssociateRoleSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type_id"]
        return models.AssociateRoleReference(**data)


class AssociateRoleResourceIdentifierSchema(ResourceIdentifierSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type_id"]
        return models.AssociateRoleResourceIdentifier(**data)


class AssociateRoleUpdateSchema(helpers.BaseSchema):
    version = marshmallow.fields.Integer(allow_none=True, load_default=None)
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            allow_none=True,
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addPermission": helpers.absmod(
                    __name__, ".AssociateRoleAddPermissionActionSchema"
                ),
                "changeBuyerAssignable": helpers.absmod(
                    __name__, ".AssociateRoleChangeBuyerAssignableActionSchema"
                ),
                "removePermission": helpers.absmod(
                    __name__, ".AssociateRoleRemovePermissionActionSchema"
                ),
                "setCustomField": helpers.absmod(
                    __name__, ".AssociateRoleSetCustomFieldActionSchema"
                ),
                "setCustomType": helpers.absmod(
                    __name__, ".AssociateRoleSetCustomTypeActionSchema"
                ),
                "setName": helpers.absmod(
                    __name__, ".AssociateRoleSetNameActionSchema"
                ),
                "setPermissions": helpers.absmod(
                    __name__, ".AssociateRoleSetPermissionsActionSchema"
                ),
            },
        ),
        allow_none=True,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.AssociateRoleUpdate(**data)


class AssociateRoleUpdateActionSchema(helpers.BaseSchema):
    action = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.AssociateRoleUpdateAction(**data)


class AssociateRoleAddPermissionActionSchema(AssociateRoleUpdateActionSchema):
    permission = marshmallow_enum.EnumField(
        Permission, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.AssociateRoleAddPermissionAction(**data)


class AssociateRoleChangeBuyerAssignableActionSchema(AssociateRoleUpdateActionSchema):
    buyer_assignable = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="buyerAssignable"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.AssociateRoleChangeBuyerAssignableAction(**data)


class AssociateRoleRemovePermissionActionSchema(AssociateRoleUpdateActionSchema):
    permission = marshmallow_enum.EnumField(
        Permission, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.AssociateRoleRemovePermissionAction(**data)


class AssociateRoleSetCustomFieldActionSchema(AssociateRoleUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    value = marshmallow.fields.Raw(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.AssociateRoleSetCustomFieldAction(**data)


class AssociateRoleSetCustomTypeActionSchema(AssociateRoleUpdateActionSchema):
    type = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.TypeResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    fields = FieldContainerField(
        allow_none=True,
        values=marshmallow.fields.Raw(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.AssociateRoleSetCustomTypeAction(**data)


class AssociateRoleSetNameActionSchema(AssociateRoleUpdateActionSchema):
    name = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.AssociateRoleSetNameAction(**data)


class AssociateRoleSetPermissionsActionSchema(AssociateRoleUpdateActionSchema):
    permissions = marshmallow.fields.List(
        marshmallow_enum.EnumField(Permission, by_value=True, allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.AssociateRoleSetPermissionsAction(**data)
