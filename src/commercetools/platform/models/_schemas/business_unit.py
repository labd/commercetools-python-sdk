# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..business_unit import (
    AssociateRoleDeprecated,
    AssociateRoleInheritanceMode,
    BusinessUnitAssociateMode,
    BusinessUnitStatus,
    BusinessUnitStoreMode,
    BusinessUnitType,
)
from ..common import ReferenceTypeId
from .common import (
    BaseResourceSchema,
    KeyReferenceSchema,
    ReferenceSchema,
    ResourceIdentifierSchema,
)
from .type import FieldContainerField

# Fields


# Marshmallow Schemas
class AssociateSchema(helpers.BaseSchema):
    associate_role_assignments = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AssociateRoleAssignmentSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRoleAssignments",
    )
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(
            AssociateRoleDeprecated, by_value=True, allow_none=True
        ),
        allow_none=True,
        load_default=None,
    )
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.Associate(**data)


class AssociateDraftSchema(helpers.BaseSchema):
    associate_role_assignments = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AssociateRoleAssignmentDraftSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="associateRoleAssignments",
    )
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(
            AssociateRoleDeprecated, by_value=True, allow_none=True
        ),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
    )
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.AssociateDraft(**data)


class AssociateRoleAssignmentSchema(helpers.BaseSchema):
    associate_role = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".associate_role.AssociateRoleKeyReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRole",
    )
    inheritance = marshmallow_enum.EnumField(
        AssociateRoleInheritanceMode, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.AssociateRoleAssignment(**data)


class AssociateRoleAssignmentDraftSchema(helpers.BaseSchema):
    associate_role = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".associate_role.AssociateRoleResourceIdentifierSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRole",
    )
    inheritance = marshmallow_enum.EnumField(
        AssociateRoleInheritanceMode,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.AssociateRoleAssignmentDraft(**data)


class BusinessUnitSchema(BaseResourceSchema):
    last_modified_by = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LastModifiedBySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="lastModifiedBy",
    )
    created_by = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CreatedBySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="createdBy",
    )
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    status = marshmallow_enum.EnumField(
        BusinessUnitStatus, by_value=True, allow_none=True, load_default=None
    )
    stores = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    store_mode = marshmallow_enum.EnumField(
        BusinessUnitStoreMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="storeMode",
    )
    unit_type = marshmallow_enum.EnumField(
        BusinessUnitType,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="unitType",
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    contact_email = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="contactEmail",
    )
    custom = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    addresses = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    shipping_address_ids = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingAddressIds",
    )
    default_shipping_address_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="defaultShippingAddressId",
    )
    billing_address_ids = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="billingAddressIds",
    )
    default_billing_address_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="defaultBillingAddressId",
    )
    associate_mode = marshmallow_enum.EnumField(
        BusinessUnitAssociateMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="associateMode",
    )
    associates = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AssociateSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    inherited_associates = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".InheritedAssociateSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="inheritedAssociates",
    )
    parent_unit = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".BusinessUnitKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="parentUnit",
    )
    top_level_unit = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".BusinessUnitKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="topLevelUnit",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["unit_type"]
        return models.BusinessUnit(**data)


class BusinessUnitDraftSchema(helpers.BaseSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    status = marshmallow_enum.EnumField(
        BusinessUnitStatus,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
    )
    stores = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreResourceIdentifierSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    store_mode = marshmallow_enum.EnumField(
        BusinessUnitStoreMode,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="storeMode",
    )
    unit_type = marshmallow_enum.EnumField(
        BusinessUnitType,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="unitType",
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    contact_email = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="contactEmail",
    )
    associate_mode = marshmallow_enum.EnumField(
        BusinessUnitAssociateMode,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="associateMode",
    )
    associates = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AssociateDraftSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    addresses = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.BaseAddressSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    shipping_addresses = marshmallow.fields.List(
        marshmallow.fields.Integer(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingAddresses",
    )
    default_shipping_address = marshmallow.fields.Integer(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="defaultShippingAddress",
    )
    billing_addresses = marshmallow.fields.List(
        marshmallow.fields.Integer(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="billingAddresses",
    )
    default_billing_address = marshmallow.fields.Integer(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="defaultBillingAddress",
    )
    custom = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.CustomFieldsDraftSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["unit_type"]
        return models.BusinessUnitDraft(**data)


class BusinessUnitKeyReferenceSchema(KeyReferenceSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type_id"]
        return models.BusinessUnitKeyReference(**data)


class BusinessUnitPagedQueryResponseSchema(helpers.BaseSchema):
    limit = marshmallow.fields.Integer(allow_none=True, load_default=None)
    offset = marshmallow.fields.Integer(allow_none=True, load_default=None)
    count = marshmallow.fields.Integer(allow_none=True, load_default=None)
    total = marshmallow.fields.Integer(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    results = marshmallow.fields.List(
        helpers.Discriminator(
            allow_none=True,
            discriminator_field=("unitType", "unit_type"),
            discriminator_schemas={
                "Company": helpers.absmod(__name__, ".CompanySchema"),
                "Division": helpers.absmod(__name__, ".DivisionSchema"),
            },
        ),
        allow_none=True,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.BusinessUnitPagedQueryResponse(**data)


class BusinessUnitReferenceSchema(ReferenceSchema):
    obj = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("unitType", "unit_type"),
        discriminator_schemas={
            "Company": helpers.absmod(__name__, ".CompanySchema"),
            "Division": helpers.absmod(__name__, ".DivisionSchema"),
        },
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type_id"]
        return models.BusinessUnitReference(**data)


class BusinessUnitResourceIdentifierSchema(ResourceIdentifierSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type_id"]
        return models.BusinessUnitResourceIdentifier(**data)


class BusinessUnitUpdateSchema(helpers.BaseSchema):
    version = marshmallow.fields.Integer(allow_none=True, load_default=None)
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            allow_none=True,
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addAddress": helpers.absmod(
                    __name__, ".BusinessUnitAddAddressActionSchema"
                ),
                "addAssociate": helpers.absmod(
                    __name__, ".BusinessUnitAddAssociateActionSchema"
                ),
                "addBillingAddressId": helpers.absmod(
                    __name__, ".BusinessUnitAddBillingAddressIdActionSchema"
                ),
                "addShippingAddressId": helpers.absmod(
                    __name__, ".BusinessUnitAddShippingAddressIdActionSchema"
                ),
                "addStore": helpers.absmod(
                    __name__, ".BusinessUnitAddStoreActionSchema"
                ),
                "changeAddress": helpers.absmod(
                    __name__, ".BusinessUnitChangeAddressActionSchema"
                ),
                "changeAssociate": helpers.absmod(
                    __name__, ".BusinessUnitChangeAssociateActionSchema"
                ),
                "changeAssociateMode": helpers.absmod(
                    __name__, ".BusinessUnitChangeAssociateModeActionSchema"
                ),
                "changeName": helpers.absmod(
                    __name__, ".BusinessUnitChangeNameActionSchema"
                ),
                "changeParentUnit": helpers.absmod(
                    __name__, ".BusinessUnitChangeParentUnitActionSchema"
                ),
                "changeStatus": helpers.absmod(
                    __name__, ".BusinessUnitChangeStatusActionSchema"
                ),
                "removeAddress": helpers.absmod(
                    __name__, ".BusinessUnitRemoveAddressActionSchema"
                ),
                "removeAssociate": helpers.absmod(
                    __name__, ".BusinessUnitRemoveAssociateActionSchema"
                ),
                "removeBillingAddressId": helpers.absmod(
                    __name__, ".BusinessUnitRemoveBillingAddressIdActionSchema"
                ),
                "removeShippingAddressId": helpers.absmod(
                    __name__, ".BusinessUnitRemoveShippingAddressIdActionSchema"
                ),
                "removeStore": helpers.absmod(
                    __name__, ".BusinessUnitRemoveStoreActionSchema"
                ),
                "setAddressCustomField": helpers.absmod(
                    __name__, ".BusinessUnitSetAddressCustomFieldActionSchema"
                ),
                "setAddressCustomType": helpers.absmod(
                    __name__, ".BusinessUnitSetAddressCustomTypeActionSchema"
                ),
                "setAssociates": helpers.absmod(
                    __name__, ".BusinessUnitSetAssociatesActionSchema"
                ),
                "setContactEmail": helpers.absmod(
                    __name__, ".BusinessUnitSetContactEmailActionSchema"
                ),
                "setCustomField": helpers.absmod(
                    __name__, ".BusinessUnitSetCustomFieldActionSchema"
                ),
                "setCustomType": helpers.absmod(
                    __name__, ".BusinessUnitSetCustomTypeActionSchema"
                ),
                "setDefaultBillingAddress": helpers.absmod(
                    __name__, ".BusinessUnitSetDefaultBillingAddressActionSchema"
                ),
                "setDefaultShippingAddress": helpers.absmod(
                    __name__, ".BusinessUnitSetDefaultShippingAddressActionSchema"
                ),
                "setStoreMode": helpers.absmod(
                    __name__, ".BusinessUnitSetStoreModeActionSchema"
                ),
                "setStores": helpers.absmod(
                    __name__, ".BusinessUnitSetStoresActionSchema"
                ),
            },
        ),
        allow_none=True,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.BusinessUnitUpdate(**data)


class BusinessUnitUpdateActionSchema(helpers.BaseSchema):
    action = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitUpdateAction(**data)


class CompanySchema(BusinessUnitSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["unit_type"]
        return models.Company(**data)


class CompanyDraftSchema(BusinessUnitDraftSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["unit_type"]
        return models.CompanyDraft(**data)


class DivisionSchema(BusinessUnitSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["unit_type"]
        return models.Division(**data)


class DivisionDraftSchema(BusinessUnitDraftSchema):
    parent_unit = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".BusinessUnitResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="parentUnit",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["unit_type"]
        return models.DivisionDraft(**data)


class InheritedAssociateSchema(helpers.BaseSchema):
    associate_role_assignments = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".InheritedAssociateRoleAssignmentSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRoleAssignments",
    )
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.InheritedAssociate(**data)


class InheritedAssociateRoleAssignmentSchema(helpers.BaseSchema):
    associate_role = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".associate_role.AssociateRoleKeyReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRole",
    )
    source = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".BusinessUnitKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.InheritedAssociateRoleAssignment(**data)


class BusinessUnitAddAddressActionSchema(BusinessUnitUpdateActionSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.BaseAddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitAddAddressAction(**data)


class BusinessUnitAddAssociateActionSchema(BusinessUnitUpdateActionSchema):
    associate = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AssociateDraftSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitAddAssociateAction(**data)


class BusinessUnitAddBillingAddressIdActionSchema(BusinessUnitUpdateActionSchema):
    address_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressId",
    )
    address_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitAddBillingAddressIdAction(**data)


class BusinessUnitAddShippingAddressIdActionSchema(BusinessUnitUpdateActionSchema):
    address_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressId",
    )
    address_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitAddShippingAddressIdAction(**data)


class BusinessUnitAddStoreActionSchema(BusinessUnitUpdateActionSchema):
    store = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitAddStoreAction(**data)


class BusinessUnitChangeAddressActionSchema(BusinessUnitUpdateActionSchema):
    address_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressId",
    )
    address_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressKey",
    )
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.BaseAddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitChangeAddressAction(**data)


class BusinessUnitChangeAssociateActionSchema(BusinessUnitUpdateActionSchema):
    associate = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AssociateDraftSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitChangeAssociateAction(**data)


class BusinessUnitChangeAssociateModeActionSchema(BusinessUnitUpdateActionSchema):
    associate_mode = marshmallow_enum.EnumField(
        BusinessUnitAssociateMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="associateMode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitChangeAssociateModeAction(**data)


class BusinessUnitChangeNameActionSchema(BusinessUnitUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitChangeNameAction(**data)


class BusinessUnitChangeParentUnitActionSchema(BusinessUnitUpdateActionSchema):
    parent_unit = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".BusinessUnitResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="parentUnit",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitChangeParentUnitAction(**data)


class BusinessUnitChangeStatusActionSchema(BusinessUnitUpdateActionSchema):
    status = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitChangeStatusAction(**data)


class BusinessUnitRemoveAddressActionSchema(BusinessUnitUpdateActionSchema):
    address_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressId",
    )
    address_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitRemoveAddressAction(**data)


class BusinessUnitRemoveAssociateActionSchema(BusinessUnitUpdateActionSchema):
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitRemoveAssociateAction(**data)


class BusinessUnitRemoveBillingAddressIdActionSchema(BusinessUnitUpdateActionSchema):
    address_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressId",
    )
    address_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitRemoveBillingAddressIdAction(**data)


class BusinessUnitRemoveShippingAddressIdActionSchema(BusinessUnitUpdateActionSchema):
    address_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressId",
    )
    address_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitRemoveShippingAddressIdAction(**data)


class BusinessUnitRemoveStoreActionSchema(BusinessUnitUpdateActionSchema):
    store = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitRemoveStoreAction(**data)


class BusinessUnitSetAddressCustomFieldActionSchema(BusinessUnitUpdateActionSchema):
    address_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="addressId"
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    value = marshmallow.fields.Raw(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitSetAddressCustomFieldAction(**data)


class BusinessUnitSetAddressCustomTypeActionSchema(BusinessUnitUpdateActionSchema):
    type = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.TypeResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    fields = FieldContainerField(
        allow_none=True,
        values=marshmallow.fields.Raw(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
    )
    address_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="addressId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitSetAddressCustomTypeAction(**data)


class BusinessUnitSetAssociatesActionSchema(BusinessUnitUpdateActionSchema):
    associates = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AssociateDraftSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitSetAssociatesAction(**data)


class BusinessUnitSetContactEmailActionSchema(BusinessUnitUpdateActionSchema):
    contact_email = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="contactEmail",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitSetContactEmailAction(**data)


class BusinessUnitSetCustomFieldActionSchema(BusinessUnitUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    value = marshmallow.fields.Raw(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitSetCustomFieldAction(**data)


class BusinessUnitSetCustomTypeActionSchema(BusinessUnitUpdateActionSchema):
    type = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.TypeResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    fields = FieldContainerField(
        allow_none=True,
        values=marshmallow.fields.Raw(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitSetCustomTypeAction(**data)


class BusinessUnitSetDefaultBillingAddressActionSchema(BusinessUnitUpdateActionSchema):
    address_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressId",
    )
    address_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitSetDefaultBillingAddressAction(**data)


class BusinessUnitSetDefaultShippingAddressActionSchema(BusinessUnitUpdateActionSchema):
    address_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressId",
    )
    address_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addressKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitSetDefaultShippingAddressAction(**data)


class BusinessUnitSetStoreModeActionSchema(BusinessUnitUpdateActionSchema):
    store_mode = marshmallow_enum.EnumField(
        BusinessUnitStoreMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="storeMode",
    )
    stores = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreResourceIdentifierSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitSetStoreModeAction(**data)


class BusinessUnitSetStoresActionSchema(BusinessUnitUpdateActionSchema):
    stores = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreResourceIdentifierSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["action"]
        return models.BusinessUnitSetStoresAction(**data)
