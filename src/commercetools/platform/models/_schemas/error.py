# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..associate_role import Permission
from ..channel import ChannelRoleEnum
from ..common import ReferenceTypeId
from .common import LocalizedStringField

# Fields


# Marshmallow Schemas
class ErrorByExtensionSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    key = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.ErrorByExtension(**data)


class ErrorObjectSchema(helpers.BaseSchema):
    code = marshmallow.fields.String(allow_none=True, load_default=None)
    message = marshmallow.fields.String(allow_none=True, load_default=None)
    _regex = helpers.RegexField(
        unknown=marshmallow.EXCLUDE,
        metadata={
            "pattern": re.compile(""),
            "type": marshmallow.fields.Raw(allow_none=True, load_default=None),
        },
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ErrorObject(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class AnonymousIdAlreadyInUseErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.AnonymousIdAlreadyInUseError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class AssociateMissingPermissionErrorSchema(ErrorObjectSchema):
    associate = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    business_unit = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".business_unit.BusinessUnitResourceIdentifierSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="businessUnit",
    )
    associate_on_behalf = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="associateOnBehalf",
    )
    permissions = marshmallow.fields.List(
        marshmallow_enum.EnumField(Permission, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.AssociateMissingPermissionError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class AttributeDefinitionAlreadyExistsErrorSchema(ErrorObjectSchema):
    conflicting_product_type_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingProductTypeId"
    )
    conflicting_product_type_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingProductTypeName"
    )
    conflicting_attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingAttributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.AttributeDefinitionAlreadyExistsError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class AttributeDefinitionTypeConflictErrorSchema(ErrorObjectSchema):
    conflicting_product_type_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingProductTypeId"
    )
    conflicting_product_type_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingProductTypeName"
    )
    conflicting_attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingAttributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.AttributeDefinitionTypeConflictError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class AttributeNameDoesNotExistErrorSchema(ErrorObjectSchema):
    invalid_attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="invalidAttributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.AttributeNameDoesNotExistError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class BadGatewayErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.BadGatewayError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ConcurrentModificationErrorSchema(ErrorObjectSchema):
    current_version = marshmallow.fields.Integer(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="currentVersion",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ConcurrentModificationError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class CountryNotConfiguredInStoreErrorSchema(ErrorObjectSchema):
    store_countries = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="storeCountries",
    )
    country = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.CountryNotConfiguredInStoreError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class DiscountCodeNonApplicableErrorSchema(ErrorObjectSchema):
    discount_code = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="discountCode",
    )
    reason = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    discount_code_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="discountCodeId",
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validFrom",
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validUntil",
    )
    validity_check_time = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validityCheckTime",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.DiscountCodeNonApplicableError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class DuplicateAttributeValueErrorSchema(ErrorObjectSchema):
    attribute = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.AttributeSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.DuplicateAttributeValueError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class DuplicateAttributeValuesErrorSchema(ErrorObjectSchema):
    attributes = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.AttributeSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.DuplicateAttributeValuesError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class DuplicateEnumValuesErrorSchema(ErrorObjectSchema):
    duplicates = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True), allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.DuplicateEnumValuesError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class DuplicateFieldErrorSchema(ErrorObjectSchema):
    field = marshmallow.fields.String(allow_none=True, load_default=None)
    duplicate_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="duplicateValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.DuplicateFieldError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class DuplicateFieldWithConflictingResourceErrorSchema(ErrorObjectSchema):
    field = marshmallow.fields.String(allow_none=True, load_default=None)
    duplicate_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="duplicateValue"
    )
    conflicting_resource = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "associate-role": helpers.absmod(
                __name__, ".associate_role.AssociateRoleReferenceSchema"
            ),
            "attribute-group": helpers.absmod(
                __name__, ".attribute_group.AttributeGroupReferenceSchema"
            ),
            "business-unit": helpers.absmod(
                __name__, ".business_unit.BusinessUnitReferenceSchema"
            ),
            "cart-discount": helpers.absmod(
                __name__, ".cart_discount.CartDiscountReferenceSchema"
            ),
            "cart": helpers.absmod(__name__, ".cart.CartReferenceSchema"),
            "direct-discount": helpers.absmod(
                __name__, ".cart.DirectDiscountReferenceSchema"
            ),
            "category": helpers.absmod(__name__, ".category.CategoryReferenceSchema"),
            "channel": helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
            "key-value-document": helpers.absmod(
                __name__, ".custom_object.CustomObjectReferenceSchema"
            ),
            "customer-group": helpers.absmod(
                __name__, ".customer_group.CustomerGroupReferenceSchema"
            ),
            "customer": helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
            "discount-code": helpers.absmod(
                __name__, ".discount_code.DiscountCodeReferenceSchema"
            ),
            "inventory-entry": helpers.absmod(
                __name__, ".inventory.InventoryEntryReferenceSchema"
            ),
            "order-edit": helpers.absmod(
                __name__, ".order_edit.OrderEditReferenceSchema"
            ),
            "order": helpers.absmod(__name__, ".order.OrderReferenceSchema"),
            "payment": helpers.absmod(__name__, ".payment.PaymentReferenceSchema"),
            "product-discount": helpers.absmod(
                __name__, ".product_discount.ProductDiscountReferenceSchema"
            ),
            "product-selection": helpers.absmod(
                __name__, ".product_selection.ProductSelectionReferenceSchema"
            ),
            "product-type": helpers.absmod(
                __name__, ".product_type.ProductTypeReferenceSchema"
            ),
            "product": helpers.absmod(__name__, ".product.ProductReferenceSchema"),
            "quote-request": helpers.absmod(
                __name__, ".quote_request.QuoteRequestReferenceSchema"
            ),
            "quote": helpers.absmod(__name__, ".quote.QuoteReferenceSchema"),
            "review": helpers.absmod(__name__, ".review.ReviewReferenceSchema"),
            "shipping-method": helpers.absmod(
                __name__, ".shipping_method.ShippingMethodReferenceSchema"
            ),
            "shopping-list": helpers.absmod(
                __name__, ".shopping_list.ShoppingListReferenceSchema"
            ),
            "staged-quote": helpers.absmod(
                __name__, ".staged_quote.StagedQuoteReferenceSchema"
            ),
            "standalone-price": helpers.absmod(
                __name__, ".standalone_price.StandalonePriceReferenceSchema"
            ),
            "state": helpers.absmod(__name__, ".state.StateReferenceSchema"),
            "store": helpers.absmod(__name__, ".store.StoreReferenceSchema"),
            "tax-category": helpers.absmod(
                __name__, ".tax_category.TaxCategoryReferenceSchema"
            ),
            "type": helpers.absmod(__name__, ".type.TypeReferenceSchema"),
            "zone": helpers.absmod(__name__, ".zone.ZoneReferenceSchema"),
        },
        load_default=None,
        data_key="conflictingResource",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.DuplicateFieldWithConflictingResourceError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class DuplicatePriceKeyErrorSchema(ErrorObjectSchema):
    conflicting_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="conflictingPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.DuplicatePriceKeyError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class DuplicatePriceScopeErrorSchema(ErrorObjectSchema):
    conflicting_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="conflictingPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.DuplicatePriceScopeError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class DuplicateStandalonePriceScopeErrorSchema(ErrorObjectSchema):
    conflicting_standalone_price = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".standalone_price.StandalonePriceReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="conflictingStandalonePrice",
    )
    sku = marshmallow.fields.String(allow_none=True, load_default=None)
    currency = marshmallow.fields.String(allow_none=True, load_default=None)
    country = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".customer_group.CustomerGroupResourceIdentifierSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )
    channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validFrom",
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validUntil",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.DuplicateStandalonePriceScopeError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class DuplicateVariantValuesErrorSchema(ErrorObjectSchema):
    variant_values = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".VariantValuesSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="variantValues",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.DuplicateVariantValuesError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class EditPreviewFailedErrorSchema(ErrorObjectSchema):
    result = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order_edit.OrderEditPreviewFailureSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.EditPreviewFailedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class EnumKeyAlreadyExistsErrorSchema(ErrorObjectSchema):
    conflicting_enum_key = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingEnumKey"
    )
    conflicting_attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingAttributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.EnumKeyAlreadyExistsError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class EnumKeyDoesNotExistErrorSchema(ErrorObjectSchema):
    conflicting_enum_key = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingEnumKey"
    )
    conflicting_attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingAttributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.EnumKeyDoesNotExistError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class EnumValueIsUsedErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.EnumValueIsUsedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class EnumValuesMustMatchErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.EnumValuesMustMatchError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ErrorResponseSchema(helpers.BaseSchema):
    status_code = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="statusCode"
    )
    message = marshmallow.fields.String(allow_none=True, load_default=None)
    errors = marshmallow.fields.List(
        helpers.Discriminator(
            allow_none=True,
            discriminator_field=("code", "code"),
            discriminator_schemas={
                "AnonymousIdAlreadyInUse": helpers.absmod(
                    __name__, ".AnonymousIdAlreadyInUseErrorSchema"
                ),
                "AssociateMissingPermission": helpers.absmod(
                    __name__, ".AssociateMissingPermissionErrorSchema"
                ),
                "AttributeDefinitionAlreadyExists": helpers.absmod(
                    __name__, ".AttributeDefinitionAlreadyExistsErrorSchema"
                ),
                "AttributeDefinitionTypeConflict": helpers.absmod(
                    __name__, ".AttributeDefinitionTypeConflictErrorSchema"
                ),
                "AttributeNameDoesNotExist": helpers.absmod(
                    __name__, ".AttributeNameDoesNotExistErrorSchema"
                ),
                "BadGateway": helpers.absmod(__name__, ".BadGatewayErrorSchema"),
                "ConcurrentModification": helpers.absmod(
                    __name__, ".ConcurrentModificationErrorSchema"
                ),
                "CountryNotConfiguredInStore": helpers.absmod(
                    __name__, ".CountryNotConfiguredInStoreErrorSchema"
                ),
                "DiscountCodeNonApplicable": helpers.absmod(
                    __name__, ".DiscountCodeNonApplicableErrorSchema"
                ),
                "DuplicateAttributeValue": helpers.absmod(
                    __name__, ".DuplicateAttributeValueErrorSchema"
                ),
                "DuplicateAttributeValues": helpers.absmod(
                    __name__, ".DuplicateAttributeValuesErrorSchema"
                ),
                "DuplicateEnumValues": helpers.absmod(
                    __name__, ".DuplicateEnumValuesErrorSchema"
                ),
                "DuplicateField": helpers.absmod(
                    __name__, ".DuplicateFieldErrorSchema"
                ),
                "DuplicateFieldWithConflictingResource": helpers.absmod(
                    __name__, ".DuplicateFieldWithConflictingResourceErrorSchema"
                ),
                "DuplicatePriceKey": helpers.absmod(
                    __name__, ".DuplicatePriceKeyErrorSchema"
                ),
                "DuplicatePriceScope": helpers.absmod(
                    __name__, ".DuplicatePriceScopeErrorSchema"
                ),
                "DuplicateStandalonePriceScope": helpers.absmod(
                    __name__, ".DuplicateStandalonePriceScopeErrorSchema"
                ),
                "DuplicateVariantValues": helpers.absmod(
                    __name__, ".DuplicateVariantValuesErrorSchema"
                ),
                "EditPreviewFailed": helpers.absmod(
                    __name__, ".EditPreviewFailedErrorSchema"
                ),
                "EnumKeyAlreadyExists": helpers.absmod(
                    __name__, ".EnumKeyAlreadyExistsErrorSchema"
                ),
                "EnumKeyDoesNotExist": helpers.absmod(
                    __name__, ".EnumKeyDoesNotExistErrorSchema"
                ),
                "EnumValueIsUsed": helpers.absmod(
                    __name__, ".EnumValueIsUsedErrorSchema"
                ),
                "EnumValuesMustMatch": helpers.absmod(
                    __name__, ".EnumValuesMustMatchErrorSchema"
                ),
                "ExtensionBadResponse": helpers.absmod(
                    __name__, ".ExtensionBadResponseErrorSchema"
                ),
                "ExtensionNoResponse": helpers.absmod(
                    __name__, ".ExtensionNoResponseErrorSchema"
                ),
                "ExtensionPredicateEvaluationFailed": helpers.absmod(
                    __name__, ".ExtensionPredicateEvaluationFailedErrorSchema"
                ),
                "ExtensionUpdateActionsFailed": helpers.absmod(
                    __name__, ".ExtensionUpdateActionsFailedErrorSchema"
                ),
                "ExternalOAuthFailed": helpers.absmod(
                    __name__, ".ExternalOAuthFailedErrorSchema"
                ),
                "FeatureRemoved": helpers.absmod(
                    __name__, ".FeatureRemovedErrorSchema"
                ),
                "General": helpers.absmod(__name__, ".GeneralErrorSchema"),
                "insufficient_scope": helpers.absmod(
                    __name__, ".InsufficientScopeErrorSchema"
                ),
                "InternalConstraintViolated": helpers.absmod(
                    __name__, ".InternalConstraintViolatedErrorSchema"
                ),
                "InvalidCredentials": helpers.absmod(
                    __name__, ".InvalidCredentialsErrorSchema"
                ),
                "InvalidCurrentPassword": helpers.absmod(
                    __name__, ".InvalidCurrentPasswordErrorSchema"
                ),
                "InvalidField": helpers.absmod(__name__, ".InvalidFieldErrorSchema"),
                "InvalidInput": helpers.absmod(__name__, ".InvalidInputErrorSchema"),
                "InvalidItemShippingDetails": helpers.absmod(
                    __name__, ".InvalidItemShippingDetailsErrorSchema"
                ),
                "InvalidJsonInput": helpers.absmod(
                    __name__, ".InvalidJsonInputErrorSchema"
                ),
                "InvalidOperation": helpers.absmod(
                    __name__, ".InvalidOperationErrorSchema"
                ),
                "InvalidSubject": helpers.absmod(
                    __name__, ".InvalidSubjectErrorSchema"
                ),
                "invalid_token": helpers.absmod(__name__, ".InvalidTokenErrorSchema"),
                "LanguageUsedInStores": helpers.absmod(
                    __name__, ".LanguageUsedInStoresErrorSchema"
                ),
                "MatchingPriceNotFound": helpers.absmod(
                    __name__, ".MatchingPriceNotFoundErrorSchema"
                ),
                "MaxResourceLimitExceeded": helpers.absmod(
                    __name__, ".MaxResourceLimitExceededErrorSchema"
                ),
                "MissingRoleOnChannel": helpers.absmod(
                    __name__, ".MissingRoleOnChannelErrorSchema"
                ),
                "MissingTaxRateForCountry": helpers.absmod(
                    __name__, ".MissingTaxRateForCountryErrorSchema"
                ),
                "MoneyOverflow": helpers.absmod(__name__, ".MoneyOverflowErrorSchema"),
                "NoMatchingProductDiscountFound": helpers.absmod(
                    __name__, ".NoMatchingProductDiscountFoundErrorSchema"
                ),
                "NotEnabled": helpers.absmod(__name__, ".NotEnabledErrorSchema"),
                "ObjectNotFound": helpers.absmod(
                    __name__, ".ObjectNotFoundErrorSchema"
                ),
                "OutOfStock": helpers.absmod(__name__, ".OutOfStockErrorSchema"),
                "OverCapacity": helpers.absmod(__name__, ".OverCapacityErrorSchema"),
                "OverlappingStandalonePriceValidity": helpers.absmod(
                    __name__, ".OverlappingStandalonePriceValidityErrorSchema"
                ),
                "PendingOperation": helpers.absmod(
                    __name__, ".PendingOperationErrorSchema"
                ),
                "PriceChanged": helpers.absmod(__name__, ".PriceChangedErrorSchema"),
                "ProductAssignmentMissing": helpers.absmod(
                    __name__, ".ProductAssignmentMissingErrorSchema"
                ),
                "ProductPresentWithDifferentVariantSelection": helpers.absmod(
                    __name__, ".ProductPresentWithDifferentVariantSelectionErrorSchema"
                ),
                "ProjectNotConfiguredForLanguages": helpers.absmod(
                    __name__, ".ProjectNotConfiguredForLanguagesErrorSchema"
                ),
                "QueryComplexityLimitExceeded": helpers.absmod(
                    __name__, ".QueryComplexityLimitExceededErrorSchema"
                ),
                "QueryTimedOut": helpers.absmod(__name__, ".QueryTimedOutErrorSchema"),
                "ReferenceExists": helpers.absmod(
                    __name__, ".ReferenceExistsErrorSchema"
                ),
                "ReferencedResourceNotFound": helpers.absmod(
                    __name__, ".ReferencedResourceNotFoundErrorSchema"
                ),
                "RequiredField": helpers.absmod(__name__, ".RequiredFieldErrorSchema"),
                "ResourceNotFound": helpers.absmod(
                    __name__, ".ResourceNotFoundErrorSchema"
                ),
                "ResourceSizeLimitExceeded": helpers.absmod(
                    __name__, ".ResourceSizeLimitExceededErrorSchema"
                ),
                "SearchDeactivated": helpers.absmod(
                    __name__, ".SearchDeactivatedErrorSchema"
                ),
                "SearchExecutionFailure": helpers.absmod(
                    __name__, ".SearchExecutionFailureErrorSchema"
                ),
                "SearchFacetPathNotFound": helpers.absmod(
                    __name__, ".SearchFacetPathNotFoundErrorSchema"
                ),
                "SearchIndexingInProgress": helpers.absmod(
                    __name__, ".SearchIndexingInProgressErrorSchema"
                ),
                "SemanticError": helpers.absmod(__name__, ".SemanticErrorErrorSchema"),
                "ShippingMethodDoesNotMatchCart": helpers.absmod(
                    __name__, ".ShippingMethodDoesNotMatchCartErrorSchema"
                ),
                "SyntaxError": helpers.absmod(__name__, ".SyntaxErrorErrorSchema"),
            },
        ),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.ErrorResponse(**data)


class AuthErrorResponseSchema(ErrorResponseSchema):
    error = marshmallow.fields.String(allow_none=True, load_default=None)
    error_description = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.AuthErrorResponse(**data)


class ExtensionBadResponseErrorSchema(ErrorObjectSchema):
    localized_message = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
        data_key="localizedMessage",
    )
    extension_extra_info = marshmallow.fields.Raw(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionExtraInfo",
    )
    extension_errors = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ExtensionErrorSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="extensionErrors",
    )
    extension_body = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionBody",
    )
    extension_status_code = marshmallow.fields.Integer(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionStatusCode",
    )
    extension_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="extensionId"
    )
    extension_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ExtensionBadResponseError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ExtensionErrorSchema(helpers.BaseSchema):
    code = marshmallow.fields.String(allow_none=True, load_default=None)
    message = marshmallow.fields.String(allow_none=True, load_default=None)
    extension_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="extensionId"
    )
    extension_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionKey",
    )
    _regex = helpers.RegexField(
        unknown=marshmallow.EXCLUDE,
        metadata={
            "pattern": re.compile(""),
            "type": marshmallow.fields.Raw(allow_none=True, load_default=None),
        },
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ExtensionError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ExtensionNoResponseErrorSchema(ErrorObjectSchema):
    extension_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="extensionId"
    )
    extension_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ExtensionNoResponseError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ExtensionPredicateEvaluationFailedErrorSchema(ErrorObjectSchema):
    error_by_extension = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ErrorByExtensionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="errorByExtension",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ExtensionPredicateEvaluationFailedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ExtensionUpdateActionsFailedErrorSchema(ErrorObjectSchema):
    localized_message = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
        data_key="localizedMessage",
    )
    extension_extra_info = marshmallow.fields.Raw(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionExtraInfo",
    )
    extension_errors = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ExtensionErrorSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="extensionErrors",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ExtensionUpdateActionsFailedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ExternalOAuthFailedErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ExternalOAuthFailedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class FeatureRemovedErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.FeatureRemovedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GeneralErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GeneralError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class InsufficientScopeErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.InsufficientScopeError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class InternalConstraintViolatedErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.InternalConstraintViolatedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class InvalidCredentialsErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.InvalidCredentialsError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class InvalidCurrentPasswordErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.InvalidCurrentPasswordError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class InvalidFieldErrorSchema(ErrorObjectSchema):
    field = marshmallow.fields.String(allow_none=True, load_default=None)
    invalid_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="invalidValue"
    )
    allowed_values = marshmallow.fields.List(
        marshmallow.fields.Raw(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="allowedValues",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.InvalidFieldError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class InvalidInputErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.InvalidInputError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class InvalidItemShippingDetailsErrorSchema(ErrorObjectSchema):
    subject = marshmallow.fields.String(allow_none=True, load_default=None)
    item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="itemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.InvalidItemShippingDetailsError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class InvalidJsonInputErrorSchema(ErrorObjectSchema):
    detailed_error_message = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="detailedErrorMessage"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.InvalidJsonInputError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class InvalidOperationErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.InvalidOperationError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class InvalidSubjectErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.InvalidSubjectError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class InvalidTokenErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.InvalidTokenError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class LanguageUsedInStoresErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.LanguageUsedInStoresError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class MatchingPriceNotFoundErrorSchema(ErrorObjectSchema):
    product_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="productId"
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    currency = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    country = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )
    channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.MatchingPriceNotFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class MaxResourceLimitExceededErrorSchema(ErrorObjectSchema):
    exceeded_resource = marshmallow_enum.EnumField(
        ReferenceTypeId,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="exceededResource",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.MaxResourceLimitExceededError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class MissingRoleOnChannelErrorSchema(ErrorObjectSchema):
    channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    missing_role = marshmallow_enum.EnumField(
        ChannelRoleEnum,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="missingRole",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.MissingRoleOnChannelError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class MissingTaxRateForCountryErrorSchema(ErrorObjectSchema):
    tax_category_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="taxCategoryId"
    )
    country = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    state = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.MissingTaxRateForCountryError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class MoneyOverflowErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.MoneyOverflowError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class NoMatchingProductDiscountFoundErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.NoMatchingProductDiscountFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class NotEnabledErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.NotEnabledError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ObjectNotFoundErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ObjectNotFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class OutOfStockErrorSchema(ErrorObjectSchema):
    line_items = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="lineItems",
    )
    skus = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True), allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.OutOfStockError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class OverCapacityErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.OverCapacityError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class OverlappingStandalonePriceValidityErrorSchema(ErrorObjectSchema):
    conflicting_standalone_price = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".standalone_price.StandalonePriceReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="conflictingStandalonePrice",
    )
    sku = marshmallow.fields.String(allow_none=True, load_default=None)
    currency = marshmallow.fields.String(allow_none=True, load_default=None)
    country = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".customer_group.CustomerGroupResourceIdentifierSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )
    channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validFrom",
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validUntil",
    )
    conflicting_valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="conflictingValidFrom",
    )
    conflicting_valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="conflictingValidUntil",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.OverlappingStandalonePriceValidityError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class PendingOperationErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.PendingOperationError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class PriceChangedErrorSchema(ErrorObjectSchema):
    line_items = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="lineItems",
    )
    shipping = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.PriceChangedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ProductAssignmentMissingErrorSchema(ErrorObjectSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ProductAssignmentMissingError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ProductPresentWithDifferentVariantSelectionErrorSchema(ErrorObjectSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    existing_variant_selection = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "exclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionExclusionSchema"
            ),
            "includeAllExcept": helpers.absmod(
                __name__,
                ".product_selection.ProductVariantSelectionIncludeAllExceptSchema",
            ),
            "includeOnly": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionIncludeOnlySchema"
            ),
            "inclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionInclusionSchema"
            ),
        },
        load_default=None,
        data_key="existingVariantSelection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ProductPresentWithDifferentVariantSelectionError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ProjectNotConfiguredForLanguagesErrorSchema(ErrorObjectSchema):
    languages = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ProjectNotConfiguredForLanguagesError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class QueryComplexityLimitExceededErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.QueryComplexityLimitExceededError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class QueryTimedOutErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.QueryTimedOutError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ReferenceExistsErrorSchema(ErrorObjectSchema):
    referenced_by = marshmallow_enum.EnumField(
        ReferenceTypeId,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="referencedBy",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ReferenceExistsError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ReferencedResourceNotFoundErrorSchema(ErrorObjectSchema):
    type_id = marshmallow_enum.EnumField(
        ReferenceTypeId,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="typeId",
    )
    id = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    key = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ReferencedResourceNotFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class RequiredFieldErrorSchema(ErrorObjectSchema):
    field = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.RequiredFieldError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ResourceNotFoundErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ResourceNotFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ResourceSizeLimitExceededErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ResourceSizeLimitExceededError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class SearchDeactivatedErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.SearchDeactivatedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class SearchExecutionFailureErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.SearchExecutionFailureError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class SearchFacetPathNotFoundErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.SearchFacetPathNotFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class SearchIndexingInProgressErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.SearchIndexingInProgressError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class SemanticErrorErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.SemanticErrorError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ShippingMethodDoesNotMatchCartErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ShippingMethodDoesNotMatchCartError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class SyntaxErrorErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.SyntaxErrorError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class VariantValuesSchema(helpers.BaseSchema):
    sku = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    prices = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceDraftSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    attributes = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.AttributeSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.VariantValues(**data)


class GraphQLErrorObjectSchema(helpers.BaseSchema):
    code = marshmallow.fields.String(allow_none=True, load_default=None)
    _regex = helpers.RegexField(
        unknown=marshmallow.EXCLUDE,
        metadata={
            "pattern": re.compile(""),
            "type": marshmallow.fields.Raw(allow_none=True, load_default=None),
        },
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLErrorObject(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLAnonymousIdAlreadyInUseErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLAnonymousIdAlreadyInUseError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLAssociateMissingPermissionErrorSchema(GraphQLErrorObjectSchema):
    associate = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    business_unit = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".business_unit.BusinessUnitResourceIdentifierSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="businessUnit",
    )
    associate_on_behalf = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="associateOnBehalf",
    )
    permissions = marshmallow.fields.List(
        marshmallow_enum.EnumField(Permission, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLAssociateMissingPermissionError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLAttributeDefinitionAlreadyExistsErrorSchema(GraphQLErrorObjectSchema):
    conflicting_product_type_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingProductTypeId"
    )
    conflicting_product_type_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingProductTypeName"
    )
    conflicting_attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingAttributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLAttributeDefinitionAlreadyExistsError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLAttributeDefinitionTypeConflictErrorSchema(GraphQLErrorObjectSchema):
    conflicting_product_type_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingProductTypeId"
    )
    conflicting_product_type_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingProductTypeName"
    )
    conflicting_attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingAttributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLAttributeDefinitionTypeConflictError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLAttributeNameDoesNotExistErrorSchema(GraphQLErrorObjectSchema):
    invalid_attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="invalidAttributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLAttributeNameDoesNotExistError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLBadGatewayErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLBadGatewayError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLConcurrentModificationErrorSchema(GraphQLErrorObjectSchema):
    current_version = marshmallow.fields.Integer(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="currentVersion",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLConcurrentModificationError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLCountryNotConfiguredInStoreErrorSchema(GraphQLErrorObjectSchema):
    store_countries = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="storeCountries",
    )
    country = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLCountryNotConfiguredInStoreError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLDiscountCodeNonApplicableErrorSchema(GraphQLErrorObjectSchema):
    discount_code = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="discountCode",
    )
    reason = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    discount_code_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="discountCodeId",
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validFrom",
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validUntil",
    )
    validity_check_time = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validityCheckTime",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLDiscountCodeNonApplicableError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLDuplicateAttributeValueErrorSchema(GraphQLErrorObjectSchema):
    attribute = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.AttributeSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLDuplicateAttributeValueError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLDuplicateAttributeValuesErrorSchema(GraphQLErrorObjectSchema):
    attributes = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.AttributeSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLDuplicateAttributeValuesError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLDuplicateEnumValuesErrorSchema(GraphQLErrorObjectSchema):
    duplicates = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True), allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLDuplicateEnumValuesError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLDuplicateFieldErrorSchema(GraphQLErrorObjectSchema):
    field = marshmallow.fields.String(allow_none=True, load_default=None)
    duplicate_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="duplicateValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLDuplicateFieldError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLDuplicateFieldWithConflictingResourceErrorSchema(GraphQLErrorObjectSchema):
    field = marshmallow.fields.String(allow_none=True, load_default=None)
    duplicate_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="duplicateValue"
    )
    conflicting_resource = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "associate-role": helpers.absmod(
                __name__, ".associate_role.AssociateRoleReferenceSchema"
            ),
            "attribute-group": helpers.absmod(
                __name__, ".attribute_group.AttributeGroupReferenceSchema"
            ),
            "business-unit": helpers.absmod(
                __name__, ".business_unit.BusinessUnitReferenceSchema"
            ),
            "cart-discount": helpers.absmod(
                __name__, ".cart_discount.CartDiscountReferenceSchema"
            ),
            "cart": helpers.absmod(__name__, ".cart.CartReferenceSchema"),
            "direct-discount": helpers.absmod(
                __name__, ".cart.DirectDiscountReferenceSchema"
            ),
            "category": helpers.absmod(__name__, ".category.CategoryReferenceSchema"),
            "channel": helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
            "key-value-document": helpers.absmod(
                __name__, ".custom_object.CustomObjectReferenceSchema"
            ),
            "customer-group": helpers.absmod(
                __name__, ".customer_group.CustomerGroupReferenceSchema"
            ),
            "customer": helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
            "discount-code": helpers.absmod(
                __name__, ".discount_code.DiscountCodeReferenceSchema"
            ),
            "inventory-entry": helpers.absmod(
                __name__, ".inventory.InventoryEntryReferenceSchema"
            ),
            "order-edit": helpers.absmod(
                __name__, ".order_edit.OrderEditReferenceSchema"
            ),
            "order": helpers.absmod(__name__, ".order.OrderReferenceSchema"),
            "payment": helpers.absmod(__name__, ".payment.PaymentReferenceSchema"),
            "product-discount": helpers.absmod(
                __name__, ".product_discount.ProductDiscountReferenceSchema"
            ),
            "product-selection": helpers.absmod(
                __name__, ".product_selection.ProductSelectionReferenceSchema"
            ),
            "product-type": helpers.absmod(
                __name__, ".product_type.ProductTypeReferenceSchema"
            ),
            "product": helpers.absmod(__name__, ".product.ProductReferenceSchema"),
            "quote-request": helpers.absmod(
                __name__, ".quote_request.QuoteRequestReferenceSchema"
            ),
            "quote": helpers.absmod(__name__, ".quote.QuoteReferenceSchema"),
            "review": helpers.absmod(__name__, ".review.ReviewReferenceSchema"),
            "shipping-method": helpers.absmod(
                __name__, ".shipping_method.ShippingMethodReferenceSchema"
            ),
            "shopping-list": helpers.absmod(
                __name__, ".shopping_list.ShoppingListReferenceSchema"
            ),
            "staged-quote": helpers.absmod(
                __name__, ".staged_quote.StagedQuoteReferenceSchema"
            ),
            "standalone-price": helpers.absmod(
                __name__, ".standalone_price.StandalonePriceReferenceSchema"
            ),
            "state": helpers.absmod(__name__, ".state.StateReferenceSchema"),
            "store": helpers.absmod(__name__, ".store.StoreReferenceSchema"),
            "tax-category": helpers.absmod(
                __name__, ".tax_category.TaxCategoryReferenceSchema"
            ),
            "type": helpers.absmod(__name__, ".type.TypeReferenceSchema"),
            "zone": helpers.absmod(__name__, ".zone.ZoneReferenceSchema"),
        },
        load_default=None,
        data_key="conflictingResource",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLDuplicateFieldWithConflictingResourceError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLDuplicatePriceKeyErrorSchema(GraphQLErrorObjectSchema):
    conflicting_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="conflictingPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLDuplicatePriceKeyError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLDuplicatePriceScopeErrorSchema(GraphQLErrorObjectSchema):
    conflicting_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="conflictingPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLDuplicatePriceScopeError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLDuplicateStandalonePriceScopeErrorSchema(GraphQLErrorObjectSchema):
    conflicting_standalone_price = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".standalone_price.StandalonePriceReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="conflictingStandalonePrice",
    )
    sku = marshmallow.fields.String(allow_none=True, load_default=None)
    currency = marshmallow.fields.String(allow_none=True, load_default=None)
    country = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".customer_group.CustomerGroupResourceIdentifierSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )
    channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validFrom",
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validUntil",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLDuplicateStandalonePriceScopeError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLDuplicateVariantValuesErrorSchema(GraphQLErrorObjectSchema):
    variant_values = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".VariantValuesSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="variantValues",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLDuplicateVariantValuesError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLEditPreviewFailedErrorSchema(GraphQLErrorObjectSchema):
    result = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order_edit.OrderEditPreviewFailureSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLEditPreviewFailedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLEnumKeyAlreadyExistsErrorSchema(GraphQLErrorObjectSchema):
    conflicting_enum_key = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingEnumKey"
    )
    conflicting_attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingAttributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLEnumKeyAlreadyExistsError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLEnumKeyDoesNotExistErrorSchema(GraphQLErrorObjectSchema):
    conflicting_enum_key = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingEnumKey"
    )
    conflicting_attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="conflictingAttributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLEnumKeyDoesNotExistError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLEnumValueIsUsedErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLEnumValueIsUsedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLEnumValuesMustMatchErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLEnumValuesMustMatchError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLExtensionBadResponseErrorSchema(GraphQLErrorObjectSchema):
    localized_message = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
        data_key="localizedMessage",
    )
    extension_extra_info = marshmallow.fields.Raw(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionExtraInfo",
    )
    extension_errors = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ExtensionErrorSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="extensionErrors",
    )
    extension_body = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionBody",
    )
    extension_status_code = marshmallow.fields.Integer(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionStatusCode",
    )
    extension_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="extensionId"
    )
    extension_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLExtensionBadResponseError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLExtensionNoResponseErrorSchema(GraphQLErrorObjectSchema):
    extension_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="extensionId"
    )
    extension_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLExtensionNoResponseError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLExtensionPredicateEvaluationFailedErrorSchema(GraphQLErrorObjectSchema):
    error_by_extension = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ErrorByExtensionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="errorByExtension",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLExtensionPredicateEvaluationFailedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLExtensionUpdateActionsFailedErrorSchema(GraphQLErrorObjectSchema):
    localized_message = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
        data_key="localizedMessage",
    )
    extension_extra_info = marshmallow.fields.Raw(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="extensionExtraInfo",
    )
    extension_errors = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ExtensionErrorSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="extensionErrors",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLExtensionUpdateActionsFailedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLExternalOAuthFailedErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLExternalOAuthFailedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLFeatureRemovedErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLFeatureRemovedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLGeneralErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLGeneralError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLInsufficientScopeErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLInsufficientScopeError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLInternalConstraintViolatedErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLInternalConstraintViolatedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLInvalidCredentialsErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLInvalidCredentialsError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLInvalidCurrentPasswordErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLInvalidCurrentPasswordError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLInvalidFieldErrorSchema(GraphQLErrorObjectSchema):
    field = marshmallow.fields.String(allow_none=True, load_default=None)
    invalid_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="invalidValue"
    )
    allowed_values = marshmallow.fields.List(
        marshmallow.fields.Raw(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="allowedValues",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLInvalidFieldError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLInvalidInputErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLInvalidInputError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLInvalidItemShippingDetailsErrorSchema(GraphQLErrorObjectSchema):
    subject = marshmallow.fields.String(allow_none=True, load_default=None)
    item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="itemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLInvalidItemShippingDetailsError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLInvalidJsonInputErrorSchema(GraphQLErrorObjectSchema):
    detailed_error_message = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="detailedErrorMessage"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLInvalidJsonInputError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLInvalidOperationErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLInvalidOperationError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLInvalidSubjectErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLInvalidSubjectError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLInvalidTokenErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLInvalidTokenError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLLanguageUsedInStoresErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLLanguageUsedInStoresError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLMatchingPriceNotFoundErrorSchema(GraphQLErrorObjectSchema):
    product_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="productId"
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    currency = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    country = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )
    channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLMatchingPriceNotFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLMaxResourceLimitExceededErrorSchema(GraphQLErrorObjectSchema):
    exceeded_resource = marshmallow_enum.EnumField(
        ReferenceTypeId,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="exceededResource",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLMaxResourceLimitExceededError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLMissingRoleOnChannelErrorSchema(GraphQLErrorObjectSchema):
    channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    missing_role = marshmallow_enum.EnumField(
        ChannelRoleEnum,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="missingRole",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLMissingRoleOnChannelError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLMissingTaxRateForCountryErrorSchema(GraphQLErrorObjectSchema):
    tax_category_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="taxCategoryId"
    )
    country = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    state = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLMissingTaxRateForCountryError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLMoneyOverflowErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLMoneyOverflowError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLNoMatchingProductDiscountFoundErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLNoMatchingProductDiscountFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLNotEnabledErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLNotEnabledError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLObjectNotFoundErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLObjectNotFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLOutOfStockErrorSchema(GraphQLErrorObjectSchema):
    line_items = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="lineItems",
    )
    skus = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True), allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLOutOfStockError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLOverCapacityErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLOverCapacityError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLOverlappingStandalonePriceValidityErrorSchema(GraphQLErrorObjectSchema):
    conflicting_standalone_price = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".standalone_price.StandalonePriceReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="conflictingStandalonePrice",
    )
    sku = marshmallow.fields.String(allow_none=True, load_default=None)
    currency = marshmallow.fields.String(allow_none=True, load_default=None)
    country = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".customer_group.CustomerGroupResourceIdentifierSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )
    channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelResourceIdentifierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validFrom",
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validUntil",
    )
    conflicting_valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="conflictingValidFrom",
    )
    conflicting_valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="conflictingValidUntil",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLOverlappingStandalonePriceValidityError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLPendingOperationErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLPendingOperationError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLPriceChangedErrorSchema(GraphQLErrorObjectSchema):
    line_items = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="lineItems",
    )
    shipping = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLPriceChangedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLProductAssignmentMissingErrorSchema(GraphQLErrorObjectSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLProductAssignmentMissingError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLProductPresentWithDifferentVariantSelectionErrorSchema(
    GraphQLErrorObjectSchema
):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    existing_variant_selection = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "exclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionExclusionSchema"
            ),
            "includeAllExcept": helpers.absmod(
                __name__,
                ".product_selection.ProductVariantSelectionIncludeAllExceptSchema",
            ),
            "includeOnly": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionIncludeOnlySchema"
            ),
            "inclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionInclusionSchema"
            ),
        },
        load_default=None,
        data_key="existingVariantSelection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLProductPresentWithDifferentVariantSelectionError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLProjectNotConfiguredForLanguagesErrorSchema(GraphQLErrorObjectSchema):
    languages = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLProjectNotConfiguredForLanguagesError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLQueryComplexityLimitExceededErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLQueryComplexityLimitExceededError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLQueryTimedOutErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLQueryTimedOutError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLReferenceExistsErrorSchema(GraphQLErrorObjectSchema):
    referenced_by = marshmallow_enum.EnumField(
        ReferenceTypeId,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="referencedBy",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLReferenceExistsError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLReferencedResourceNotFoundErrorSchema(GraphQLErrorObjectSchema):
    type_id = marshmallow_enum.EnumField(
        ReferenceTypeId,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="typeId",
    )
    id = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    key = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLReferencedResourceNotFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLRequiredFieldErrorSchema(GraphQLErrorObjectSchema):
    field = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLRequiredFieldError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLResourceNotFoundErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLResourceNotFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLResourceSizeLimitExceededErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLResourceSizeLimitExceededError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLSearchDeactivatedErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLSearchDeactivatedError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLSearchExecutionFailureErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLSearchExecutionFailureError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLSearchFacetPathNotFoundErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLSearchFacetPathNotFoundError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLSearchIndexingInProgressErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLSearchIndexingInProgressError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLSemanticErrorErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLSemanticErrorError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLShippingMethodDoesNotMatchCartErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLShippingMethodDoesNotMatchCartError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class GraphQLSyntaxErrorErrorSchema(GraphQLErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.GraphQLSyntaxErrorError(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)
