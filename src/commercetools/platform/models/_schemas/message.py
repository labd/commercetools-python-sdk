# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..associate_role import Permission
from ..business_unit import (
    BusinessUnitAssociateMode,
    BusinessUnitStatus,
    BusinessUnitStoreMode,
)
from ..cart import DiscountCodeState, ProductPublishScope
from ..order import OrderState, PaymentState, ReturnShipmentState, ShipmentState
from ..payment import TransactionState
from ..product import ProductPriceModeEnum
from ..quote import QuoteState
from ..quote_request import QuoteRequestState
from ..staged_quote import StagedQuoteState
from .common import BaseResourceSchema, LocalizedStringField

# Fields


# Marshmallow Schemas
class ContainerAndKeySchema(helpers.BaseSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    container = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.ContainerAndKey(**data)


class MessageSchema(BaseResourceSchema):
    last_modified_by = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LastModifiedBySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="lastModifiedBy",
    )
    created_by = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CreatedBySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="createdBy",
    )
    sequence_number = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="sequenceNumber"
    )
    resource = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "associate-role": helpers.absmod(
                __name__, ".associate_role.AssociateRoleReferenceSchema"
            ),
            "attribute-group": helpers.absmod(
                __name__, ".attribute_group.AttributeGroupReferenceSchema"
            ),
            "business-unit": helpers.absmod(
                __name__, ".business_unit.BusinessUnitReferenceSchema"
            ),
            "cart-discount": helpers.absmod(
                __name__, ".cart_discount.CartDiscountReferenceSchema"
            ),
            "cart": helpers.absmod(__name__, ".cart.CartReferenceSchema"),
            "direct-discount": helpers.absmod(
                __name__, ".cart.DirectDiscountReferenceSchema"
            ),
            "category": helpers.absmod(__name__, ".category.CategoryReferenceSchema"),
            "channel": helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
            "key-value-document": helpers.absmod(
                __name__, ".custom_object.CustomObjectReferenceSchema"
            ),
            "customer-group": helpers.absmod(
                __name__, ".customer_group.CustomerGroupReferenceSchema"
            ),
            "customer": helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
            "discount-code": helpers.absmod(
                __name__, ".discount_code.DiscountCodeReferenceSchema"
            ),
            "inventory-entry": helpers.absmod(
                __name__, ".inventory.InventoryEntryReferenceSchema"
            ),
            "order-edit": helpers.absmod(
                __name__, ".order_edit.OrderEditReferenceSchema"
            ),
            "order": helpers.absmod(__name__, ".order.OrderReferenceSchema"),
            "payment": helpers.absmod(__name__, ".payment.PaymentReferenceSchema"),
            "product-discount": helpers.absmod(
                __name__, ".product_discount.ProductDiscountReferenceSchema"
            ),
            "product-selection": helpers.absmod(
                __name__, ".product_selection.ProductSelectionReferenceSchema"
            ),
            "product-type": helpers.absmod(
                __name__, ".product_type.ProductTypeReferenceSchema"
            ),
            "product": helpers.absmod(__name__, ".product.ProductReferenceSchema"),
            "quote-request": helpers.absmod(
                __name__, ".quote_request.QuoteRequestReferenceSchema"
            ),
            "quote": helpers.absmod(__name__, ".quote.QuoteReferenceSchema"),
            "review": helpers.absmod(__name__, ".review.ReviewReferenceSchema"),
            "shipping-method": helpers.absmod(
                __name__, ".shipping_method.ShippingMethodReferenceSchema"
            ),
            "shopping-list": helpers.absmod(
                __name__, ".shopping_list.ShoppingListReferenceSchema"
            ),
            "staged-quote": helpers.absmod(
                __name__, ".staged_quote.StagedQuoteReferenceSchema"
            ),
            "standalone-price": helpers.absmod(
                __name__, ".standalone_price.StandalonePriceReferenceSchema"
            ),
            "state": helpers.absmod(__name__, ".state.StateReferenceSchema"),
            "store": helpers.absmod(__name__, ".store.StoreReferenceSchema"),
            "tax-category": helpers.absmod(
                __name__, ".tax_category.TaxCategoryReferenceSchema"
            ),
            "type": helpers.absmod(__name__, ".type.TypeReferenceSchema"),
            "zone": helpers.absmod(__name__, ".zone.ZoneReferenceSchema"),
        },
        load_default=None,
    )
    resource_version = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="resourceVersion"
    )
    type = marshmallow.fields.String(allow_none=True, load_default=None)
    resource_user_provided_identifiers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".UserProvidedIdentifiersSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="resourceUserProvidedIdentifiers",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.Message(**data)


class AssociateRoleBuyerAssignableChangedMessageSchema(MessageSchema):
    buyer_assignable = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="buyerAssignable"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRoleBuyerAssignableChangedMessage(**data)


class AssociateRoleCreatedMessageSchema(MessageSchema):
    associate_role = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".associate_role.AssociateRoleSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRole",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRoleCreatedMessage(**data)


class AssociateRoleDeletedMessageSchema(MessageSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRoleDeletedMessage(**data)


class AssociateRoleNameChangedMessageSchema(MessageSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRoleNameChangedMessage(**data)


class AssociateRolePermissionAddedMessageSchema(MessageSchema):
    permission = marshmallow_enum.EnumField(
        Permission, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRolePermissionAddedMessage(**data)


class AssociateRolePermissionRemovedMessageSchema(MessageSchema):
    permission = marshmallow_enum.EnumField(
        Permission, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRolePermissionRemovedMessage(**data)


class AssociateRolePermissionsSetMessageSchema(MessageSchema):
    permissions = marshmallow.fields.List(
        marshmallow_enum.EnumField(Permission, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRolePermissionsSetMessage(**data)


class BusinessUnitAddressAddedMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAddressAddedMessage(**data)


class BusinessUnitAddressChangedMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAddressChangedMessage(**data)


class BusinessUnitAddressRemovedMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAddressRemovedMessage(**data)


class BusinessUnitAssociateAddedMessageSchema(MessageSchema):
    associate = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".business_unit.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAssociateAddedMessage(**data)


class BusinessUnitAssociateChangedMessageSchema(MessageSchema):
    associate = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".business_unit.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAssociateChangedMessage(**data)


class BusinessUnitAssociateModeChangedMessageSchema(MessageSchema):
    associate_mode = marshmallow_enum.EnumField(
        BusinessUnitAssociateMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="associateMode",
    )
    old_associate_mode = marshmallow_enum.EnumField(
        BusinessUnitAssociateMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldAssociateMode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAssociateModeChangedMessage(**data)


class BusinessUnitAssociateRemovedMessageSchema(MessageSchema):
    associate = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".business_unit.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAssociateRemovedMessage(**data)


class BusinessUnitAssociatesSetMessageSchema(MessageSchema):
    associates = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".business_unit.AssociateSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAssociatesSetMessage(**data)


class BusinessUnitBillingAddressAddedMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitBillingAddressAddedMessage(**data)


class BusinessUnitBillingAddressRemovedMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitBillingAddressRemovedMessage(**data)


class BusinessUnitContactEmailSetMessageSchema(MessageSchema):
    contact_email = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="contactEmail",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitContactEmailSetMessage(**data)


class BusinessUnitCreatedMessageSchema(MessageSchema):
    business_unit = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("unitType", "unit_type"),
        discriminator_schemas={
            "Company": helpers.absmod(__name__, ".business_unit.CompanySchema"),
            "Division": helpers.absmod(__name__, ".business_unit.DivisionSchema"),
        },
        load_default=None,
        data_key="businessUnit",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitCreatedMessage(**data)


class BusinessUnitDefaultBillingAddressSetMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitDefaultBillingAddressSetMessage(**data)


class BusinessUnitDefaultShippingAddressSetMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitDefaultShippingAddressSetMessage(**data)


class BusinessUnitDeletedMessageSchema(MessageSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitDeletedMessage(**data)


class BusinessUnitNameChangedMessageSchema(MessageSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitNameChangedMessage(**data)


class BusinessUnitParentUnitChangedMessageSchema(MessageSchema):
    old_parent_unit = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".business_unit.BusinessUnitKeyReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldParentUnit",
    )
    new_parent_unit = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".business_unit.BusinessUnitKeyReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="newParentUnit",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitParentUnitChangedMessage(**data)


class BusinessUnitShippingAddressAddedMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitShippingAddressAddedMessage(**data)


class BusinessUnitShippingAddressRemovedMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitShippingAddressRemovedMessage(**data)


class BusinessUnitStatusChangedMessageSchema(MessageSchema):
    active = marshmallow_enum.EnumField(
        BusinessUnitStatus, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitStatusChangedMessage(**data)


class BusinessUnitStoreAddedMessageSchema(MessageSchema):
    store = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitStoreAddedMessage(**data)


class BusinessUnitStoreModeChangedMessageSchema(MessageSchema):
    stores = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    store_mode = marshmallow_enum.EnumField(
        BusinessUnitStoreMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="storeMode",
    )
    old_stores = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="oldStores",
    )
    old_store_mode = marshmallow_enum.EnumField(
        BusinessUnitStoreMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldStoreMode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitStoreModeChangedMessage(**data)


class BusinessUnitStoreRemovedMessageSchema(MessageSchema):
    store = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitStoreRemovedMessage(**data)


class BusinessUnitStoresSetMessageSchema(MessageSchema):
    stores = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitStoresSetMessage(**data)


class CategoryCreatedMessageSchema(MessageSchema):
    category = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".category.CategorySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CategoryCreatedMessage(**data)


class CategorySlugChangedMessageSchema(MessageSchema):
    slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    old_slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldSlug",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CategorySlugChangedMessage(**data)


class CustomerAddressAddedMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerAddressAddedMessage(**data)


class CustomerAddressChangedMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerAddressChangedMessage(**data)


class CustomerAddressRemovedMessageSchema(MessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerAddressRemovedMessage(**data)


class CustomerCompanyNameSetMessageSchema(MessageSchema):
    company_name = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="companyName",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerCompanyNameSetMessage(**data)


class CustomerCreatedMessageSchema(MessageSchema):
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerCreatedMessage(**data)


class CustomerDateOfBirthSetMessageSchema(MessageSchema):
    date_of_birth = marshmallow.fields.Date(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="dateOfBirth",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerDateOfBirthSetMessage(**data)


class CustomerDeletedMessageSchema(MessageSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerDeletedMessage(**data)


class CustomerEmailChangedMessageSchema(MessageSchema):
    email = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerEmailChangedMessage(**data)


class CustomerEmailVerifiedMessageSchema(MessageSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerEmailVerifiedMessage(**data)


class CustomerFirstNameSetMessageSchema(MessageSchema):
    first_name = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="firstName",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerFirstNameSetMessage(**data)


class CustomerGroupSetMessageSchema(MessageSchema):
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerGroupSetMessage(**data)


class CustomerLastNameSetMessageSchema(MessageSchema):
    last_name = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="lastName",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerLastNameSetMessage(**data)


class CustomerPasswordUpdatedMessageSchema(MessageSchema):
    reset = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerPasswordUpdatedMessage(**data)


class CustomerTitleSetMessageSchema(MessageSchema):
    title = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerTitleSetMessage(**data)


class InventoryEntryCreatedMessageSchema(MessageSchema):
    inventory_entry = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".inventory.InventoryEntrySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="inventoryEntry",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.InventoryEntryCreatedMessage(**data)


class InventoryEntryDeletedMessageSchema(MessageSchema):
    sku = marshmallow.fields.String(allow_none=True, load_default=None)
    supply_channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="supplyChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.InventoryEntryDeletedMessage(**data)


class InventoryEntryQuantitySetMessageSchema(MessageSchema):
    old_quantity_on_stock = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="oldQuantityOnStock"
    )
    new_quantity_on_stock = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="newQuantityOnStock"
    )
    old_available_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="oldAvailableQuantity"
    )
    new_available_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="newAvailableQuantity"
    )
    supply_channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="supplyChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.InventoryEntryQuantitySetMessage(**data)


class MessagePagedQueryResponseSchema(helpers.BaseSchema):
    limit = marshmallow.fields.Integer(allow_none=True, load_default=None)
    count = marshmallow.fields.Integer(allow_none=True, load_default=None)
    total = marshmallow.fields.Integer(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    offset = marshmallow.fields.Integer(allow_none=True, load_default=None)
    results = marshmallow.fields.List(
        helpers.Discriminator(
            allow_none=True,
            discriminator_field=("type", "type"),
            discriminator_schemas={
                "AssociateRoleBuyerAssignableChanged": helpers.absmod(
                    __name__, ".AssociateRoleBuyerAssignableChangedMessageSchema"
                ),
                "AssociateRoleCreated": helpers.absmod(
                    __name__, ".AssociateRoleCreatedMessageSchema"
                ),
                "AssociateRoleDeleted": helpers.absmod(
                    __name__, ".AssociateRoleDeletedMessageSchema"
                ),
                "AssociateRoleNameSet": helpers.absmod(
                    __name__, ".AssociateRoleNameChangedMessageSchema"
                ),
                "AssociateRolePermissionAdded": helpers.absmod(
                    __name__, ".AssociateRolePermissionAddedMessageSchema"
                ),
                "AssociateRolePermissionRemoved": helpers.absmod(
                    __name__, ".AssociateRolePermissionRemovedMessageSchema"
                ),
                "AssociateRolePermissionsSet": helpers.absmod(
                    __name__, ".AssociateRolePermissionsSetMessageSchema"
                ),
                "BusinessUnitAddressAdded": helpers.absmod(
                    __name__, ".BusinessUnitAddressAddedMessageSchema"
                ),
                "BusinessUnitAddressChanged": helpers.absmod(
                    __name__, ".BusinessUnitAddressChangedMessageSchema"
                ),
                "BusinessUnitAddressRemoved": helpers.absmod(
                    __name__, ".BusinessUnitAddressRemovedMessageSchema"
                ),
                "BusinessUnitAssociateAdded": helpers.absmod(
                    __name__, ".BusinessUnitAssociateAddedMessageSchema"
                ),
                "BusinessUnitAssociateChanged": helpers.absmod(
                    __name__, ".BusinessUnitAssociateChangedMessageSchema"
                ),
                "BusinessUnitAssociateModeChanged": helpers.absmod(
                    __name__, ".BusinessUnitAssociateModeChangedMessageSchema"
                ),
                "BusinessUnitAssociateRemoved": helpers.absmod(
                    __name__, ".BusinessUnitAssociateRemovedMessageSchema"
                ),
                "BusinessUnitAssociatesSet": helpers.absmod(
                    __name__, ".BusinessUnitAssociatesSetMessageSchema"
                ),
                "BusinessUnitBillingAddressAdded": helpers.absmod(
                    __name__, ".BusinessUnitBillingAddressAddedMessageSchema"
                ),
                "BusinessUnitBillingAddressRemoved": helpers.absmod(
                    __name__, ".BusinessUnitBillingAddressRemovedMessageSchema"
                ),
                "BusinessUnitContactEmailSet": helpers.absmod(
                    __name__, ".BusinessUnitContactEmailSetMessageSchema"
                ),
                "BusinessUnitCreated": helpers.absmod(
                    __name__, ".BusinessUnitCreatedMessageSchema"
                ),
                "BusinessUnitDefaultBillingAddressSet": helpers.absmod(
                    __name__, ".BusinessUnitDefaultBillingAddressSetMessageSchema"
                ),
                "BusinessUnitDefaultShippingAddressSet": helpers.absmod(
                    __name__, ".BusinessUnitDefaultShippingAddressSetMessageSchema"
                ),
                "BusinessUnitDeleted": helpers.absmod(
                    __name__, ".BusinessUnitDeletedMessageSchema"
                ),
                "BusinessUnitNameChanged": helpers.absmod(
                    __name__, ".BusinessUnitNameChangedMessageSchema"
                ),
                "BusinessUnitParentUnitChanged": helpers.absmod(
                    __name__, ".BusinessUnitParentUnitChangedMessageSchema"
                ),
                "BusinessUnitShippingAddressAdded": helpers.absmod(
                    __name__, ".BusinessUnitShippingAddressAddedMessageSchema"
                ),
                "BusinessUnitShippingAddressRemoved": helpers.absmod(
                    __name__, ".BusinessUnitShippingAddressRemovedMessageSchema"
                ),
                "BusinessUnitStatusChanged": helpers.absmod(
                    __name__, ".BusinessUnitStatusChangedMessageSchema"
                ),
                "BusinessUnitStoreAdded": helpers.absmod(
                    __name__, ".BusinessUnitStoreAddedMessageSchema"
                ),
                "BusinessUnitStoreModeChanged": helpers.absmod(
                    __name__, ".BusinessUnitStoreModeChangedMessageSchema"
                ),
                "BusinessUnitStoreRemoved": helpers.absmod(
                    __name__, ".BusinessUnitStoreRemovedMessageSchema"
                ),
                "BusinessUnitStoresSet": helpers.absmod(
                    __name__, ".BusinessUnitStoresSetMessageSchema"
                ),
                "CategoryCreated": helpers.absmod(
                    __name__, ".CategoryCreatedMessageSchema"
                ),
                "CategorySlugChanged": helpers.absmod(
                    __name__, ".CategorySlugChangedMessageSchema"
                ),
                "CustomerAddressAdded": helpers.absmod(
                    __name__, ".CustomerAddressAddedMessageSchema"
                ),
                "CustomerAddressChanged": helpers.absmod(
                    __name__, ".CustomerAddressChangedMessageSchema"
                ),
                "CustomerAddressRemoved": helpers.absmod(
                    __name__, ".CustomerAddressRemovedMessageSchema"
                ),
                "CustomerCompanyNameSet": helpers.absmod(
                    __name__, ".CustomerCompanyNameSetMessageSchema"
                ),
                "CustomerCreated": helpers.absmod(
                    __name__, ".CustomerCreatedMessageSchema"
                ),
                "CustomerDateOfBirthSet": helpers.absmod(
                    __name__, ".CustomerDateOfBirthSetMessageSchema"
                ),
                "CustomerDeleted": helpers.absmod(
                    __name__, ".CustomerDeletedMessageSchema"
                ),
                "CustomerEmailChanged": helpers.absmod(
                    __name__, ".CustomerEmailChangedMessageSchema"
                ),
                "CustomerEmailVerified": helpers.absmod(
                    __name__, ".CustomerEmailVerifiedMessageSchema"
                ),
                "CustomerFirstNameSet": helpers.absmod(
                    __name__, ".CustomerFirstNameSetMessageSchema"
                ),
                "CustomerGroupSet": helpers.absmod(
                    __name__, ".CustomerGroupSetMessageSchema"
                ),
                "CustomerLastNameSet": helpers.absmod(
                    __name__, ".CustomerLastNameSetMessageSchema"
                ),
                "CustomerPasswordUpdated": helpers.absmod(
                    __name__, ".CustomerPasswordUpdatedMessageSchema"
                ),
                "CustomerTitleSet": helpers.absmod(
                    __name__, ".CustomerTitleSetMessageSchema"
                ),
                "InventoryEntryCreated": helpers.absmod(
                    __name__, ".InventoryEntryCreatedMessageSchema"
                ),
                "InventoryEntryDeleted": helpers.absmod(
                    __name__, ".InventoryEntryDeletedMessageSchema"
                ),
                "InventoryEntryQuantitySet": helpers.absmod(
                    __name__, ".InventoryEntryQuantitySetMessageSchema"
                ),
                "OrderPaymentAdded": helpers.absmod(
                    __name__, ".OrderPaymentAddedMessageSchema"
                ),
                "PaymentCreated": helpers.absmod(
                    __name__, ".PaymentCreatedMessageSchema"
                ),
                "PaymentInteractionAdded": helpers.absmod(
                    __name__, ".PaymentInteractionAddedMessageSchema"
                ),
                "PaymentStatusInterfaceCodeSet": helpers.absmod(
                    __name__, ".PaymentStatusInterfaceCodeSetMessageSchema"
                ),
                "PaymentStatusStateTransition": helpers.absmod(
                    __name__, ".PaymentStatusStateTransitionMessageSchema"
                ),
                "PaymentTransactionAdded": helpers.absmod(
                    __name__, ".PaymentTransactionAddedMessageSchema"
                ),
                "PaymentTransactionStateChanged": helpers.absmod(
                    __name__, ".PaymentTransactionStateChangedMessageSchema"
                ),
                "ProductAddedToCategory": helpers.absmod(
                    __name__, ".ProductAddedToCategoryMessageSchema"
                ),
                "ProductCreated": helpers.absmod(
                    __name__, ".ProductCreatedMessageSchema"
                ),
                "ProductDeleted": helpers.absmod(
                    __name__, ".ProductDeletedMessageSchema"
                ),
                "ProductImageAdded": helpers.absmod(
                    __name__, ".ProductImageAddedMessageSchema"
                ),
                "ProductPriceAdded": helpers.absmod(
                    __name__, ".ProductPriceAddedMessageSchema"
                ),
                "ProductPriceChanged": helpers.absmod(
                    __name__, ".ProductPriceChangedMessageSchema"
                ),
                "ProductPriceDiscountsSet": helpers.absmod(
                    __name__, ".ProductPriceDiscountsSetMessageSchema"
                ),
                "ProductPriceExternalDiscountSet": helpers.absmod(
                    __name__, ".ProductPriceExternalDiscountSetMessageSchema"
                ),
                "ProductPriceKeySet": helpers.absmod(
                    __name__, ".ProductPriceKeySetMessageSchema"
                ),
                "ProductPriceModeSet": helpers.absmod(
                    __name__, ".ProductPriceModeSetMessageSchema"
                ),
                "ProductPriceRemoved": helpers.absmod(
                    __name__, ".ProductPriceRemovedMessageSchema"
                ),
                "ProductPricesSet": helpers.absmod(
                    __name__, ".ProductPricesSetMessageSchema"
                ),
                "ProductPublished": helpers.absmod(
                    __name__, ".ProductPublishedMessageSchema"
                ),
                "ProductRemovedFromCategory": helpers.absmod(
                    __name__, ".ProductRemovedFromCategoryMessageSchema"
                ),
                "ProductRevertedStagedChanges": helpers.absmod(
                    __name__, ".ProductRevertedStagedChangesMessageSchema"
                ),
                "ProductSelectionCreated": helpers.absmod(
                    __name__, ".ProductSelectionCreatedMessageSchema"
                ),
                "ProductSelectionDeleted": helpers.absmod(
                    __name__, ".ProductSelectionDeletedMessageSchema"
                ),
                "ProductSelectionProductAdded": helpers.absmod(
                    __name__, ".ProductSelectionProductAddedMessageSchema"
                ),
                "ProductSelectionProductExcluded": helpers.absmod(
                    __name__, ".ProductSelectionProductExcludedMessageSchema"
                ),
                "ProductSelectionProductRemoved": helpers.absmod(
                    __name__, ".ProductSelectionProductRemovedMessageSchema"
                ),
                "ProductSelectionVariantExclusionChanged": helpers.absmod(
                    __name__, ".ProductSelectionVariantExclusionChangedMessageSchema"
                ),
                "ProductSelectionVariantSelectionChanged": helpers.absmod(
                    __name__, ".ProductSelectionVariantSelectionChangedMessageSchema"
                ),
                "ProductSlugChanged": helpers.absmod(
                    __name__, ".ProductSlugChangedMessageSchema"
                ),
                "ProductStateTransition": helpers.absmod(
                    __name__, ".ProductStateTransitionMessageSchema"
                ),
                "ProductUnpublished": helpers.absmod(
                    __name__, ".ProductUnpublishedMessageSchema"
                ),
                "ProductVariantAdded": helpers.absmod(
                    __name__, ".ProductVariantAddedMessageSchema"
                ),
                "ProductVariantDeleted": helpers.absmod(
                    __name__, ".ProductVariantDeletedMessageSchema"
                ),
                "QuoteCreated": helpers.absmod(__name__, ".QuoteCreatedMessageSchema"),
                "QuoteCustomerChanged": helpers.absmod(
                    __name__, ".QuoteCustomerChangedMessageSchema"
                ),
                "QuoteDeleted": helpers.absmod(__name__, ".QuoteDeletedMessageSchema"),
                "QuoteRequestCreated": helpers.absmod(
                    __name__, ".QuoteRequestCreatedMessageSchema"
                ),
                "QuoteRequestCustomerChanged": helpers.absmod(
                    __name__, ".QuoteRequestCustomerChangedMessageSchema"
                ),
                "QuoteRequestDeleted": helpers.absmod(
                    __name__, ".QuoteRequestDeletedMessageSchema"
                ),
                "QuoteRequestStateChanged": helpers.absmod(
                    __name__, ".QuoteRequestStateChangedMessageSchema"
                ),
                "QuoteRequestStateTransition": helpers.absmod(
                    __name__, ".QuoteRequestStateTransitionMessageSchema"
                ),
                "QuoteStateChanged": helpers.absmod(
                    __name__, ".QuoteStateChangedMessageSchema"
                ),
                "QuoteStateTransition": helpers.absmod(
                    __name__, ".QuoteStateTransitionMessageSchema"
                ),
                "ReviewCreated": helpers.absmod(
                    __name__, ".ReviewCreatedMessageSchema"
                ),
                "ReviewRatingSet": helpers.absmod(
                    __name__, ".ReviewRatingSetMessageSchema"
                ),
                "ReviewStateTransition": helpers.absmod(
                    __name__, ".ReviewStateTransitionMessageSchema"
                ),
                "StagedQuoteCreated": helpers.absmod(
                    __name__, ".StagedQuoteCreatedMessageSchema"
                ),
                "StagedQuoteDeleted": helpers.absmod(
                    __name__, ".StagedQuoteDeletedMessageSchema"
                ),
                "StagedQuoteSellerCommentSet": helpers.absmod(
                    __name__, ".StagedQuoteSellerCommentSetMessageSchema"
                ),
                "StagedQuoteStateChanged": helpers.absmod(
                    __name__, ".StagedQuoteStateChangedMessageSchema"
                ),
                "StagedQuoteStateTransition": helpers.absmod(
                    __name__, ".StagedQuoteStateTransitionMessageSchema"
                ),
                "StagedQuoteValidToSet": helpers.absmod(
                    __name__, ".StagedQuoteValidToSetMessageSchema"
                ),
                "StandalonePriceActiveChanged": helpers.absmod(
                    __name__, ".StandalonePriceActiveChangedMessageSchema"
                ),
                "StandalonePriceCreated": helpers.absmod(
                    __name__, ".StandalonePriceCreatedMessageSchema"
                ),
                "StandalonePriceDeleted": helpers.absmod(
                    __name__, ".StandalonePriceDeletedMessageSchema"
                ),
                "StandalonePriceDiscountSet": helpers.absmod(
                    __name__, ".StandalonePriceDiscountSetMessageSchema"
                ),
                "StandalonePriceExternalDiscountSet": helpers.absmod(
                    __name__, ".StandalonePriceExternalDiscountSetMessageSchema"
                ),
                "StandalonePriceKeySet": helpers.absmod(
                    __name__, ".StandalonePriceKeySetMessageSchema"
                ),
                "StandalonePriceStagedChangesApplied": helpers.absmod(
                    __name__, ".StandalonePriceStagedChangesAppliedMessageSchema"
                ),
                "StandalonePriceTierAdded": helpers.absmod(
                    __name__, ".StandalonePriceTierAddedMessageSchema"
                ),
                "StandalonePriceTierRemoved": helpers.absmod(
                    __name__, ".StandalonePriceTierRemovedMessageSchema"
                ),
                "StandalonePriceTiersSet": helpers.absmod(
                    __name__, ".StandalonePriceTiersSetMessageSchema"
                ),
                "StandalonePriceValidFromAndUntilSet": helpers.absmod(
                    __name__, ".StandalonePriceValidFromAndUntilSetMessageSchema"
                ),
                "StandalonePriceValidFromSet": helpers.absmod(
                    __name__, ".StandalonePriceValidFromSetMessageSchema"
                ),
                "StandalonePriceValidUntilSet": helpers.absmod(
                    __name__, ".StandalonePriceValidUntilSetMessageSchema"
                ),
                "StandalonePriceValueChanged": helpers.absmod(
                    __name__, ".StandalonePriceValueChangedMessageSchema"
                ),
                "StoreCountriesChanged": helpers.absmod(
                    __name__, ".StoreCountriesChangedMessageSchema"
                ),
                "StoreCreated": helpers.absmod(__name__, ".StoreCreatedMessageSchema"),
                "StoreDeleted": helpers.absmod(__name__, ".StoreDeletedMessageSchema"),
                "StoreDistributionChannelsChanged": helpers.absmod(
                    __name__, ".StoreDistributionChannelsChangedMessageSchema"
                ),
                "StoreLanguagesChanged": helpers.absmod(
                    __name__, ".StoreLanguagesChangedMessageSchema"
                ),
                "StoreNameSet": helpers.absmod(__name__, ".StoreNameSetMessageSchema"),
                "StoreProductSelectionsChanged": helpers.absmod(
                    __name__, ".StoreProductSelectionsChangedMessageSchema"
                ),
                "StoreSupplyChannelsChanged": helpers.absmod(
                    __name__, ".StoreSupplyChannelsChangedMessageSchema"
                ),
            },
        ),
        allow_none=True,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.MessagePagedQueryResponse(**data)


class MessagesConfigurationSchema(helpers.BaseSchema):
    enabled = marshmallow.fields.Boolean(allow_none=True, load_default=None)
    delete_days_after_creation = marshmallow.fields.Integer(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="deleteDaysAfterCreation",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.MessagesConfiguration(**data)


class MessagesConfigurationDraftSchema(helpers.BaseSchema):
    enabled = marshmallow.fields.Boolean(allow_none=True, load_default=None)
    delete_days_after_creation = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="deleteDaysAfterCreation"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.MessagesConfigurationDraft(**data)


class OrderMessageSchema(MessageSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderMessage(**data)


class CustomLineItemStateTransitionMessageSchema(OrderMessageSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )
    transition_date = marshmallow.fields.DateTime(
        allow_none=True, load_default=None, data_key="transitionDate"
    )
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)
    from_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="fromState",
    )
    to_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="toState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomLineItemStateTransitionMessage(**data)


class DeliveryAddedMessageSchema(OrderMessageSchema):
    delivery = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliverySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.DeliveryAddedMessage(**data)


class DeliveryAddressSetMessageSchema(OrderMessageSchema):
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    old_address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldAddress",
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.DeliveryAddressSetMessage(**data)


class DeliveryItemsUpdatedMessageSchema(OrderMessageSchema):
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="oldItems",
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.DeliveryItemsUpdatedMessage(**data)


class DeliveryRemovedMessageSchema(OrderMessageSchema):
    delivery = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliverySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.DeliveryRemovedMessage(**data)


class LineItemStateTransitionMessageSchema(OrderMessageSchema):
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )
    transition_date = marshmallow.fields.DateTime(
        allow_none=True, load_default=None, data_key="transitionDate"
    )
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)
    from_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="fromState",
    )
    to_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="toState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.LineItemStateTransitionMessage(**data)


class OrderBillingAddressSetMessageSchema(OrderMessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    old_address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldAddress",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderBillingAddressSetMessage(**data)


class OrderCreatedMessageSchema(OrderMessageSchema):
    order = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.OrderSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCreatedMessage(**data)


class OrderCustomLineItemAddedMessageSchema(OrderMessageSchema):
    custom_line_item = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.CustomLineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="customLineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomLineItemAddedMessage(**data)


class OrderCustomLineItemDiscountSetMessageSchema(OrderMessageSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )
    discounted_price_per_quantity = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".cart.DiscountedLineItemPriceForQuantitySchema"
        ),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountedPricePerQuantity",
    )
    taxed_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.TaxedItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="taxedPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomLineItemDiscountSetMessage(**data)


class OrderCustomLineItemQuantityChangedMessageSchema(OrderMessageSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)
    old_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="oldQuantity"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomLineItemQuantityChangedMessage(**data)


class OrderCustomLineItemRemovedMessageSchema(OrderMessageSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )
    custom_line_item = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.CustomLineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="customLineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomLineItemRemovedMessage(**data)


class OrderCustomerEmailSetMessageSchema(OrderMessageSchema):
    email = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    old_email = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldEmail",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomerEmailSetMessage(**data)


class OrderCustomerGroupSetMessageSchema(OrderMessageSchema):
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )
    old_customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldCustomerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomerGroupSetMessage(**data)


class OrderCustomerSetMessageSchema(OrderMessageSchema):
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )
    old_customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldCustomer",
    )
    old_customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldCustomerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomerSetMessage(**data)


class OrderDeletedMessageSchema(OrderMessageSchema):
    order = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.OrderSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderDeletedMessage(**data)


class OrderDiscountCodeAddedMessageSchema(OrderMessageSchema):
    discount_code = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".discount_code.DiscountCodeReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountCode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderDiscountCodeAddedMessage(**data)


class OrderDiscountCodeRemovedMessageSchema(OrderMessageSchema):
    discount_code = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".discount_code.DiscountCodeReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountCode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderDiscountCodeRemovedMessage(**data)


class OrderDiscountCodeStateSetMessageSchema(OrderMessageSchema):
    discount_code = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".discount_code.DiscountCodeReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountCode",
    )
    state = marshmallow_enum.EnumField(
        DiscountCodeState, by_value=True, allow_none=True, load_default=None
    )
    old_state = marshmallow_enum.EnumField(
        DiscountCodeState,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderDiscountCodeStateSetMessage(**data)


class OrderEditAppliedMessageSchema(OrderMessageSchema):
    edit = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order_edit.OrderEditSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    result = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order_edit.OrderEditAppliedSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderEditAppliedMessage(**data)


class OrderImportedMessageSchema(OrderMessageSchema):
    order = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.OrderSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderImportedMessage(**data)


class OrderLineItemAddedMessageSchema(OrderMessageSchema):
    line_item = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.LineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="lineItem",
    )
    added_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="addedQuantity"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderLineItemAddedMessage(**data)


class OrderLineItemDiscountSetMessageSchema(OrderMessageSchema):
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )
    discounted_price_per_quantity = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".cart.DiscountedLineItemPriceForQuantitySchema"
        ),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountedPricePerQuantity",
    )
    total_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="totalPrice",
    )
    taxed_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.TaxedItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="taxedPrice",
    )
    taxed_price_portions = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.MethodTaxedPriceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="taxedPricePortions",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderLineItemDiscountSetMessage(**data)


class OrderLineItemDistributionChannelSetMessageSchema(OrderMessageSchema):
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )
    distribution_channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="distributionChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderLineItemDistributionChannelSetMessage(**data)


class OrderLineItemRemovedMessageSchema(OrderMessageSchema):
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )
    removed_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="removedQuantity"
    )
    new_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="newQuantity"
    )
    new_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ItemStateSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="newState",
    )
    new_total_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CentPrecisionMoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="newTotalPrice",
    )
    new_taxed_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.TaxedItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="newTaxedPrice",
    )
    new_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="newPrice",
    )
    new_shipping_detail = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.ItemShippingDetailsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="newShippingDetail",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderLineItemRemovedMessage(**data)


class OrderPaymentAddedMessageSchema(MessageSchema):
    payment = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".payment.PaymentReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderPaymentAddedMessage(**data)


class OrderPaymentStateChangedMessageSchema(OrderMessageSchema):
    payment_state = marshmallow_enum.EnumField(
        PaymentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="paymentState",
    )
    old_payment_state = marshmallow_enum.EnumField(
        PaymentState,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldPaymentState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderPaymentStateChangedMessage(**data)


class OrderPurchaseOrderNumberSetMessageSchema(OrderMessageSchema):
    purchase_order_number = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="purchaseOrderNumber",
    )
    old_purchase_order_number = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldPurchaseOrderNumber",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderPurchaseOrderNumberSetMessage(**data)


class OrderReturnShipmentStateChangedMessageSchema(OrderMessageSchema):
    return_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="returnItemId"
    )
    return_shipment_state = marshmallow_enum.EnumField(
        ReturnShipmentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="returnShipmentState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderReturnShipmentStateChangedMessage(**data)


class OrderShipmentStateChangedMessageSchema(OrderMessageSchema):
    shipment_state = marshmallow_enum.EnumField(
        ShipmentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="shipmentState",
    )
    old_shipment_state = marshmallow_enum.EnumField(
        ShipmentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldShipmentState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderShipmentStateChangedMessage(**data)


class OrderShippingAddressSetMessageSchema(OrderMessageSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    old_address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldAddress",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderShippingAddressSetMessage(**data)


class OrderShippingInfoSetMessageSchema(OrderMessageSchema):
    shipping_info = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.ShippingInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingInfo",
    )
    old_shipping_info = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.ShippingInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldShippingInfo",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderShippingInfoSetMessage(**data)


class OrderShippingRateInputSetMessageSchema(OrderMessageSchema):
    shipping_rate_input = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": helpers.absmod(
                __name__, ".cart.ClassificationShippingRateInputSchema"
            ),
            "Score": helpers.absmod(__name__, ".cart.ScoreShippingRateInputSchema"),
        },
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingRateInput",
    )
    old_shipping_rate_input = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": helpers.absmod(
                __name__, ".cart.ClassificationShippingRateInputSchema"
            ),
            "Score": helpers.absmod(__name__, ".cart.ScoreShippingRateInputSchema"),
        },
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldShippingRateInput",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderShippingRateInputSetMessage(**data)


class OrderStateChangedMessageSchema(OrderMessageSchema):
    order_state = marshmallow_enum.EnumField(
        OrderState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="orderState",
    )
    old_order_state = marshmallow_enum.EnumField(
        OrderState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldOrderState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderStateChangedMessage(**data)


class OrderStateTransitionMessageSchema(OrderMessageSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderStateTransitionMessage(**data)


class OrderStoreSetMessageSchema(OrderMessageSchema):
    store = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderStoreSetMessage(**data)


class ParcelAddedToDeliveryMessageSchema(OrderMessageSchema):
    delivery = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliverySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    parcel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ParcelSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ParcelAddedToDeliveryMessage(**data)


class ParcelItemsUpdatedMessageSchema(OrderMessageSchema):
    parcel_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="parcelId"
    )
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="oldItems",
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ParcelItemsUpdatedMessage(**data)


class ParcelMeasurementsUpdatedMessageSchema(OrderMessageSchema):
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    parcel_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="parcelId"
    )
    measurements = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ParcelMeasurementsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ParcelMeasurementsUpdatedMessage(**data)


class ParcelRemovedFromDeliveryMessageSchema(OrderMessageSchema):
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    parcel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ParcelSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ParcelRemovedFromDeliveryMessage(**data)


class ParcelTrackingDataUpdatedMessageSchema(OrderMessageSchema):
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    parcel_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="parcelId"
    )
    tracking_data = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.TrackingDataSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="trackingData",
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ParcelTrackingDataUpdatedMessage(**data)


class PaymentCreatedMessageSchema(MessageSchema):
    payment = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".payment.PaymentSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentCreatedMessage(**data)


class PaymentInteractionAddedMessageSchema(MessageSchema):
    interaction = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentInteractionAddedMessage(**data)


class PaymentStatusInterfaceCodeSetMessageSchema(MessageSchema):
    payment_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="paymentId"
    )
    interface_code = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="interfaceCode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentStatusInterfaceCodeSetMessage(**data)


class PaymentStatusStateTransitionMessageSchema(MessageSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentStatusStateTransitionMessage(**data)


class PaymentTransactionAddedMessageSchema(MessageSchema):
    transaction = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".payment.TransactionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentTransactionAddedMessage(**data)


class PaymentTransactionStateChangedMessageSchema(MessageSchema):
    transaction_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="transactionId"
    )
    state = marshmallow_enum.EnumField(
        TransactionState, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentTransactionStateChangedMessage(**data)


class ProductAddedToCategoryMessageSchema(MessageSchema):
    category = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".category.CategoryReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductAddedToCategoryMessage(**data)


class ProductCreatedMessageSchema(MessageSchema):
    product_projection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductProjectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productProjection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductCreatedMessage(**data)


class ProductDeletedMessageSchema(MessageSchema):
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="removedImageUrls",
    )
    current_projection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductProjectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="currentProjection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductDeletedMessage(**data)


class ProductImageAddedMessageSchema(MessageSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    image = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ImageSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductImageAddedMessage(**data)


class ProductPriceAddedMessageSchema(MessageSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceAddedMessage(**data)


class ProductPriceChangedMessageSchema(MessageSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    old_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="oldPrice",
    )
    new_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="newPrice",
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)
    old_staged_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldStagedPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceChangedMessage(**data)


class ProductPriceDiscountsSetMessageSchema(MessageSchema):
    updated_prices = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ProductPriceDiscountsSetUpdatedPriceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="updatedPrices",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceDiscountsSetMessage(**data)


class ProductPriceDiscountsSetUpdatedPriceSchema(helpers.BaseSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    variant_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="variantKey",
    )
    sku = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    price_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="priceId"
    )
    discounted = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DiscountedPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.ProductPriceDiscountsSetUpdatedPrice(**data)


class ProductPriceExternalDiscountSetMessageSchema(MessageSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    variant_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="variantKey",
    )
    sku = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    price_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="priceId"
    )
    discounted = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DiscountedPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceExternalDiscountSetMessage(**data)


class ProductPriceKeySetMessageSchema(MessageSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    price_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="priceId",
    )
    old_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldKey",
    )
    key = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceKeySetMessage(**data)


class ProductPriceModeSetMessageSchema(MessageSchema):
    to = marshmallow_enum.EnumField(
        ProductPriceModeEnum, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceModeSetMessage(**data)


class ProductPriceRemovedMessageSchema(MessageSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceRemovedMessage(**data)


class ProductPricesSetMessageSchema(MessageSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    prices = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPricesSetMessage(**data)


class ProductPublishedMessageSchema(MessageSchema):
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="removedImageUrls",
    )
    product_projection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductProjectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productProjection",
    )
    scope = marshmallow_enum.EnumField(
        ProductPublishScope, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPublishedMessage(**data)


class ProductRemovedFromCategoryMessageSchema(MessageSchema):
    category = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".category.CategoryReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductRemovedFromCategoryMessage(**data)


class ProductRevertedStagedChangesMessageSchema(MessageSchema):
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="removedImageUrls",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductRevertedStagedChangesMessage(**data)


class ProductSelectionCreatedMessageSchema(MessageSchema):
    product_selection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product_selection.ProductSelectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productSelection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionCreatedMessage(**data)


class ProductSelectionDeletedMessageSchema(MessageSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionDeletedMessage(**data)


class ProductSelectionProductAddedMessageSchema(MessageSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    variant_selection = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "exclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionExclusionSchema"
            ),
            "includeAllExcept": helpers.absmod(
                __name__,
                ".product_selection.ProductVariantSelectionIncludeAllExceptSchema",
            ),
            "includeOnly": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionIncludeOnlySchema"
            ),
            "inclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionInclusionSchema"
            ),
        },
        load_default=None,
        data_key="variantSelection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionProductAddedMessage(**data)


class ProductSelectionProductExcludedMessageSchema(MessageSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    variant_exclusion = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".product_selection.ProductVariantExclusionSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="variantExclusion",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionProductExcludedMessage(**data)


class ProductSelectionProductRemovedMessageSchema(MessageSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionProductRemovedMessage(**data)


class ProductSelectionVariantExclusionChangedMessageSchema(MessageSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_variant_exclusion = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".product_selection.ProductVariantExclusionSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="oldVariantExclusion",
    )
    new_variant_exclusion = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".product_selection.ProductVariantExclusionSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="newVariantExclusion",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionVariantExclusionChangedMessage(**data)


class ProductSelectionVariantSelectionChangedMessageSchema(MessageSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_variant_selection = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "exclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionExclusionSchema"
            ),
            "includeAllExcept": helpers.absmod(
                __name__,
                ".product_selection.ProductVariantSelectionIncludeAllExceptSchema",
            ),
            "includeOnly": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionIncludeOnlySchema"
            ),
            "inclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionInclusionSchema"
            ),
        },
        load_default=None,
        data_key="oldVariantSelection",
    )
    new_variant_selection = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "exclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionExclusionSchema"
            ),
            "includeAllExcept": helpers.absmod(
                __name__,
                ".product_selection.ProductVariantSelectionIncludeAllExceptSchema",
            ),
            "includeOnly": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionIncludeOnlySchema"
            ),
            "inclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionInclusionSchema"
            ),
        },
        load_default=None,
        data_key="newVariantSelection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionVariantSelectionChangedMessage(**data)


class ProductSlugChangedMessageSchema(MessageSchema):
    slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    old_slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldSlug",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSlugChangedMessage(**data)


class ProductStateTransitionMessageSchema(MessageSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductStateTransitionMessage(**data)


class ProductUnpublishedMessageSchema(MessageSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductUnpublishedMessage(**data)


class ProductVariantAddedMessageSchema(MessageSchema):
    variant = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductVariantSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductVariantAddedMessage(**data)


class ProductVariantDeletedMessageSchema(MessageSchema):
    variant = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductVariantSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="removedImageUrls",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductVariantDeletedMessage(**data)


class QuoteCreatedMessageSchema(MessageSchema):
    quote = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".quote.QuoteSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteCreatedMessage(**data)


class QuoteCustomerChangedMessageSchema(MessageSchema):
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    previous_customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousCustomer",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteCustomerChangedMessage(**data)


class QuoteDeletedMessageSchema(MessageSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteDeletedMessage(**data)


class QuoteRequestCreatedMessageSchema(MessageSchema):
    quote_request = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".quote_request.QuoteRequestSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="quoteRequest",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteRequestCreatedMessage(**data)


class QuoteRequestCustomerChangedMessageSchema(MessageSchema):
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    previous_customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousCustomer",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteRequestCustomerChangedMessage(**data)


class QuoteRequestDeletedMessageSchema(MessageSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteRequestDeletedMessage(**data)


class QuoteRequestStateChangedMessageSchema(MessageSchema):
    quote_request_state = marshmallow_enum.EnumField(
        QuoteRequestState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="quoteRequestState",
    )
    old_quote_request_state = marshmallow_enum.EnumField(
        QuoteRequestState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldQuoteRequestState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteRequestStateChangedMessage(**data)


class QuoteRequestStateTransitionMessageSchema(MessageSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteRequestStateTransitionMessage(**data)


class QuoteStateChangedMessageSchema(MessageSchema):
    quote_state = marshmallow_enum.EnumField(
        QuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="quoteState",
    )
    old_quote_state = marshmallow_enum.EnumField(
        QuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldQuoteState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteStateChangedMessage(**data)


class QuoteStateTransitionMessageSchema(MessageSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteStateTransitionMessage(**data)


class ReturnInfoAddedMessageSchema(OrderMessageSchema):
    return_info = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ReturnInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="returnInfo",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ReturnInfoAddedMessage(**data)


class ReturnInfoSetMessageSchema(OrderMessageSchema):
    return_info = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ReturnInfoSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="returnInfo",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ReturnInfoSetMessage(**data)


class ReviewCreatedMessageSchema(MessageSchema):
    review = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".review.ReviewSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ReviewCreatedMessage(**data)


class ReviewRatingSetMessageSchema(MessageSchema):
    old_rating = marshmallow.fields.Float(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldRating",
    )
    new_rating = marshmallow.fields.Float(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="newRating",
    )
    included_in_statistics = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="includedInStatistics"
    )
    target = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "associate-role": helpers.absmod(
                __name__, ".associate_role.AssociateRoleReferenceSchema"
            ),
            "attribute-group": helpers.absmod(
                __name__, ".attribute_group.AttributeGroupReferenceSchema"
            ),
            "business-unit": helpers.absmod(
                __name__, ".business_unit.BusinessUnitReferenceSchema"
            ),
            "cart-discount": helpers.absmod(
                __name__, ".cart_discount.CartDiscountReferenceSchema"
            ),
            "cart": helpers.absmod(__name__, ".cart.CartReferenceSchema"),
            "direct-discount": helpers.absmod(
                __name__, ".cart.DirectDiscountReferenceSchema"
            ),
            "category": helpers.absmod(__name__, ".category.CategoryReferenceSchema"),
            "channel": helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
            "key-value-document": helpers.absmod(
                __name__, ".custom_object.CustomObjectReferenceSchema"
            ),
            "customer-group": helpers.absmod(
                __name__, ".customer_group.CustomerGroupReferenceSchema"
            ),
            "customer": helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
            "discount-code": helpers.absmod(
                __name__, ".discount_code.DiscountCodeReferenceSchema"
            ),
            "inventory-entry": helpers.absmod(
                __name__, ".inventory.InventoryEntryReferenceSchema"
            ),
            "order-edit": helpers.absmod(
                __name__, ".order_edit.OrderEditReferenceSchema"
            ),
            "order": helpers.absmod(__name__, ".order.OrderReferenceSchema"),
            "payment": helpers.absmod(__name__, ".payment.PaymentReferenceSchema"),
            "product-discount": helpers.absmod(
                __name__, ".product_discount.ProductDiscountReferenceSchema"
            ),
            "product-selection": helpers.absmod(
                __name__, ".product_selection.ProductSelectionReferenceSchema"
            ),
            "product-type": helpers.absmod(
                __name__, ".product_type.ProductTypeReferenceSchema"
            ),
            "product": helpers.absmod(__name__, ".product.ProductReferenceSchema"),
            "quote-request": helpers.absmod(
                __name__, ".quote_request.QuoteRequestReferenceSchema"
            ),
            "quote": helpers.absmod(__name__, ".quote.QuoteReferenceSchema"),
            "review": helpers.absmod(__name__, ".review.ReviewReferenceSchema"),
            "shipping-method": helpers.absmod(
                __name__, ".shipping_method.ShippingMethodReferenceSchema"
            ),
            "shopping-list": helpers.absmod(
                __name__, ".shopping_list.ShoppingListReferenceSchema"
            ),
            "staged-quote": helpers.absmod(
                __name__, ".staged_quote.StagedQuoteReferenceSchema"
            ),
            "standalone-price": helpers.absmod(
                __name__, ".standalone_price.StandalonePriceReferenceSchema"
            ),
            "state": helpers.absmod(__name__, ".state.StateReferenceSchema"),
            "store": helpers.absmod(__name__, ".store.StoreReferenceSchema"),
            "tax-category": helpers.absmod(
                __name__, ".tax_category.TaxCategoryReferenceSchema"
            ),
            "type": helpers.absmod(__name__, ".type.TypeReferenceSchema"),
            "zone": helpers.absmod(__name__, ".zone.ZoneReferenceSchema"),
        },
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ReviewRatingSetMessage(**data)


class ReviewStateTransitionMessageSchema(MessageSchema):
    old_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )
    new_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="newState",
    )
    old_included_in_statistics = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="oldIncludedInStatistics"
    )
    new_included_in_statistics = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="newIncludedInStatistics"
    )
    target = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "associate-role": helpers.absmod(
                __name__, ".associate_role.AssociateRoleReferenceSchema"
            ),
            "attribute-group": helpers.absmod(
                __name__, ".attribute_group.AttributeGroupReferenceSchema"
            ),
            "business-unit": helpers.absmod(
                __name__, ".business_unit.BusinessUnitReferenceSchema"
            ),
            "cart-discount": helpers.absmod(
                __name__, ".cart_discount.CartDiscountReferenceSchema"
            ),
            "cart": helpers.absmod(__name__, ".cart.CartReferenceSchema"),
            "direct-discount": helpers.absmod(
                __name__, ".cart.DirectDiscountReferenceSchema"
            ),
            "category": helpers.absmod(__name__, ".category.CategoryReferenceSchema"),
            "channel": helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
            "key-value-document": helpers.absmod(
                __name__, ".custom_object.CustomObjectReferenceSchema"
            ),
            "customer-group": helpers.absmod(
                __name__, ".customer_group.CustomerGroupReferenceSchema"
            ),
            "customer": helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
            "discount-code": helpers.absmod(
                __name__, ".discount_code.DiscountCodeReferenceSchema"
            ),
            "inventory-entry": helpers.absmod(
                __name__, ".inventory.InventoryEntryReferenceSchema"
            ),
            "order-edit": helpers.absmod(
                __name__, ".order_edit.OrderEditReferenceSchema"
            ),
            "order": helpers.absmod(__name__, ".order.OrderReferenceSchema"),
            "payment": helpers.absmod(__name__, ".payment.PaymentReferenceSchema"),
            "product-discount": helpers.absmod(
                __name__, ".product_discount.ProductDiscountReferenceSchema"
            ),
            "product-selection": helpers.absmod(
                __name__, ".product_selection.ProductSelectionReferenceSchema"
            ),
            "product-type": helpers.absmod(
                __name__, ".product_type.ProductTypeReferenceSchema"
            ),
            "product": helpers.absmod(__name__, ".product.ProductReferenceSchema"),
            "quote-request": helpers.absmod(
                __name__, ".quote_request.QuoteRequestReferenceSchema"
            ),
            "quote": helpers.absmod(__name__, ".quote.QuoteReferenceSchema"),
            "review": helpers.absmod(__name__, ".review.ReviewReferenceSchema"),
            "shipping-method": helpers.absmod(
                __name__, ".shipping_method.ShippingMethodReferenceSchema"
            ),
            "shopping-list": helpers.absmod(
                __name__, ".shopping_list.ShoppingListReferenceSchema"
            ),
            "staged-quote": helpers.absmod(
                __name__, ".staged_quote.StagedQuoteReferenceSchema"
            ),
            "standalone-price": helpers.absmod(
                __name__, ".standalone_price.StandalonePriceReferenceSchema"
            ),
            "state": helpers.absmod(__name__, ".state.StateReferenceSchema"),
            "store": helpers.absmod(__name__, ".store.StoreReferenceSchema"),
            "tax-category": helpers.absmod(
                __name__, ".tax_category.TaxCategoryReferenceSchema"
            ),
            "type": helpers.absmod(__name__, ".type.TypeReferenceSchema"),
            "zone": helpers.absmod(__name__, ".zone.ZoneReferenceSchema"),
        },
        metadata={"omit_empty": True},
        load_default=None,
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ReviewStateTransitionMessage(**data)


class StagedQuoteCreatedMessageSchema(MessageSchema):
    staged_quote = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".staged_quote.StagedQuoteSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="stagedQuote",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteCreatedMessage(**data)


class StagedQuoteDeletedMessageSchema(MessageSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteDeletedMessage(**data)


class StagedQuoteSellerCommentSetMessageSchema(MessageSchema):
    seller_comment = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="sellerComment"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteSellerCommentSetMessage(**data)


class StagedQuoteStateChangedMessageSchema(MessageSchema):
    staged_quote_state = marshmallow_enum.EnumField(
        StagedQuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="stagedQuoteState",
    )
    old_staged_quote_state = marshmallow_enum.EnumField(
        StagedQuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldStagedQuoteState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteStateChangedMessage(**data)


class StagedQuoteStateTransitionMessageSchema(MessageSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteStateTransitionMessage(**data)


class StagedQuoteValidToSetMessageSchema(MessageSchema):
    valid_to = marshmallow.fields.DateTime(
        allow_none=True, load_default=None, data_key="validTo"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteValidToSetMessage(**data)


class StandalonePriceActiveChangedMessageSchema(MessageSchema):
    active = marshmallow.fields.Boolean(allow_none=True, load_default=None)
    old_active = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="oldActive"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceActiveChangedMessage(**data)


class StandalonePriceCreatedMessageSchema(MessageSchema):
    standalone_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".standalone_price.StandalonePriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="standalonePrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceCreatedMessage(**data)


class StandalonePriceDeletedMessageSchema(MessageSchema):
    sku = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceDeletedMessage(**data)


class StandalonePriceDiscountSetMessageSchema(MessageSchema):
    discounted = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DiscountedPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceDiscountSetMessage(**data)


class StandalonePriceExternalDiscountSetMessageSchema(MessageSchema):
    discounted = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DiscountedPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceExternalDiscountSetMessage(**data)


class StandalonePriceKeySetMessageSchema(MessageSchema):
    key = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    old_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceKeySetMessage(**data)


class StandalonePriceStagedChangesAppliedMessageSchema(MessageSchema):
    staged_changes = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".standalone_price.StagedStandalonePriceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="stagedChanges",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceStagedChangesAppliedMessage(**data)


class StandalonePriceTierAddedMessageSchema(MessageSchema):
    tier = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceTierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceTierAddedMessage(**data)


class StandalonePriceTierRemovedMessageSchema(MessageSchema):
    removed_tier = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceTierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="removedTier",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceTierRemovedMessage(**data)


class StandalonePriceTiersSetMessageSchema(MessageSchema):
    tiers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceTierSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    previous_tiers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceTierSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousTiers",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceTiersSetMessage(**data)


class StandalonePriceValidFromAndUntilSetMessageSchema(MessageSchema):
    valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validFrom",
    )
    previous_valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="previousValidFrom",
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validUntil",
    )
    previous_valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="previousValidUntil",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceValidFromAndUntilSetMessage(**data)


class StandalonePriceValidFromSetMessageSchema(MessageSchema):
    valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validFrom",
    )
    previous_valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="previousValidFrom",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceValidFromSetMessage(**data)


class StandalonePriceValidUntilSetMessageSchema(MessageSchema):
    valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validUntil",
    )
    previous_valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="previousValidUntil",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceValidUntilSetMessage(**data)


class StandalonePriceValueChangedMessageSchema(MessageSchema):
    value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)
    old_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceValueChangedMessage(**data)


class StoreCountriesChangedMessageSchema(MessageSchema):
    added_countries = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store_country.StoreCountrySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addedCountries",
    )
    removed_countries = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store_country.StoreCountrySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="removedCountries",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreCountriesChangedMessage(**data)


class StoreCreatedMessageSchema(MessageSchema):
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
    )
    languages = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
    )
    countries = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store_country.StoreCountrySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    distribution_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="distributionChannels",
    )
    supply_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="supplyChannels",
    )
    product_selections = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.ProductSelectionSettingSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productSelections",
    )
    custom = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreCreatedMessage(**data)


class StoreDeletedMessageSchema(MessageSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreDeletedMessage(**data)


class StoreDistributionChannelsChangedMessageSchema(MessageSchema):
    added_distribution_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addedDistributionChannels",
    )
    removed_distribution_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="removedDistributionChannels",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreDistributionChannelsChangedMessage(**data)


class StoreLanguagesChangedMessageSchema(MessageSchema):
    added_languages = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addedLanguages",
    )
    removed_languages = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="removedLanguages",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreLanguagesChangedMessage(**data)


class StoreNameSetMessageSchema(MessageSchema):
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
    )
    name_all_locales = marshmallow.fields.List(
        LocalizedStringField(
            allow_none=True, values=marshmallow.fields.String(allow_none=True)
        ),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="nameAllLocales",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreNameSetMessage(**data)


class StoreProductSelectionsChangedMessageSchema(MessageSchema):
    added_product_selections = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.ProductSelectionSettingSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addedProductSelections",
    )
    removed_product_selections = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.ProductSelectionSettingSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="removedProductSelections",
    )
    updated_product_selections = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.ProductSelectionSettingSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="updatedProductSelections",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreProductSelectionsChangedMessage(**data)


class StoreSupplyChannelsChangedMessageSchema(MessageSchema):
    added_supply_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addedSupplyChannels",
    )
    removed_supply_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="removedSupplyChannels",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreSupplyChannelsChangedMessage(**data)


class UserProvidedIdentifiersSchema(helpers.BaseSchema):
    key = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    external_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="externalId",
    )
    order_number = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="orderNumber",
    )
    customer_number = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerNumber",
    )
    sku = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
    )
    container_and_key = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ContainerAndKeySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="containerAndKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        return models.UserProvidedIdentifiers(**data)


class MessagePayloadSchema(helpers.BaseSchema):
    type = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.MessagePayload(**data)


class AssociateRoleBuyerAssignableChangedMessagePayloadSchema(MessagePayloadSchema):
    buyer_assignable = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="buyerAssignable"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRoleBuyerAssignableChangedMessagePayload(**data)


class AssociateRoleCreatedMessagePayloadSchema(MessagePayloadSchema):
    associate_role = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".associate_role.AssociateRoleSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRole",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRoleCreatedMessagePayload(**data)


class AssociateRoleDeletedMessagePayloadSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRoleDeletedMessagePayload(**data)


class AssociateRoleNameChangedMessagePayloadSchema(MessagePayloadSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRoleNameChangedMessagePayload(**data)


class AssociateRolePermissionAddedMessagePayloadSchema(MessagePayloadSchema):
    permission = marshmallow_enum.EnumField(
        Permission, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRolePermissionAddedMessagePayload(**data)


class AssociateRolePermissionRemovedMessagePayloadSchema(MessagePayloadSchema):
    permission = marshmallow_enum.EnumField(
        Permission, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRolePermissionRemovedMessagePayload(**data)


class AssociateRolePermissionsSetMessagePayloadSchema(MessagePayloadSchema):
    permissions = marshmallow.fields.List(
        marshmallow_enum.EnumField(Permission, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRolePermissionsSetMessagePayload(**data)


class BusinessUnitAddressAddedMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAddressAddedMessagePayload(**data)


class BusinessUnitAddressChangedMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAddressChangedMessagePayload(**data)


class BusinessUnitAddressRemovedMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAddressRemovedMessagePayload(**data)


class BusinessUnitAssociateAddedMessagePayloadSchema(MessagePayloadSchema):
    associate = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".business_unit.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAssociateAddedMessagePayload(**data)


class BusinessUnitAssociateChangedMessagePayloadSchema(MessagePayloadSchema):
    associate = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".business_unit.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAssociateChangedMessagePayload(**data)


class BusinessUnitAssociateModeChangedMessagePayloadSchema(MessagePayloadSchema):
    associate_mode = marshmallow_enum.EnumField(
        BusinessUnitAssociateMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="associateMode",
    )
    old_associate_mode = marshmallow_enum.EnumField(
        BusinessUnitAssociateMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldAssociateMode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAssociateModeChangedMessagePayload(**data)


class BusinessUnitAssociateRemovedMessagePayloadSchema(MessagePayloadSchema):
    associate = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".business_unit.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAssociateRemovedMessagePayload(**data)


class BusinessUnitAssociatesSetMessagePayloadSchema(MessagePayloadSchema):
    associates = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".business_unit.AssociateSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitAssociatesSetMessagePayload(**data)


class BusinessUnitBillingAddressAddedMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitBillingAddressAddedMessagePayload(**data)


class BusinessUnitBillingAddressRemovedMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitBillingAddressRemovedMessagePayload(**data)


class BusinessUnitContactEmailSetMessagePayloadSchema(MessagePayloadSchema):
    contact_email = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="contactEmail",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitContactEmailSetMessagePayload(**data)


class BusinessUnitCreatedMessagePayloadSchema(MessagePayloadSchema):
    business_unit = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("unitType", "unit_type"),
        discriminator_schemas={
            "Company": helpers.absmod(__name__, ".business_unit.CompanySchema"),
            "Division": helpers.absmod(__name__, ".business_unit.DivisionSchema"),
        },
        load_default=None,
        data_key="businessUnit",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitCreatedMessagePayload(**data)


class BusinessUnitDefaultBillingAddressSetMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitDefaultBillingAddressSetMessagePayload(**data)


class BusinessUnitDefaultShippingAddressSetMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitDefaultShippingAddressSetMessagePayload(**data)


class BusinessUnitDeletedMessagePayloadSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitDeletedMessagePayload(**data)


class BusinessUnitNameChangedMessagePayloadSchema(MessagePayloadSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitNameChangedMessagePayload(**data)


class BusinessUnitParentUnitChangedMessagePayloadSchema(MessagePayloadSchema):
    old_parent_unit = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".business_unit.BusinessUnitKeyReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldParentUnit",
    )
    new_parent_unit = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".business_unit.BusinessUnitKeyReferenceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="newParentUnit",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitParentUnitChangedMessagePayload(**data)


class BusinessUnitShippingAddressAddedMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitShippingAddressAddedMessagePayload(**data)


class BusinessUnitShippingAddressRemovedMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitShippingAddressRemovedMessagePayload(**data)


class BusinessUnitStatusChangedMessagePayloadSchema(MessagePayloadSchema):
    active = marshmallow_enum.EnumField(
        BusinessUnitStatus, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitStatusChangedMessagePayload(**data)


class BusinessUnitStoreAddedMessagePayloadSchema(MessagePayloadSchema):
    store = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitStoreAddedMessagePayload(**data)


class BusinessUnitStoreModeChangedMessagePayloadSchema(MessagePayloadSchema):
    stores = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    store_mode = marshmallow_enum.EnumField(
        BusinessUnitStoreMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="storeMode",
    )
    old_stores = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="oldStores",
    )
    old_store_mode = marshmallow_enum.EnumField(
        BusinessUnitStoreMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldStoreMode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitStoreModeChangedMessagePayload(**data)


class BusinessUnitStoreRemovedMessagePayloadSchema(MessagePayloadSchema):
    store = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitStoreRemovedMessagePayload(**data)


class BusinessUnitStoresSetMessagePayloadSchema(MessagePayloadSchema):
    stores = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitStoresSetMessagePayload(**data)


class CategoryCreatedMessagePayloadSchema(MessagePayloadSchema):
    category = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".category.CategorySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CategoryCreatedMessagePayload(**data)


class CategorySlugChangedMessagePayloadSchema(MessagePayloadSchema):
    slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    old_slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldSlug",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CategorySlugChangedMessagePayload(**data)


class CustomerAddressAddedMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerAddressAddedMessagePayload(**data)


class CustomerAddressChangedMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerAddressChangedMessagePayload(**data)


class CustomerAddressRemovedMessagePayloadSchema(MessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerAddressRemovedMessagePayload(**data)


class CustomerCompanyNameSetMessagePayloadSchema(MessagePayloadSchema):
    company_name = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="companyName",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerCompanyNameSetMessagePayload(**data)


class CustomerCreatedMessagePayloadSchema(MessagePayloadSchema):
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerCreatedMessagePayload(**data)


class CustomerDateOfBirthSetMessagePayloadSchema(MessagePayloadSchema):
    date_of_birth = marshmallow.fields.Date(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="dateOfBirth",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerDateOfBirthSetMessagePayload(**data)


class CustomerDeletedMessagePayloadSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerDeletedMessagePayload(**data)


class CustomerEmailChangedMessagePayloadSchema(MessagePayloadSchema):
    email = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerEmailChangedMessagePayload(**data)


class CustomerEmailVerifiedMessagePayloadSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerEmailVerifiedMessagePayload(**data)


class CustomerFirstNameSetMessagePayloadSchema(MessagePayloadSchema):
    first_name = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="firstName",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerFirstNameSetMessagePayload(**data)


class CustomerGroupSetMessagePayloadSchema(MessagePayloadSchema):
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerGroupSetMessagePayload(**data)


class CustomerLastNameSetMessagePayloadSchema(MessagePayloadSchema):
    last_name = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="lastName",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerLastNameSetMessagePayload(**data)


class CustomerPasswordUpdatedMessagePayloadSchema(MessagePayloadSchema):
    reset = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerPasswordUpdatedMessagePayload(**data)


class CustomerTitleSetMessagePayloadSchema(MessagePayloadSchema):
    title = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerTitleSetMessagePayload(**data)


class InventoryEntryCreatedMessagePayloadSchema(MessagePayloadSchema):
    inventory_entry = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".inventory.InventoryEntrySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="inventoryEntry",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.InventoryEntryCreatedMessagePayload(**data)


class InventoryEntryDeletedMessagePayloadSchema(MessagePayloadSchema):
    sku = marshmallow.fields.String(allow_none=True, load_default=None)
    supply_channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="supplyChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.InventoryEntryDeletedMessagePayload(**data)


class InventoryEntryQuantitySetMessagePayloadSchema(MessagePayloadSchema):
    old_quantity_on_stock = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="oldQuantityOnStock"
    )
    new_quantity_on_stock = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="newQuantityOnStock"
    )
    old_available_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="oldAvailableQuantity"
    )
    new_available_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="newAvailableQuantity"
    )
    supply_channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="supplyChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.InventoryEntryQuantitySetMessagePayload(**data)


class OrderMessagePayloadSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderMessagePayload(**data)


class CustomLineItemStateTransitionMessagePayloadSchema(OrderMessagePayloadSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )
    transition_date = marshmallow.fields.DateTime(
        allow_none=True, load_default=None, data_key="transitionDate"
    )
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)
    from_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="fromState",
    )
    to_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="toState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomLineItemStateTransitionMessagePayload(**data)


class DeliveryAddedMessagePayloadSchema(OrderMessagePayloadSchema):
    delivery = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliverySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.DeliveryAddedMessagePayload(**data)


class DeliveryAddressSetMessagePayloadSchema(OrderMessagePayloadSchema):
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    old_address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldAddress",
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.DeliveryAddressSetMessagePayload(**data)


class DeliveryItemsUpdatedMessagePayloadSchema(OrderMessagePayloadSchema):
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="oldItems",
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.DeliveryItemsUpdatedMessagePayload(**data)


class DeliveryRemovedMessagePayloadSchema(OrderMessagePayloadSchema):
    delivery = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliverySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.DeliveryRemovedMessagePayload(**data)


class LineItemStateTransitionMessagePayloadSchema(OrderMessagePayloadSchema):
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )
    transition_date = marshmallow.fields.DateTime(
        allow_none=True, load_default=None, data_key="transitionDate"
    )
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)
    from_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="fromState",
    )
    to_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="toState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.LineItemStateTransitionMessagePayload(**data)


class OrderBillingAddressSetMessagePayloadSchema(OrderMessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    old_address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldAddress",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderBillingAddressSetMessagePayload(**data)


class OrderCreatedMessagePayloadSchema(OrderMessagePayloadSchema):
    order = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.OrderSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCreatedMessagePayload(**data)


class OrderCustomLineItemAddedMessagePayloadSchema(OrderMessagePayloadSchema):
    custom_line_item = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.CustomLineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="customLineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomLineItemAddedMessagePayload(**data)


class OrderCustomLineItemDiscountSetMessagePayloadSchema(OrderMessagePayloadSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )
    discounted_price_per_quantity = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".cart.DiscountedLineItemPriceForQuantitySchema"
        ),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountedPricePerQuantity",
    )
    taxed_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.TaxedItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="taxedPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomLineItemDiscountSetMessagePayload(**data)


class OrderCustomLineItemQuantityChangedMessagePayloadSchema(OrderMessagePayloadSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)
    old_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="oldQuantity"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomLineItemQuantityChangedMessagePayload(**data)


class OrderCustomLineItemRemovedMessagePayloadSchema(OrderMessagePayloadSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )
    custom_line_item = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.CustomLineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="customLineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomLineItemRemovedMessagePayload(**data)


class OrderCustomerEmailSetMessagePayloadSchema(OrderMessagePayloadSchema):
    email = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    old_email = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldEmail",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomerEmailSetMessagePayload(**data)


class OrderCustomerGroupSetMessagePayloadSchema(OrderMessagePayloadSchema):
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )
    old_customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldCustomerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomerGroupSetMessagePayload(**data)


class OrderCustomerSetMessagePayloadSchema(OrderMessagePayloadSchema):
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="customerGroup",
    )
    old_customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldCustomer",
    )
    old_customer_group = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer_group.CustomerGroupReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldCustomerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderCustomerSetMessagePayload(**data)


class OrderDeletedMessagePayloadSchema(OrderMessagePayloadSchema):
    order = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.OrderSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderDeletedMessagePayload(**data)


class OrderDiscountCodeAddedMessagePayloadSchema(OrderMessagePayloadSchema):
    discount_code = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".discount_code.DiscountCodeReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountCode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderDiscountCodeAddedMessagePayload(**data)


class OrderDiscountCodeRemovedMessagePayloadSchema(OrderMessagePayloadSchema):
    discount_code = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".discount_code.DiscountCodeReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountCode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderDiscountCodeRemovedMessagePayload(**data)


class OrderDiscountCodeStateSetMessagePayloadSchema(OrderMessagePayloadSchema):
    discount_code = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".discount_code.DiscountCodeReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountCode",
    )
    state = marshmallow_enum.EnumField(
        DiscountCodeState, by_value=True, allow_none=True, load_default=None
    )
    old_state = marshmallow_enum.EnumField(
        DiscountCodeState,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderDiscountCodeStateSetMessagePayload(**data)


class OrderEditAppliedMessagePayloadSchema(OrderMessagePayloadSchema):
    edit = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order_edit.OrderEditSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    result = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order_edit.OrderEditAppliedSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderEditAppliedMessagePayload(**data)


class OrderImportedMessagePayloadSchema(OrderMessagePayloadSchema):
    order = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.OrderSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderImportedMessagePayload(**data)


class OrderLineItemAddedMessagePayloadSchema(OrderMessagePayloadSchema):
    line_item = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.LineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="lineItem",
    )
    added_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="addedQuantity"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderLineItemAddedMessagePayload(**data)


class OrderLineItemDiscountSetMessagePayloadSchema(OrderMessagePayloadSchema):
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )
    discounted_price_per_quantity = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".cart.DiscountedLineItemPriceForQuantitySchema"
        ),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountedPricePerQuantity",
    )
    total_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="totalPrice",
    )
    taxed_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.TaxedItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="taxedPrice",
    )
    taxed_price_portions = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.MethodTaxedPriceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="taxedPricePortions",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderLineItemDiscountSetMessagePayload(**data)


class OrderLineItemDistributionChannelSetMessagePayloadSchema(
    OrderMessagePayloadSchema
):
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )
    distribution_channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="distributionChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderLineItemDistributionChannelSetMessagePayload(**data)


class OrderLineItemRemovedMessagePayloadSchema(OrderMessagePayloadSchema):
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )
    removed_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="removedQuantity"
    )
    new_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="newQuantity"
    )
    new_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ItemStateSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="newState",
    )
    new_total_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CentPrecisionMoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="newTotalPrice",
    )
    new_taxed_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.TaxedItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="newTaxedPrice",
    )
    new_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="newPrice",
    )
    new_shipping_detail = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.ItemShippingDetailsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="newShippingDetail",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderLineItemRemovedMessagePayload(**data)


class OrderPaymentAddedMessagePayloadSchema(MessagePayloadSchema):
    payment = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".payment.PaymentReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderPaymentAddedMessagePayload(**data)


class OrderPaymentStateChangedMessagePayloadSchema(OrderMessagePayloadSchema):
    payment_state = marshmallow_enum.EnumField(
        PaymentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="paymentState",
    )
    old_payment_state = marshmallow_enum.EnumField(
        PaymentState,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldPaymentState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderPaymentStateChangedMessagePayload(**data)


class OrderPurchaseOrderNumberSetMessagePayloadSchema(OrderMessagePayloadSchema):
    purchase_order_number = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="purchaseOrderNumber",
    )
    old_purchase_order_number = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldPurchaseOrderNumber",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderPurchaseOrderNumberSetMessagePayload(**data)


class OrderReturnShipmentStateChangedMessagePayloadSchema(OrderMessagePayloadSchema):
    return_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="returnItemId"
    )
    return_shipment_state = marshmallow_enum.EnumField(
        ReturnShipmentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="returnShipmentState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderReturnShipmentStateChangedMessagePayload(**data)


class OrderShipmentStateChangedMessagePayloadSchema(OrderMessagePayloadSchema):
    shipment_state = marshmallow_enum.EnumField(
        ShipmentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="shipmentState",
    )
    old_shipment_state = marshmallow_enum.EnumField(
        ShipmentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldShipmentState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderShipmentStateChangedMessagePayload(**data)


class OrderShippingAddressSetMessagePayloadSchema(OrderMessagePayloadSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    old_address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldAddress",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderShippingAddressSetMessagePayload(**data)


class OrderShippingInfoSetMessagePayloadSchema(OrderMessagePayloadSchema):
    shipping_info = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.ShippingInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingInfo",
    )
    old_shipping_info = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".cart.ShippingInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldShippingInfo",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderShippingInfoSetMessagePayload(**data)


class OrderShippingRateInputSetMessagePayloadSchema(OrderMessagePayloadSchema):
    shipping_rate_input = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": helpers.absmod(
                __name__, ".cart.ClassificationShippingRateInputSchema"
            ),
            "Score": helpers.absmod(__name__, ".cart.ScoreShippingRateInputSchema"),
        },
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingRateInput",
    )
    old_shipping_rate_input = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": helpers.absmod(
                __name__, ".cart.ClassificationShippingRateInputSchema"
            ),
            "Score": helpers.absmod(__name__, ".cart.ScoreShippingRateInputSchema"),
        },
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldShippingRateInput",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderShippingRateInputSetMessagePayload(**data)


class OrderStateChangedMessagePayloadSchema(OrderMessagePayloadSchema):
    order_state = marshmallow_enum.EnumField(
        OrderState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="orderState",
    )
    old_order_state = marshmallow_enum.EnumField(
        OrderState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldOrderState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderStateChangedMessagePayload(**data)


class OrderStateTransitionMessagePayloadSchema(OrderMessagePayloadSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderStateTransitionMessagePayload(**data)


class OrderStoreSetMessagePayloadSchema(OrderMessagePayloadSchema):
    store = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderStoreSetMessagePayload(**data)


class ParcelAddedToDeliveryMessagePayloadSchema(OrderMessagePayloadSchema):
    delivery = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliverySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    parcel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ParcelSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ParcelAddedToDeliveryMessagePayload(**data)


class ParcelItemsUpdatedMessagePayloadSchema(OrderMessagePayloadSchema):
    parcel_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="parcelId"
    )
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="oldItems",
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ParcelItemsUpdatedMessagePayload(**data)


class ParcelMeasurementsUpdatedMessagePayloadSchema(OrderMessagePayloadSchema):
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    parcel_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="parcelId"
    )
    measurements = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ParcelMeasurementsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ParcelMeasurementsUpdatedMessagePayload(**data)


class ParcelRemovedFromDeliveryMessagePayloadSchema(OrderMessagePayloadSchema):
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    parcel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ParcelSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ParcelRemovedFromDeliveryMessagePayload(**data)


class ParcelTrackingDataUpdatedMessagePayloadSchema(OrderMessagePayloadSchema):
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )
    parcel_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="parcelId"
    )
    tracking_data = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.TrackingDataSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="trackingData",
    )
    shipping_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="shippingKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ParcelTrackingDataUpdatedMessagePayload(**data)


class PaymentCreatedMessagePayloadSchema(MessagePayloadSchema):
    payment = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".payment.PaymentSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentCreatedMessagePayload(**data)


class PaymentInteractionAddedMessagePayloadSchema(MessagePayloadSchema):
    interaction = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentInteractionAddedMessagePayload(**data)


class PaymentStatusInterfaceCodeSetMessagePayloadSchema(MessagePayloadSchema):
    payment_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="paymentId"
    )
    interface_code = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="interfaceCode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentStatusInterfaceCodeSetMessagePayload(**data)


class PaymentStatusStateTransitionMessagePayloadSchema(MessagePayloadSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentStatusStateTransitionMessagePayload(**data)


class PaymentTransactionAddedMessagePayloadSchema(MessagePayloadSchema):
    transaction = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".payment.TransactionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentTransactionAddedMessagePayload(**data)


class PaymentTransactionStateChangedMessagePayloadSchema(MessagePayloadSchema):
    transaction_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="transactionId"
    )
    state = marshmallow_enum.EnumField(
        TransactionState, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentTransactionStateChangedMessagePayload(**data)


class ProductAddedToCategoryMessagePayloadSchema(MessagePayloadSchema):
    category = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".category.CategoryReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductAddedToCategoryMessagePayload(**data)


class ProductCreatedMessagePayloadSchema(MessagePayloadSchema):
    product_projection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductProjectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productProjection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductCreatedMessagePayload(**data)


class ProductDeletedMessagePayloadSchema(MessagePayloadSchema):
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="removedImageUrls",
    )
    current_projection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductProjectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="currentProjection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductDeletedMessagePayload(**data)


class ProductImageAddedMessagePayloadSchema(MessagePayloadSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    image = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ImageSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductImageAddedMessagePayload(**data)


class ProductPriceAddedMessagePayloadSchema(MessagePayloadSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceAddedMessagePayload(**data)


class ProductPriceChangedMessagePayloadSchema(MessagePayloadSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    old_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="oldPrice",
    )
    new_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="newPrice",
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)
    old_staged_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldStagedPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceChangedMessagePayload(**data)


class ProductPriceDiscountsSetMessagePayloadSchema(MessagePayloadSchema):
    updated_prices = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ProductPriceDiscountsSetUpdatedPriceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="updatedPrices",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceDiscountsSetMessagePayload(**data)


class ProductPriceExternalDiscountSetMessagePayloadSchema(MessagePayloadSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    variant_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="variantKey",
    )
    sku = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    price_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="priceId"
    )
    discounted = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DiscountedPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceExternalDiscountSetMessagePayload(**data)


class ProductPriceKeySetMessagePayloadSchema(MessagePayloadSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    price_id = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="priceId",
    )
    old_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldKey",
    )
    key = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceKeySetMessagePayload(**data)


class ProductPriceModeSetMessagePayloadSchema(MessagePayloadSchema):
    to = marshmallow_enum.EnumField(
        ProductPriceModeEnum, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceModeSetMessagePayload(**data)


class ProductPriceRemovedMessagePayloadSchema(MessagePayloadSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPriceRemovedMessagePayload(**data)


class ProductPricesSetMessagePayloadSchema(MessagePayloadSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    prices = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPricesSetMessagePayload(**data)


class ProductPublishedMessagePayloadSchema(MessagePayloadSchema):
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="removedImageUrls",
    )
    product_projection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductProjectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productProjection",
    )
    scope = marshmallow_enum.EnumField(
        ProductPublishScope, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductPublishedMessagePayload(**data)


class ProductRemovedFromCategoryMessagePayloadSchema(MessagePayloadSchema):
    category = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".category.CategoryReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductRemovedFromCategoryMessagePayload(**data)


class ProductRevertedStagedChangesMessagePayloadSchema(MessagePayloadSchema):
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="removedImageUrls",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductRevertedStagedChangesMessagePayload(**data)


class ProductSelectionCreatedMessagePayloadSchema(MessagePayloadSchema):
    product_selection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product_selection.ProductSelectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productSelection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionCreatedMessagePayload(**data)


class ProductSelectionDeletedMessagePayloadSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionDeletedMessagePayload(**data)


class ProductSelectionProductAddedMessagePayloadSchema(MessagePayloadSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    variant_selection = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "exclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionExclusionSchema"
            ),
            "includeAllExcept": helpers.absmod(
                __name__,
                ".product_selection.ProductVariantSelectionIncludeAllExceptSchema",
            ),
            "includeOnly": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionIncludeOnlySchema"
            ),
            "inclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionInclusionSchema"
            ),
        },
        load_default=None,
        data_key="variantSelection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionProductAddedMessagePayload(**data)


class ProductSelectionProductExcludedMessagePayloadSchema(MessagePayloadSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    variant_exclusion = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".product_selection.ProductVariantExclusionSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="variantExclusion",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionProductExcludedMessagePayload(**data)


class ProductSelectionProductRemovedMessagePayloadSchema(MessagePayloadSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionProductRemovedMessagePayload(**data)


class ProductSelectionVariantExclusionChangedMessagePayloadSchema(MessagePayloadSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_variant_exclusion = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".product_selection.ProductVariantExclusionSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="oldVariantExclusion",
    )
    new_variant_exclusion = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".product_selection.ProductVariantExclusionSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="newVariantExclusion",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionVariantExclusionChangedMessagePayload(**data)


class ProductSelectionVariantSelectionChangedMessagePayloadSchema(MessagePayloadSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_variant_selection = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "exclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionExclusionSchema"
            ),
            "includeAllExcept": helpers.absmod(
                __name__,
                ".product_selection.ProductVariantSelectionIncludeAllExceptSchema",
            ),
            "includeOnly": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionIncludeOnlySchema"
            ),
            "inclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionInclusionSchema"
            ),
        },
        load_default=None,
        data_key="oldVariantSelection",
    )
    new_variant_selection = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "exclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionExclusionSchema"
            ),
            "includeAllExcept": helpers.absmod(
                __name__,
                ".product_selection.ProductVariantSelectionIncludeAllExceptSchema",
            ),
            "includeOnly": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionIncludeOnlySchema"
            ),
            "inclusion": helpers.absmod(
                __name__, ".product_selection.ProductVariantSelectionInclusionSchema"
            ),
        },
        load_default=None,
        data_key="newVariantSelection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSelectionVariantSelectionChangedMessagePayload(**data)


class ProductSlugChangedMessagePayloadSchema(MessagePayloadSchema):
    slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    old_slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldSlug",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductSlugChangedMessagePayload(**data)


class ProductStateTransitionMessagePayloadSchema(MessagePayloadSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductStateTransitionMessagePayload(**data)


class ProductUnpublishedMessagePayloadSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductUnpublishedMessagePayload(**data)


class ProductVariantAddedMessagePayloadSchema(MessagePayloadSchema):
    variant = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductVariantSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductVariantAddedMessagePayload(**data)


class ProductVariantDeletedMessagePayloadSchema(MessagePayloadSchema):
    variant = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".product.ProductVariantSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="removedImageUrls",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductVariantDeletedMessagePayload(**data)


class QuoteCreatedMessagePayloadSchema(MessagePayloadSchema):
    quote = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".quote.QuoteSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteCreatedMessagePayload(**data)


class QuoteCustomerChangedMessagePayloadSchema(MessagePayloadSchema):
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    previous_customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousCustomer",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteCustomerChangedMessagePayload(**data)


class QuoteDeletedMessagePayloadSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteDeletedMessagePayload(**data)


class QuoteRequestCreatedMessagePayloadSchema(MessagePayloadSchema):
    quote_request = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".quote_request.QuoteRequestSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="quoteRequest",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteRequestCreatedMessagePayload(**data)


class QuoteRequestCustomerChangedMessagePayloadSchema(MessagePayloadSchema):
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    previous_customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousCustomer",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteRequestCustomerChangedMessagePayload(**data)


class QuoteRequestDeletedMessagePayloadSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteRequestDeletedMessagePayload(**data)


class QuoteRequestStateChangedMessagePayloadSchema(MessagePayloadSchema):
    quote_request_state = marshmallow_enum.EnumField(
        QuoteRequestState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="quoteRequestState",
    )
    old_quote_request_state = marshmallow_enum.EnumField(
        QuoteRequestState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldQuoteRequestState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteRequestStateChangedMessagePayload(**data)


class QuoteRequestStateTransitionMessagePayloadSchema(MessagePayloadSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteRequestStateTransitionMessagePayload(**data)


class QuoteStateChangedMessagePayloadSchema(MessagePayloadSchema):
    quote_state = marshmallow_enum.EnumField(
        QuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="quoteState",
    )
    old_quote_state = marshmallow_enum.EnumField(
        QuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldQuoteState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteStateChangedMessagePayload(**data)


class QuoteStateTransitionMessagePayloadSchema(MessagePayloadSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteStateTransitionMessagePayload(**data)


class ReturnInfoAddedMessagePayloadSchema(OrderMessagePayloadSchema):
    return_info = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ReturnInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="returnInfo",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ReturnInfoAddedMessagePayload(**data)


class ReturnInfoSetMessagePayloadSchema(OrderMessagePayloadSchema):
    return_info = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".order.ReturnInfoSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="returnInfo",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ReturnInfoSetMessagePayload(**data)


class ReviewCreatedMessagePayloadSchema(MessagePayloadSchema):
    review = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".review.ReviewSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ReviewCreatedMessagePayload(**data)


class ReviewRatingSetMessagePayloadSchema(MessagePayloadSchema):
    old_rating = marshmallow.fields.Float(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldRating",
    )
    new_rating = marshmallow.fields.Float(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="newRating",
    )
    included_in_statistics = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="includedInStatistics"
    )
    target = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "associate-role": helpers.absmod(
                __name__, ".associate_role.AssociateRoleReferenceSchema"
            ),
            "attribute-group": helpers.absmod(
                __name__, ".attribute_group.AttributeGroupReferenceSchema"
            ),
            "business-unit": helpers.absmod(
                __name__, ".business_unit.BusinessUnitReferenceSchema"
            ),
            "cart-discount": helpers.absmod(
                __name__, ".cart_discount.CartDiscountReferenceSchema"
            ),
            "cart": helpers.absmod(__name__, ".cart.CartReferenceSchema"),
            "direct-discount": helpers.absmod(
                __name__, ".cart.DirectDiscountReferenceSchema"
            ),
            "category": helpers.absmod(__name__, ".category.CategoryReferenceSchema"),
            "channel": helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
            "key-value-document": helpers.absmod(
                __name__, ".custom_object.CustomObjectReferenceSchema"
            ),
            "customer-group": helpers.absmod(
                __name__, ".customer_group.CustomerGroupReferenceSchema"
            ),
            "customer": helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
            "discount-code": helpers.absmod(
                __name__, ".discount_code.DiscountCodeReferenceSchema"
            ),
            "inventory-entry": helpers.absmod(
                __name__, ".inventory.InventoryEntryReferenceSchema"
            ),
            "order-edit": helpers.absmod(
                __name__, ".order_edit.OrderEditReferenceSchema"
            ),
            "order": helpers.absmod(__name__, ".order.OrderReferenceSchema"),
            "payment": helpers.absmod(__name__, ".payment.PaymentReferenceSchema"),
            "product-discount": helpers.absmod(
                __name__, ".product_discount.ProductDiscountReferenceSchema"
            ),
            "product-selection": helpers.absmod(
                __name__, ".product_selection.ProductSelectionReferenceSchema"
            ),
            "product-type": helpers.absmod(
                __name__, ".product_type.ProductTypeReferenceSchema"
            ),
            "product": helpers.absmod(__name__, ".product.ProductReferenceSchema"),
            "quote-request": helpers.absmod(
                __name__, ".quote_request.QuoteRequestReferenceSchema"
            ),
            "quote": helpers.absmod(__name__, ".quote.QuoteReferenceSchema"),
            "review": helpers.absmod(__name__, ".review.ReviewReferenceSchema"),
            "shipping-method": helpers.absmod(
                __name__, ".shipping_method.ShippingMethodReferenceSchema"
            ),
            "shopping-list": helpers.absmod(
                __name__, ".shopping_list.ShoppingListReferenceSchema"
            ),
            "staged-quote": helpers.absmod(
                __name__, ".staged_quote.StagedQuoteReferenceSchema"
            ),
            "standalone-price": helpers.absmod(
                __name__, ".standalone_price.StandalonePriceReferenceSchema"
            ),
            "state": helpers.absmod(__name__, ".state.StateReferenceSchema"),
            "store": helpers.absmod(__name__, ".store.StoreReferenceSchema"),
            "tax-category": helpers.absmod(
                __name__, ".tax_category.TaxCategoryReferenceSchema"
            ),
            "type": helpers.absmod(__name__, ".type.TypeReferenceSchema"),
            "zone": helpers.absmod(__name__, ".zone.ZoneReferenceSchema"),
        },
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ReviewRatingSetMessagePayload(**data)


class ReviewStateTransitionMessagePayloadSchema(MessagePayloadSchema):
    old_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )
    new_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="newState",
    )
    old_included_in_statistics = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="oldIncludedInStatistics"
    )
    new_included_in_statistics = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="newIncludedInStatistics"
    )
    target = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "associate-role": helpers.absmod(
                __name__, ".associate_role.AssociateRoleReferenceSchema"
            ),
            "attribute-group": helpers.absmod(
                __name__, ".attribute_group.AttributeGroupReferenceSchema"
            ),
            "business-unit": helpers.absmod(
                __name__, ".business_unit.BusinessUnitReferenceSchema"
            ),
            "cart-discount": helpers.absmod(
                __name__, ".cart_discount.CartDiscountReferenceSchema"
            ),
            "cart": helpers.absmod(__name__, ".cart.CartReferenceSchema"),
            "direct-discount": helpers.absmod(
                __name__, ".cart.DirectDiscountReferenceSchema"
            ),
            "category": helpers.absmod(__name__, ".category.CategoryReferenceSchema"),
            "channel": helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
            "key-value-document": helpers.absmod(
                __name__, ".custom_object.CustomObjectReferenceSchema"
            ),
            "customer-group": helpers.absmod(
                __name__, ".customer_group.CustomerGroupReferenceSchema"
            ),
            "customer": helpers.absmod(__name__, ".customer.CustomerReferenceSchema"),
            "discount-code": helpers.absmod(
                __name__, ".discount_code.DiscountCodeReferenceSchema"
            ),
            "inventory-entry": helpers.absmod(
                __name__, ".inventory.InventoryEntryReferenceSchema"
            ),
            "order-edit": helpers.absmod(
                __name__, ".order_edit.OrderEditReferenceSchema"
            ),
            "order": helpers.absmod(__name__, ".order.OrderReferenceSchema"),
            "payment": helpers.absmod(__name__, ".payment.PaymentReferenceSchema"),
            "product-discount": helpers.absmod(
                __name__, ".product_discount.ProductDiscountReferenceSchema"
            ),
            "product-selection": helpers.absmod(
                __name__, ".product_selection.ProductSelectionReferenceSchema"
            ),
            "product-type": helpers.absmod(
                __name__, ".product_type.ProductTypeReferenceSchema"
            ),
            "product": helpers.absmod(__name__, ".product.ProductReferenceSchema"),
            "quote-request": helpers.absmod(
                __name__, ".quote_request.QuoteRequestReferenceSchema"
            ),
            "quote": helpers.absmod(__name__, ".quote.QuoteReferenceSchema"),
            "review": helpers.absmod(__name__, ".review.ReviewReferenceSchema"),
            "shipping-method": helpers.absmod(
                __name__, ".shipping_method.ShippingMethodReferenceSchema"
            ),
            "shopping-list": helpers.absmod(
                __name__, ".shopping_list.ShoppingListReferenceSchema"
            ),
            "staged-quote": helpers.absmod(
                __name__, ".staged_quote.StagedQuoteReferenceSchema"
            ),
            "standalone-price": helpers.absmod(
                __name__, ".standalone_price.StandalonePriceReferenceSchema"
            ),
            "state": helpers.absmod(__name__, ".state.StateReferenceSchema"),
            "store": helpers.absmod(__name__, ".store.StoreReferenceSchema"),
            "tax-category": helpers.absmod(
                __name__, ".tax_category.TaxCategoryReferenceSchema"
            ),
            "type": helpers.absmod(__name__, ".type.TypeReferenceSchema"),
            "zone": helpers.absmod(__name__, ".zone.ZoneReferenceSchema"),
        },
        metadata={"omit_empty": True},
        load_default=None,
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ReviewStateTransitionMessagePayload(**data)


class ShoppingListStoreSetMessagePayloadSchema(MessagePayloadSchema):
    store = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.StoreKeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ShoppingListStoreSetMessagePayload(**data)


class StagedQuoteCreatedMessagePayloadSchema(MessagePayloadSchema):
    staged_quote = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".staged_quote.StagedQuoteSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="stagedQuote",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteCreatedMessagePayload(**data)


class StagedQuoteDeletedMessagePayloadSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteDeletedMessagePayload(**data)


class StagedQuoteSellerCommentSetMessagePayloadSchema(MessagePayloadSchema):
    seller_comment = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="sellerComment"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteSellerCommentSetMessagePayload(**data)


class StagedQuoteStateChangedMessagePayloadSchema(MessagePayloadSchema):
    staged_quote_state = marshmallow_enum.EnumField(
        StagedQuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="stagedQuoteState",
    )
    old_staged_quote_state = marshmallow_enum.EnumField(
        StagedQuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="oldStagedQuoteState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteStateChangedMessagePayload(**data)


class StagedQuoteStateTransitionMessagePayloadSchema(MessagePayloadSchema):
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    old_state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".state.StateReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldState",
    )
    force = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteStateTransitionMessagePayload(**data)


class StagedQuoteValidToSetMessagePayloadSchema(MessagePayloadSchema):
    valid_to = marshmallow.fields.DateTime(
        allow_none=True, load_default=None, data_key="validTo"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteValidToSetMessagePayload(**data)


class StandalonePriceActiveChangedMessagePayloadSchema(MessagePayloadSchema):
    active = marshmallow.fields.Boolean(allow_none=True, load_default=None)
    old_active = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="oldActive"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceActiveChangedMessagePayload(**data)


class StandalonePriceCreatedMessagePayloadSchema(MessagePayloadSchema):
    standalone_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".standalone_price.StandalonePriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="standalonePrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceCreatedMessagePayload(**data)


class StandalonePriceDeletedMessagePayloadSchema(MessagePayloadSchema):
    sku = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceDeletedMessagePayload(**data)


class StandalonePriceDiscountSetMessagePayloadSchema(MessagePayloadSchema):
    discounted = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DiscountedPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceDiscountSetMessagePayload(**data)


class StandalonePriceExternalDiscountSetMessagePayloadSchema(MessagePayloadSchema):
    discounted = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DiscountedPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceExternalDiscountSetMessagePayload(**data)


class StandalonePriceKeySetMessagePayloadSchema(MessagePayloadSchema):
    key = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    old_key = marshmallow.fields.String(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldKey",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceKeySetMessagePayload(**data)


class StandalonePriceStagedChangesAppliedMessagePayloadSchema(MessagePayloadSchema):
    staged_changes = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".standalone_price.StagedStandalonePriceSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="stagedChanges",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceStagedChangesAppliedMessagePayload(**data)


class StandalonePriceTierAddedMessagePayloadSchema(MessagePayloadSchema):
    tier = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceTierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceTierAddedMessagePayload(**data)


class StandalonePriceTierRemovedMessagePayloadSchema(MessagePayloadSchema):
    removed_tier = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceTierSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="removedTier",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceTierRemovedMessagePayload(**data)


class StandalonePriceTiersSetMessagePayloadSchema(MessagePayloadSchema):
    tiers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceTierSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    previous_tiers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceTierSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousTiers",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceTiersSetMessagePayload(**data)


class StandalonePriceValidFromAndUntilSetMessagePayloadSchema(MessagePayloadSchema):
    valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validFrom",
    )
    previous_valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="previousValidFrom",
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validUntil",
    )
    previous_valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="previousValidUntil",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceValidFromAndUntilSetMessagePayload(**data)


class StandalonePriceValidFromSetMessagePayloadSchema(MessagePayloadSchema):
    valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validFrom",
    )
    previous_valid_from = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="previousValidFrom",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceValidFromSetMessagePayload(**data)


class StandalonePriceValidUntilSetMessagePayloadSchema(MessagePayloadSchema):
    valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="validUntil",
    )
    previous_valid_until = marshmallow.fields.DateTime(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="previousValidUntil",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceValidUntilSetMessagePayload(**data)


class StandalonePriceValueChangedMessagePayloadSchema(MessagePayloadSchema):
    value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged = marshmallow.fields.Boolean(allow_none=True, load_default=None)
    old_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="oldValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StandalonePriceValueChangedMessagePayload(**data)


class StoreCountriesChangedMessagePayloadSchema(MessagePayloadSchema):
    added_countries = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store_country.StoreCountrySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addedCountries",
    )
    removed_countries = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store_country.StoreCountrySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="removedCountries",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreCountriesChangedMessagePayload(**data)


class StoreCreatedMessagePayloadSchema(MessagePayloadSchema):
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
    )
    languages = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
    )
    countries = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store_country.StoreCountrySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    distribution_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="distributionChannels",
    )
    supply_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="supplyChannels",
    )
    product_selections = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.ProductSelectionSettingSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productSelections",
    )
    custom = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".type.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreCreatedMessagePayload(**data)


class StoreDeletedMessagePayloadSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreDeletedMessagePayload(**data)


class StoreDistributionChannelsChangedMessagePayloadSchema(MessagePayloadSchema):
    added_distribution_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addedDistributionChannels",
    )
    removed_distribution_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="removedDistributionChannels",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreDistributionChannelsChangedMessagePayload(**data)


class StoreLanguagesChangedMessagePayloadSchema(MessagePayloadSchema):
    added_languages = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addedLanguages",
    )
    removed_languages = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="removedLanguages",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreLanguagesChangedMessagePayload(**data)


class StoreNameSetMessagePayloadSchema(MessagePayloadSchema):
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        metadata={"omit_empty": True},
        load_default=None,
    )
    name_all_locales = marshmallow.fields.List(
        LocalizedStringField(
            allow_none=True, values=marshmallow.fields.String(allow_none=True)
        ),
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="nameAllLocales",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreNameSetMessagePayload(**data)


class StoreProductSelectionsChangedMessagePayloadSchema(MessagePayloadSchema):
    added_product_selections = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.ProductSelectionSettingSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addedProductSelections",
    )
    removed_product_selections = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.ProductSelectionSettingSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="removedProductSelections",
    )
    updated_product_selections = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".store.ProductSelectionSettingSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="updatedProductSelections",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreProductSelectionsChangedMessagePayload(**data)


class StoreSupplyChannelsChangedMessagePayloadSchema(MessagePayloadSchema):
    added_supply_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="addedSupplyChannels",
    )
    removed_supply_channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".channel.ChannelReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="removedSupplyChannels",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StoreSupplyChannelsChangedMessagePayload(**data)
