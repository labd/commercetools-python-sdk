# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..search import SearchFieldType, SearchMatchType, SearchSortMode, SearchSortOrder

# Fields


# Marshmallow Schemas


class SearchMatchingVariantSchema(helpers.BaseSchema):
    id = marshmallow.fields.Integer(allow_none=True, load_default=None)
    sku = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchMatchingVariant(**data)


class SearchQuerySchema(helpers.BaseSchema):

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchQuery(**data)


class SearchCompoundExpressionSchema(SearchQuerySchema):

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchCompoundExpression(**data)


class SearchAndExpressionSchema(SearchCompoundExpressionSchema):
    and_ = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchQuerySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="and",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchAndExpression(**data)


class SearchFilterExpressionSchema(SearchCompoundExpressionSchema):
    filter = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchQueryExpressionSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchFilterExpression(**data)


class SearchNotExpressionSchema(SearchCompoundExpressionSchema):
    not_ = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchQuerySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="not",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchNotExpression(**data)


class SearchOrExpressionSchema(SearchCompoundExpressionSchema):
    or_ = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchQuerySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="or",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchOrExpression(**data)


class SearchQueryExpressionSchema(SearchQuerySchema):

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchQueryExpression(**data)


class SearchDateRangeExpressionSchema(SearchQueryExpressionSchema):
    range = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchDateRangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchDateRangeExpression(**data)


class SearchDateTimeRangeExpressionSchema(SearchQueryExpressionSchema):
    range = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchDateTimeRangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchDateTimeRangeExpression(**data)


class SearchExactExpressionSchema(SearchQueryExpressionSchema):
    exact = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchAnyValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchExactExpression(**data)


class SearchExistsExpressionSchema(SearchQueryExpressionSchema):
    exists = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchExistsValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchExistsExpression(**data)


class SearchFullTextExpressionSchema(SearchQueryExpressionSchema):
    full_text = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchFullTextValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="fullText",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchFullTextExpression(**data)


class SearchFullTextPrefixExpressionSchema(SearchQueryExpressionSchema):
    full_text_prefix = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchFullTextPrefixValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="fullTextPrefix",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchFullTextPrefixExpression(**data)


class SearchLongRangeExpressionSchema(SearchQueryExpressionSchema):
    range = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchLongRangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchLongRangeExpression(**data)


class SearchNumberRangeExpressionSchema(SearchQueryExpressionSchema):
    range = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchNumberRangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchNumberRangeExpression(**data)


class SearchPrefixExpressionSchema(SearchQueryExpressionSchema):
    prefix = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchAnyValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchPrefixExpression(**data)


class SearchQueryExpressionValueSchema(helpers.BaseSchema):
    field = marshmallow.fields.String(allow_none=True, load_default=None)
    boost = marshmallow.fields.Float(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    field_type = marshmallow_enum.EnumField(
        SearchFieldType,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="fieldType",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchQueryExpressionValue(**data)


class SearchAnyValueSchema(SearchQueryExpressionValueSchema):
    value = marshmallow.fields.Raw(allow_none=True, load_default=None)
    language = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    case_insensitive = marshmallow.fields.Boolean(
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="caseInsensitive",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchAnyValue(**data)


class SearchDateRangeValueSchema(SearchQueryExpressionValueSchema):
    gte = marshmallow.fields.Date(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    gt = marshmallow.fields.Date(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    lte = marshmallow.fields.Date(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    lt = marshmallow.fields.Date(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchDateRangeValue(**data)


class SearchDateTimeRangeValueSchema(SearchQueryExpressionValueSchema):
    gte = marshmallow.fields.DateTime(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    gt = marshmallow.fields.DateTime(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    lte = marshmallow.fields.DateTime(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    lt = marshmallow.fields.DateTime(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchDateTimeRangeValue(**data)


class SearchExistsValueSchema(SearchQueryExpressionValueSchema):
    language = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchExistsValue(**data)


class SearchFullTextPrefixValueSchema(SearchQueryExpressionValueSchema):
    value = marshmallow.fields.Raw(allow_none=True, load_default=None)
    language = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    must_match = marshmallow_enum.EnumField(
        SearchMatchType,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="mustMatch",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchFullTextPrefixValue(**data)


class SearchFullTextValueSchema(SearchQueryExpressionValueSchema):
    value = marshmallow.fields.Raw(allow_none=True, load_default=None)
    language = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    must_match = marshmallow_enum.EnumField(
        SearchMatchType,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="mustMatch",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchFullTextValue(**data)


class SearchLongRangeValueSchema(SearchQueryExpressionValueSchema):
    gte = marshmallow.fields.Integer(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    gt = marshmallow.fields.Integer(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    lte = marshmallow.fields.Integer(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    lt = marshmallow.fields.Integer(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchLongRangeValue(**data)


class SearchNumberRangeValueSchema(SearchQueryExpressionValueSchema):
    gte = marshmallow.fields.Float(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    gt = marshmallow.fields.Float(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    lte = marshmallow.fields.Float(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    lt = marshmallow.fields.Float(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchNumberRangeValue(**data)


class SearchSortingSchema(helpers.BaseSchema):
    field = marshmallow.fields.String(allow_none=True, load_default=None)
    language = marshmallow.fields.String(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    order = marshmallow_enum.EnumField(
        SearchSortOrder, by_value=True, allow_none=True, load_default=None
    )
    mode = marshmallow_enum.EnumField(
        SearchSortMode,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
    )
    field_type = marshmallow_enum.EnumField(
        SearchFieldType,
        by_value=True,
        allow_none=True,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="fieldType",
    )
    filter = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchQueryExpressionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchSorting(**data)


class SearchTimeRangeExpressionSchema(SearchQueryExpressionSchema):
    range = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchTimeRangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchTimeRangeExpression(**data)


class SearchTimeRangeValueSchema(SearchQueryExpressionValueSchema):
    gte = marshmallow.fields.Time(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    gt = marshmallow.fields.Time(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    lte = marshmallow.fields.Time(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )
    lt = marshmallow.fields.Time(
        allow_none=True, metadata={"omit_empty": True}, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchTimeRangeValue(**data)


class SearchWildCardExpressionSchema(SearchQueryExpressionSchema):
    wildcard = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SearchAnyValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchWildCardExpression(**data)
