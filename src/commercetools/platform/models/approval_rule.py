# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType
from .common import BaseResource

if typing.TYPE_CHECKING:
    from .associate_role import (
        AssociateRoleKeyReference,
        AssociateRoleResourceIdentifier,
    )
    from .business_unit import BusinessUnitKeyReference
    from .common import CreatedBy, LastModifiedBy

__all__ = [
    "ApprovalRule",
    "ApprovalRuleDraft",
    "ApprovalRulePagedQueryResponse",
    "ApprovalRuleSetApproversAction",
    "ApprovalRuleSetDescriptionAction",
    "ApprovalRuleSetKeyAction",
    "ApprovalRuleSetNameAction",
    "ApprovalRuleSetPredicateAction",
    "ApprovalRuleSetRequestersAction",
    "ApprovalRuleSetStatusAction",
    "ApprovalRuleStatus",
    "ApprovalRuleUpdate",
    "ApprovalRuleUpdateAction",
    "ApproverConjunction",
    "ApproverConjunctionDraft",
    "ApproverDisjunction",
    "ApproverDisjunctionDraft",
    "ApproverHierarchy",
    "ApproverHierarchyDraft",
    "RuleApprover",
    "RuleApproverDraft",
    "RuleRequester",
    "RuleRequesterDraft",
]


class ApprovalRule(BaseResource):
    #: Present on resources created after 1 February 2019 except for [events not tracked](/general-concepts#events-tracked).
    created_by: typing.Optional["CreatedBy"]
    #: Present on resources created after 1 February 2019 except for [events not tracked](/general-concepts#events-tracked).
    last_modified_by: typing.Optional["LastModifiedBy"]
    #: User-defined unique identifier of the Approval Rule. Must be unique within a [Business Unit](ctp:api:type:BusinessUnit).
    key: typing.Optional[str]
    #: Name of the Approval Rule.
    name: str
    #: Description of the Approval Rule.
    description: typing.Optional[str]
    #: Indicates whether the Approval Rule should be matched against [Orders](ctp:api:type:Order) or not.
    status: "ApprovalRuleStatus"
    #: The [Order Predicate](/../api/projects/predicates#order-predicates) describing the [Orders](ctp:api:type:Order) the Approval Rule should match against.
    predicate: str
    #: The hierarchy of approvers within the Approval Rule.
    approvers: "ApproverHierarchy"
    #: The [Associate Roles](ctp:api:type:AssociateRole) customers must hold for their Order to require approval.
    requesters: typing.List["RuleRequester"]
    #: The [Business Unit](ctp:api:type:BusinessUnit) the Approval Rule belongs to.
    business_unit: "BusinessUnitKeyReference"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        created_by: typing.Optional["CreatedBy"] = None,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        key: typing.Optional[str] = None,
        name: str,
        description: typing.Optional[str] = None,
        status: "ApprovalRuleStatus",
        predicate: str,
        approvers: "ApproverHierarchy",
        requesters: typing.List["RuleRequester"],
        business_unit: "BusinessUnitKeyReference"
    ):
        self.created_by = created_by
        self.last_modified_by = last_modified_by
        self.key = key
        self.name = name
        self.description = description
        self.status = status
        self.predicate = predicate
        self.approvers = approvers
        self.requesters = requesters
        self.business_unit = business_unit

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ApprovalRule":
        from ._schemas.approval_rule import ApprovalRuleSchema

        return ApprovalRuleSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRuleSchema

        return ApprovalRuleSchema().dump(self)


class ApprovalRuleDraft(_BaseType):
    #: User-defined unique identifier of the Approval Rule. Uniqueness is enforced within the Business Unit.
    key: typing.Optional[str]
    #: Name of the Approval Rule.
    name: str
    #: Description of the Approval Rule.
    description: typing.Optional[str]
    #: Indicates whether the Approval Rule should be matched against [Orders](ctp:api:type:Order) or not.
    status: "ApprovalRuleStatus"
    #: The [predicate](/../api/predicates/predicate-operators) describing the [Orders](ctp:api:type:Order) the Approval Rule should match against.
    predicate: str
    #: The hierarchy of approvers within the Approval Rule.
    approvers: "ApproverHierarchyDraft"
    #: The [Associate Roles](ctp:api:type:AssociateRole) customers must hold for their Order to require approval.
    requesters: typing.List["RuleRequesterDraft"]

    def __init__(
        self,
        *,
        key: typing.Optional[str] = None,
        name: str,
        description: typing.Optional[str] = None,
        status: "ApprovalRuleStatus",
        predicate: str,
        approvers: "ApproverHierarchyDraft",
        requesters: typing.List["RuleRequesterDraft"]
    ):
        self.key = key
        self.name = name
        self.description = description
        self.status = status
        self.predicate = predicate
        self.approvers = approvers
        self.requesters = requesters

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ApprovalRuleDraft":
        from ._schemas.approval_rule import ApprovalRuleDraftSchema

        return ApprovalRuleDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRuleDraftSchema

        return ApprovalRuleDraftSchema().dump(self)


class ApprovalRulePagedQueryResponse(_BaseType):
    """[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [ApprovalRule](ctp:api:type:ApprovalRule)."""

    #: Number of [results requested](/../api/general-concepts#limit).
    limit: int
    #: Number of [elements skipped](/../api/general-concepts#offset).
    offset: int
    #: Actual number of results returned.
    count: int
    #: Total number of results matching the query.
    #: This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
    #: This field is returned by default.
    #: For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
    #: When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
    total: typing.Optional[int]
    #: Approval Rules matching the query.
    results: typing.List["ApprovalRule"]

    def __init__(
        self,
        *,
        limit: int,
        offset: int,
        count: int,
        total: typing.Optional[int] = None,
        results: typing.List["ApprovalRule"]
    ):
        self.limit = limit
        self.offset = offset
        self.count = count
        self.total = total
        self.results = results

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApprovalRulePagedQueryResponse":
        from ._schemas.approval_rule import ApprovalRulePagedQueryResponseSchema

        return ApprovalRulePagedQueryResponseSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRulePagedQueryResponseSchema

        return ApprovalRulePagedQueryResponseSchema().dump(self)


class ApprovalRuleStatus(enum.Enum):
    """Indicates whether the Approval Rule should be matched against [Orders](ctp:api:type:Order) or not."""

    ACTIVE = "Active"
    INACTIVE = "Inactive"


class ApprovalRuleUpdate(_BaseType):
    #: Expected version of the [ApprovalRule](ctp:api:type:ApprovalRule) to which the changes should be applied.
    #: If the expected version does not match the actual version, a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error will be returned.
    version: int
    #: Update actions to be performed on the [ApprovalRule](ctp:api:type:ApprovalRule).
    actions: typing.List["ApprovalRuleUpdateAction"]

    def __init__(
        self, *, version: int, actions: typing.List["ApprovalRuleUpdateAction"]
    ):
        self.version = version
        self.actions = actions

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ApprovalRuleUpdate":
        from ._schemas.approval_rule import ApprovalRuleUpdateSchema

        return ApprovalRuleUpdateSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRuleUpdateSchema

        return ApprovalRuleUpdateSchema().dump(self)


class ApprovalRuleUpdateAction(_BaseType):
    action: str

    def __init__(self, *, action: str):
        self.action = action

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApprovalRuleUpdateAction":
        if data["action"] == "setApprovers":
            from ._schemas.approval_rule import ApprovalRuleSetApproversActionSchema

            return ApprovalRuleSetApproversActionSchema().load(data)
        if data["action"] == "setDescription":
            from ._schemas.approval_rule import ApprovalRuleSetDescriptionActionSchema

            return ApprovalRuleSetDescriptionActionSchema().load(data)
        if data["action"] == "setKey":
            from ._schemas.approval_rule import ApprovalRuleSetKeyActionSchema

            return ApprovalRuleSetKeyActionSchema().load(data)
        if data["action"] == "setName":
            from ._schemas.approval_rule import ApprovalRuleSetNameActionSchema

            return ApprovalRuleSetNameActionSchema().load(data)
        if data["action"] == "setPredicate":
            from ._schemas.approval_rule import ApprovalRuleSetPredicateActionSchema

            return ApprovalRuleSetPredicateActionSchema().load(data)
        if data["action"] == "setRequesters":
            from ._schemas.approval_rule import ApprovalRuleSetRequestersActionSchema

            return ApprovalRuleSetRequestersActionSchema().load(data)
        if data["action"] == "setStatus":
            from ._schemas.approval_rule import ApprovalRuleSetStatusActionSchema

            return ApprovalRuleSetStatusActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRuleUpdateActionSchema

        return ApprovalRuleUpdateActionSchema().dump(self)


class ApprovalRuleSetApproversAction(ApprovalRuleUpdateAction):
    """Setting the approvers for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleApproversSet](ctp:api:type:ApprovalRuleApproversSetMessage) Message."""

    #: New approvers to set for the Approval Rule.
    approvers: "ApproverHierarchyDraft"

    def __init__(self, *, approvers: "ApproverHierarchyDraft"):
        self.approvers = approvers

        super().__init__(action="setApprovers")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApprovalRuleSetApproversAction":
        from ._schemas.approval_rule import ApprovalRuleSetApproversActionSchema

        return ApprovalRuleSetApproversActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRuleSetApproversActionSchema

        return ApprovalRuleSetApproversActionSchema().dump(self)


class ApprovalRuleSetDescriptionAction(ApprovalRuleUpdateAction):
    """Setting the description for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleDescriptionSet](ctp:api:type:ApprovalRuleDescriptionSetMessage) Message."""

    #: New description to set for the Approval Rule.
    description: typing.Optional[str]

    def __init__(self, *, description: typing.Optional[str] = None):
        self.description = description

        super().__init__(action="setDescription")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApprovalRuleSetDescriptionAction":
        from ._schemas.approval_rule import ApprovalRuleSetDescriptionActionSchema

        return ApprovalRuleSetDescriptionActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRuleSetDescriptionActionSchema

        return ApprovalRuleSetDescriptionActionSchema().dump(self)


class ApprovalRuleSetKeyAction(ApprovalRuleUpdateAction):
    """Setting the key for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleKeySet](ctp:api:type:ApprovalRuleKeySetMessage) Message."""

    #: Value to set. Must be unique within a Business Unit. If empty, any existing value will be removed.
    key: typing.Optional[str]

    def __init__(self, *, key: typing.Optional[str] = None):
        self.key = key

        super().__init__(action="setKey")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApprovalRuleSetKeyAction":
        from ._schemas.approval_rule import ApprovalRuleSetKeyActionSchema

        return ApprovalRuleSetKeyActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRuleSetKeyActionSchema

        return ApprovalRuleSetKeyActionSchema().dump(self)


class ApprovalRuleSetNameAction(ApprovalRuleUpdateAction):
    """Setting the name for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleNameSet](ctp:api:type:ApprovalRuleNameSetMessage) Message."""

    #: New name to set for the Approval Rule.
    name: str

    def __init__(self, *, name: str):
        self.name = name

        super().__init__(action="setName")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApprovalRuleSetNameAction":
        from ._schemas.approval_rule import ApprovalRuleSetNameActionSchema

        return ApprovalRuleSetNameActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRuleSetNameActionSchema

        return ApprovalRuleSetNameActionSchema().dump(self)


class ApprovalRuleSetPredicateAction(ApprovalRuleUpdateAction):
    """Setting the [Order Predicate](/../api/projects/predicates#order-predicates) for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRulePredicateSet](ctp:api:type:ApprovalRulePredicateSetMessage) Message."""

    #: A valid [Order Predicate](/../api/projects/predicates#order-predicates) to set for the Approval Rule.
    predicate: str

    def __init__(self, *, predicate: str):
        self.predicate = predicate

        super().__init__(action="setPredicate")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApprovalRuleSetPredicateAction":
        from ._schemas.approval_rule import ApprovalRuleSetPredicateActionSchema

        return ApprovalRuleSetPredicateActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRuleSetPredicateActionSchema

        return ApprovalRuleSetPredicateActionSchema().dump(self)


class ApprovalRuleSetRequestersAction(ApprovalRuleUpdateAction):
    """Sets the requesters for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleRequestersSet](ctp:api:type:ApprovalRuleRequestersSetMessage) Message."""

    #: New requesters to set for the Approval Rule.
    requesters: typing.List["RuleRequesterDraft"]

    def __init__(self, *, requesters: typing.List["RuleRequesterDraft"]):
        self.requesters = requesters

        super().__init__(action="setRequesters")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApprovalRuleSetRequestersAction":
        from ._schemas.approval_rule import ApprovalRuleSetRequestersActionSchema

        return ApprovalRuleSetRequestersActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRuleSetRequestersActionSchema

        return ApprovalRuleSetRequestersActionSchema().dump(self)


class ApprovalRuleSetStatusAction(ApprovalRuleUpdateAction):
    """Setting the status for an [Approval Rule](ctp:api:type:ApprovalRule) generates an [ApprovalRuleStatusSet](ctp:api:type:ApprovalRuleStatusSetMessage) Message."""

    #: New status to set for the Approval Rule.
    status: "ApprovalRuleStatus"

    def __init__(self, *, status: "ApprovalRuleStatus"):
        self.status = status

        super().__init__(action="setStatus")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApprovalRuleSetStatusAction":
        from ._schemas.approval_rule import ApprovalRuleSetStatusActionSchema

        return ApprovalRuleSetStatusActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApprovalRuleSetStatusActionSchema

        return ApprovalRuleSetStatusActionSchema().dump(self)


class ApproverConjunction(_BaseType):
    #: All of the nested disjunctions must be approved in order for the conjunction to be considered approved.
    and_: typing.List["ApproverDisjunction"]

    def __init__(self, *, and_: typing.List["ApproverDisjunction"]):
        self.and_ = and_

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ApproverConjunction":
        from ._schemas.approval_rule import ApproverConjunctionSchema

        return ApproverConjunctionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApproverConjunctionSchema

        return ApproverConjunctionSchema().dump(self)


class ApproverConjunctionDraft(_BaseType):
    #: All of the nested disjunctions must be approved in order for the conjunction to be considered approved.
    #: The total count of approvers across the nested disjunctions must not exceed 10.
    and_: typing.List["ApproverDisjunctionDraft"]

    def __init__(self, *, and_: typing.List["ApproverDisjunctionDraft"]):
        self.and_ = and_

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApproverConjunctionDraft":
        from ._schemas.approval_rule import ApproverConjunctionDraftSchema

        return ApproverConjunctionDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApproverConjunctionDraftSchema

        return ApproverConjunctionDraftSchema().dump(self)


class ApproverDisjunction(_BaseType):
    #: Any of the nested approvers must approve in order for the disjunction to be considered approved.
    or_: typing.List["RuleApprover"]

    def __init__(self, *, or_: typing.List["RuleApprover"]):
        self.or_ = or_

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ApproverDisjunction":
        from ._schemas.approval_rule import ApproverDisjunctionSchema

        return ApproverDisjunctionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApproverDisjunctionSchema

        return ApproverDisjunctionSchema().dump(self)


class ApproverDisjunctionDraft(_BaseType):
    #: Any of the nested approvers must approve in order for the disjunction to be considered approved.
    or_: typing.List["RuleApproverDraft"]

    def __init__(self, *, or_: typing.List["RuleApproverDraft"]):
        self.or_ = or_

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApproverDisjunctionDraft":
        from ._schemas.approval_rule import ApproverDisjunctionDraftSchema

        return ApproverDisjunctionDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApproverDisjunctionDraftSchema

        return ApproverDisjunctionDraftSchema().dump(self)


class ApproverHierarchy(_BaseType):
    """Describes the order in which [Associates](ctp:api:type:Associate) can approve the matched [Order](ctp:api:type:Order)."""

    #: All of the nested conjunctions must be approved in order for the hierarchy to be considered approved.
    tiers: typing.List["ApproverConjunction"]

    def __init__(self, *, tiers: typing.List["ApproverConjunction"]):
        self.tiers = tiers

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ApproverHierarchy":
        from ._schemas.approval_rule import ApproverHierarchySchema

        return ApproverHierarchySchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApproverHierarchySchema

        return ApproverHierarchySchema().dump(self)


class ApproverHierarchyDraft(_BaseType):
    """Describes the sequence in which [Associates](ctp:api:type:Associate) can approve an [Order](ctp:api:type:Order)."""

    #: Nested conjunctions representing tiers of approvers in a hierarchy.
    tiers: typing.List["ApproverConjunctionDraft"]

    def __init__(self, *, tiers: typing.List["ApproverConjunctionDraft"]):
        self.tiers = tiers

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApproverHierarchyDraft":
        from ._schemas.approval_rule import ApproverHierarchyDraftSchema

        return ApproverHierarchyDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import ApproverHierarchyDraftSchema

        return ApproverHierarchyDraftSchema().dump(self)


class RuleApprover(_BaseType):
    #: The Associate Role that is allowed to approve at a given stage in the approval process.
    associate_role: "AssociateRoleKeyReference"

    def __init__(self, *, associate_role: "AssociateRoleKeyReference"):
        self.associate_role = associate_role

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RuleApprover":
        from ._schemas.approval_rule import RuleApproverSchema

        return RuleApproverSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import RuleApproverSchema

        return RuleApproverSchema().dump(self)


class RuleApproverDraft(_BaseType):
    #: Any Associate with this Role can approve.
    associate_role: "AssociateRoleResourceIdentifier"

    def __init__(self, *, associate_role: "AssociateRoleResourceIdentifier"):
        self.associate_role = associate_role

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RuleApproverDraft":
        from ._schemas.approval_rule import RuleApproverDraftSchema

        return RuleApproverDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import RuleApproverDraftSchema

        return RuleApproverDraftSchema().dump(self)


class RuleRequester(_BaseType):
    #: The [Associate Role](ctp:api:type:AssociateRole) that an [Associate](ctp:api:type) must hold for the Approval Rule to apply to the Orders they create.
    associate_role: "AssociateRoleKeyReference"

    def __init__(self, *, associate_role: "AssociateRoleKeyReference"):
        self.associate_role = associate_role

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RuleRequester":
        from ._schemas.approval_rule import RuleRequesterSchema

        return RuleRequesterSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import RuleRequesterSchema

        return RuleRequesterSchema().dump(self)


class RuleRequesterDraft(_BaseType):
    #: The [Associate Role](ctp:api:type:AssociateRole) that an [Associate](ctp:api:type) must hold for the Approval Rule to apply to the Orders they create.
    associate_role: "AssociateRoleResourceIdentifier"

    def __init__(self, *, associate_role: "AssociateRoleResourceIdentifier"):
        self.associate_role = associate_role

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RuleRequesterDraft":
        from ._schemas.approval_rule import RuleRequesterDraftSchema

        return RuleRequesterDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.approval_rule import RuleRequesterDraftSchema

        return RuleRequesterDraftSchema().dump(self)
