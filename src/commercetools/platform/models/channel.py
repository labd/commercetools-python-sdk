# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType
from .common import BaseResource, Reference, ReferenceTypeId, ResourceIdentifier

if typing.TYPE_CHECKING:
    from .common import (
        Address,
        BaseAddress,
        CreatedBy,
        GeoJson,
        LastModifiedBy,
        LocalizedString,
        ReferenceTypeId,
    )
    from .review import ReviewRatingStatistics
    from .type import (
        CustomFields,
        CustomFieldsDraft,
        FieldContainer,
        TypeResourceIdentifier,
    )

__all__ = [
    "Channel",
    "ChannelAddRolesAction",
    "ChannelChangeDescriptionAction",
    "ChannelChangeKeyAction",
    "ChannelChangeNameAction",
    "ChannelDraft",
    "ChannelPagedQueryResponse",
    "ChannelReference",
    "ChannelRemoveRolesAction",
    "ChannelResourceIdentifier",
    "ChannelRoleEnum",
    "ChannelSetAddressAction",
    "ChannelSetAddressCustomFieldAction",
    "ChannelSetAddressCustomTypeAction",
    "ChannelSetCustomFieldAction",
    "ChannelSetCustomTypeAction",
    "ChannelSetGeoLocationAction",
    "ChannelSetRolesAction",
    "ChannelUpdate",
    "ChannelUpdateAction",
]


class Channel(BaseResource):
    #: Present on resources updated after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
    last_modified_by: typing.Optional["LastModifiedBy"]
    #: Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
    created_by: typing.Optional["CreatedBy"]
    #: User-defined unique identifier of the Channel.
    key: str
    #: Roles of the Channel.
    roles: typing.List["ChannelRoleEnum"]
    #: Name of the Channel.
    name: typing.Optional["LocalizedString"]
    #: Description of the Channel.
    description: typing.Optional["LocalizedString"]
    #: Address where the Channel is located (for example, if the Channel is a physical store).
    address: typing.Optional["Address"]
    #: Statistics about the review ratings taken into account for the Channel.
    review_rating_statistics: typing.Optional["ReviewRatingStatistics"]
    #: Custom Fields defined for the Channel.
    custom: typing.Optional["CustomFields"]
    #: GeoJSON geometry object encoding the geo location of the Channel.
    geo_location: typing.Optional["GeoJson"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        key: str,
        roles: typing.List["ChannelRoleEnum"],
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        address: typing.Optional["Address"] = None,
        review_rating_statistics: typing.Optional["ReviewRatingStatistics"] = None,
        custom: typing.Optional["CustomFields"] = None,
        geo_location: typing.Optional["GeoJson"] = None
    ):
        self.last_modified_by = last_modified_by
        self.created_by = created_by
        self.key = key
        self.roles = roles
        self.name = name
        self.description = description
        self.address = address
        self.review_rating_statistics = review_rating_statistics
        self.custom = custom
        self.geo_location = geo_location

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "Channel":
        from ._schemas.channel import ChannelSchema

        return ChannelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelSchema

        return ChannelSchema().dump(self)


class ChannelDraft(_BaseType):
    #: User-defined unique identifier for the Channel.
    key: str
    #: Roles of the Channel.
    #: Each channel must have at least one role.
    #: If not specified, then `InventorySupply` is assigned by default.
    roles: typing.Optional[typing.List["ChannelRoleEnum"]]
    #: Name of the Channel.
    name: typing.Optional["LocalizedString"]
    #: Description of the Channel.
    description: typing.Optional["LocalizedString"]
    #: Address where the Channel is located.
    address: typing.Optional["BaseAddress"]
    #: Custom fields defined for the Channel.
    custom: typing.Optional["CustomFieldsDraft"]
    #: GeoJSON geometry object encoding the geo location of the Channel.
    #: Currently, only the [Point](ctp:api:type:GeoJsonPoint) type is supported.
    geo_location: typing.Optional["GeoJson"]

    def __init__(
        self,
        *,
        key: str,
        roles: typing.Optional[typing.List["ChannelRoleEnum"]] = None,
        name: typing.Optional["LocalizedString"] = None,
        description: typing.Optional["LocalizedString"] = None,
        address: typing.Optional["BaseAddress"] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        geo_location: typing.Optional["GeoJson"] = None
    ):
        self.key = key
        self.roles = roles
        self.name = name
        self.description = description
        self.address = address
        self.custom = custom
        self.geo_location = geo_location

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChannelDraft":
        from ._schemas.channel import ChannelDraftSchema

        return ChannelDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelDraftSchema

        return ChannelDraftSchema().dump(self)


class ChannelPagedQueryResponse(_BaseType):
    """[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with results containing an array of [Channel](ctp:api:type:Channel)."""

    #: Number of [results requested](/../api/general-concepts#limit).
    limit: int
    #: Number of [elements skipped](/../api/general-concepts#offset).
    offset: int
    #: Actual number of results returned.
    count: int
    #: Total number of results matching the query.
    #: This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
    #: This field is returned by default.
    #: For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
    #: When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
    total: typing.Optional[int]
    #: [Channels](ctp:api:type:Channel) matching the query.
    results: typing.List["Channel"]

    def __init__(
        self,
        *,
        limit: int,
        offset: int,
        count: int,
        total: typing.Optional[int] = None,
        results: typing.List["Channel"]
    ):
        self.limit = limit
        self.offset = offset
        self.count = count
        self.total = total
        self.results = results

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelPagedQueryResponse":
        from ._schemas.channel import ChannelPagedQueryResponseSchema

        return ChannelPagedQueryResponseSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelPagedQueryResponseSchema

        return ChannelPagedQueryResponseSchema().dump(self)


class ChannelReference(Reference):
    """[Reference](ctp:api:type:Reference) to a [Channel](ctp:api:type:Channel)."""

    #: Contains the representation of the expanded Channel.
    #: Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for Channels.
    obj: typing.Optional["Channel"]

    def __init__(self, *, id: str, obj: typing.Optional["Channel"] = None):
        self.obj = obj

        super().__init__(id=id, type_id=ReferenceTypeId.CHANNEL)

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChannelReference":
        from ._schemas.channel import ChannelReferenceSchema

        return ChannelReferenceSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelReferenceSchema

        return ChannelReferenceSchema().dump(self)


class ChannelResourceIdentifier(ResourceIdentifier):
    """[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [Channel](ctp:api:type:Channel)."""

    def __init__(
        self, *, id: typing.Optional[str] = None, key: typing.Optional[str] = None
    ):
        super().__init__(id=id, key=key, type_id=ReferenceTypeId.CHANNEL)

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelResourceIdentifier":
        from ._schemas.channel import ChannelResourceIdentifierSchema

        return ChannelResourceIdentifierSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelResourceIdentifierSchema

        return ChannelResourceIdentifierSchema().dump(self)


class ChannelRoleEnum(enum.Enum):
    """Describes the purpose and type of the Channel. A Channel can have one or more roles."""

    INVENTORY_SUPPLY = "InventorySupply"
    PRODUCT_DISTRIBUTION = "ProductDistribution"
    ORDER_EXPORT = "OrderExport"
    ORDER_IMPORT = "OrderImport"
    PRIMARY = "Primary"


class ChannelUpdate(_BaseType):
    #: Expected version of the Channel on which the changes should be applied. If the expected version does not match the actual version, a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error is returned.
    version: int
    #: Update actions to be performed on the Channel.
    actions: typing.List["ChannelUpdateAction"]

    def __init__(self, *, version: int, actions: typing.List["ChannelUpdateAction"]):
        self.version = version
        self.actions = actions

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChannelUpdate":
        from ._schemas.channel import ChannelUpdateSchema

        return ChannelUpdateSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelUpdateSchema

        return ChannelUpdateSchema().dump(self)


class ChannelUpdateAction(_BaseType):
    action: str

    def __init__(self, *, action: str):
        self.action = action

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChannelUpdateAction":
        if data["action"] == "addRoles":
            from ._schemas.channel import ChannelAddRolesActionSchema

            return ChannelAddRolesActionSchema().load(data)
        if data["action"] == "changeDescription":
            from ._schemas.channel import ChannelChangeDescriptionActionSchema

            return ChannelChangeDescriptionActionSchema().load(data)
        if data["action"] == "changeKey":
            from ._schemas.channel import ChannelChangeKeyActionSchema

            return ChannelChangeKeyActionSchema().load(data)
        if data["action"] == "changeName":
            from ._schemas.channel import ChannelChangeNameActionSchema

            return ChannelChangeNameActionSchema().load(data)
        if data["action"] == "removeRoles":
            from ._schemas.channel import ChannelRemoveRolesActionSchema

            return ChannelRemoveRolesActionSchema().load(data)
        if data["action"] == "setAddress":
            from ._schemas.channel import ChannelSetAddressActionSchema

            return ChannelSetAddressActionSchema().load(data)
        if data["action"] == "setAddressCustomField":
            from ._schemas.channel import ChannelSetAddressCustomFieldActionSchema

            return ChannelSetAddressCustomFieldActionSchema().load(data)
        if data["action"] == "setAddressCustomType":
            from ._schemas.channel import ChannelSetAddressCustomTypeActionSchema

            return ChannelSetAddressCustomTypeActionSchema().load(data)
        if data["action"] == "setCustomField":
            from ._schemas.channel import ChannelSetCustomFieldActionSchema

            return ChannelSetCustomFieldActionSchema().load(data)
        if data["action"] == "setCustomType":
            from ._schemas.channel import ChannelSetCustomTypeActionSchema

            return ChannelSetCustomTypeActionSchema().load(data)
        if data["action"] == "setGeoLocation":
            from ._schemas.channel import ChannelSetGeoLocationActionSchema

            return ChannelSetGeoLocationActionSchema().load(data)
        if data["action"] == "setRoles":
            from ._schemas.channel import ChannelSetRolesActionSchema

            return ChannelSetRolesActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelUpdateActionSchema

        return ChannelUpdateActionSchema().dump(self)


class ChannelAddRolesAction(ChannelUpdateAction):
    #: Value to append to the array.
    roles: typing.List["ChannelRoleEnum"]

    def __init__(self, *, roles: typing.List["ChannelRoleEnum"]):
        self.roles = roles

        super().__init__(action="addRoles")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChannelAddRolesAction":
        from ._schemas.channel import ChannelAddRolesActionSchema

        return ChannelAddRolesActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelAddRolesActionSchema

        return ChannelAddRolesActionSchema().dump(self)


class ChannelChangeDescriptionAction(ChannelUpdateAction):
    #: New value to set. Must not be empty.
    description: "LocalizedString"

    def __init__(self, *, description: "LocalizedString"):
        self.description = description

        super().__init__(action="changeDescription")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelChangeDescriptionAction":
        from ._schemas.channel import ChannelChangeDescriptionActionSchema

        return ChannelChangeDescriptionActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelChangeDescriptionActionSchema

        return ChannelChangeDescriptionActionSchema().dump(self)


class ChannelChangeKeyAction(ChannelUpdateAction):
    #: New value to set. Must not be empty.
    key: str

    def __init__(self, *, key: str):
        self.key = key

        super().__init__(action="changeKey")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelChangeKeyAction":
        from ._schemas.channel import ChannelChangeKeyActionSchema

        return ChannelChangeKeyActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelChangeKeyActionSchema

        return ChannelChangeKeyActionSchema().dump(self)


class ChannelChangeNameAction(ChannelUpdateAction):
    #: New value to set. Must not be empty.
    name: "LocalizedString"

    def __init__(self, *, name: "LocalizedString"):
        self.name = name

        super().__init__(action="changeName")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelChangeNameAction":
        from ._schemas.channel import ChannelChangeNameActionSchema

        return ChannelChangeNameActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelChangeNameActionSchema

        return ChannelChangeNameActionSchema().dump(self)


class ChannelRemoveRolesAction(ChannelUpdateAction):
    #: Value to remove from the array.
    roles: typing.List["ChannelRoleEnum"]

    def __init__(self, *, roles: typing.List["ChannelRoleEnum"]):
        self.roles = roles

        super().__init__(action="removeRoles")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelRemoveRolesAction":
        from ._schemas.channel import ChannelRemoveRolesActionSchema

        return ChannelRemoveRolesActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelRemoveRolesActionSchema

        return ChannelRemoveRolesActionSchema().dump(self)


class ChannelSetAddressAction(ChannelUpdateAction):
    #: Value to set. If empty, any existing value will be removed.
    address: typing.Optional["BaseAddress"]

    def __init__(self, *, address: typing.Optional["BaseAddress"] = None):
        self.address = address

        super().__init__(action="setAddress")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelSetAddressAction":
        from ._schemas.channel import ChannelSetAddressActionSchema

        return ChannelSetAddressActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelSetAddressActionSchema

        return ChannelSetAddressActionSchema().dump(self)


class ChannelSetAddressCustomFieldAction(ChannelUpdateAction):
    #: Name of the [Custom Field](/../api/projects/custom-fields).
    name: str
    #: Specifies the format of the value of the Custom Field defined by `name`.
    #: If `value` is absent or `null`, this field will be removed, if it exists.
    #: Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
    value: typing.Optional[typing.Any]

    def __init__(self, *, name: str, value: typing.Optional[typing.Any] = None):
        self.name = name
        self.value = value

        super().__init__(action="setAddressCustomField")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelSetAddressCustomFieldAction":
        from ._schemas.channel import ChannelSetAddressCustomFieldActionSchema

        return ChannelSetAddressCustomFieldActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelSetAddressCustomFieldActionSchema

        return ChannelSetAddressCustomFieldActionSchema().dump(self)


class ChannelSetAddressCustomTypeAction(ChannelUpdateAction):
    #: Defines the [Type](ctp:api:type:Type) that extends the `address` with [Custom Fields](/../api/projects/custom-fields).
    #: If absent, any existing Type and Custom Fields are removed from the `address`.
    type: typing.Optional["TypeResourceIdentifier"]
    #: Sets the [Custom Fields](/../api/projects/custom-fields) fields for the `address`.
    fields: typing.Optional["FieldContainer"]

    def __init__(
        self,
        *,
        type: typing.Optional["TypeResourceIdentifier"] = None,
        fields: typing.Optional["FieldContainer"] = None
    ):
        self.type = type
        self.fields = fields

        super().__init__(action="setAddressCustomType")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelSetAddressCustomTypeAction":
        from ._schemas.channel import ChannelSetAddressCustomTypeActionSchema

        return ChannelSetAddressCustomTypeActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelSetAddressCustomTypeActionSchema

        return ChannelSetAddressCustomTypeActionSchema().dump(self)


class ChannelSetCustomFieldAction(ChannelUpdateAction):
    #: Name of the [Custom Field](/../api/projects/custom-fields).
    name: str
    #: If `value` is absent or `null`, this field will be removed if it exists.
    #: Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
    #: If `value` is provided, it is set for the field defined by `name`.
    value: typing.Optional[typing.Any]

    def __init__(self, *, name: str, value: typing.Optional[typing.Any] = None):
        self.name = name
        self.value = value

        super().__init__(action="setCustomField")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelSetCustomFieldAction":
        from ._schemas.channel import ChannelSetCustomFieldActionSchema

        return ChannelSetCustomFieldActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelSetCustomFieldActionSchema

        return ChannelSetCustomFieldActionSchema().dump(self)


class ChannelSetCustomTypeAction(ChannelUpdateAction):
    #: Defines the [Type](ctp:api:type:Type) that extends the Channel with [Custom Fields](/../api/projects/custom-fields).
    #: If absent, any existing Type and Custom Fields are removed from the Channel.
    type: typing.Optional["TypeResourceIdentifier"]
    #: Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Channel.
    fields: typing.Optional["FieldContainer"]

    def __init__(
        self,
        *,
        type: typing.Optional["TypeResourceIdentifier"] = None,
        fields: typing.Optional["FieldContainer"] = None
    ):
        self.type = type
        self.fields = fields

        super().__init__(action="setCustomType")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelSetCustomTypeAction":
        from ._schemas.channel import ChannelSetCustomTypeActionSchema

        return ChannelSetCustomTypeActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelSetCustomTypeActionSchema

        return ChannelSetCustomTypeActionSchema().dump(self)


class ChannelSetGeoLocationAction(ChannelUpdateAction):
    #: Value to set.
    geo_location: typing.Optional["GeoJson"]

    def __init__(self, *, geo_location: typing.Optional["GeoJson"] = None):
        self.geo_location = geo_location

        super().__init__(action="setGeoLocation")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChannelSetGeoLocationAction":
        from ._schemas.channel import ChannelSetGeoLocationActionSchema

        return ChannelSetGeoLocationActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelSetGeoLocationActionSchema

        return ChannelSetGeoLocationActionSchema().dump(self)


class ChannelSetRolesAction(ChannelUpdateAction):
    #: Value to set. If not specified, then `InventorySupply` is assigned by default.
    roles: typing.List["ChannelRoleEnum"]

    def __init__(self, *, roles: typing.List["ChannelRoleEnum"]):
        self.roles = roles

        super().__init__(action="setRoles")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChannelSetRolesAction":
        from ._schemas.channel import ChannelSetRolesActionSchema

        return ChannelSetRolesActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.channel import ChannelSetRolesActionSchema

        return ChannelSetRolesActionSchema().dump(self)
