# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType
from .associate_role import Permission
from .business_unit import (
    BusinessUnitAssociateMode,
    BusinessUnitStatus,
    BusinessUnitStoreMode,
)
from .cart import DiscountCodeState, ProductPublishScope
from .common import BaseResource
from .order import OrderState, PaymentState, ReturnShipmentState, ShipmentState
from .payment import TransactionState
from .product import ProductPriceModeEnum
from .quote import QuoteState
from .quote_request import QuoteRequestState
from .staged_quote import StagedQuoteState

if typing.TYPE_CHECKING:
    from .associate_role import AssociateRole, Permission
    from .business_unit import (
        Associate,
        BusinessUnit,
        BusinessUnitAssociateMode,
        BusinessUnitKeyReference,
        BusinessUnitStatus,
        BusinessUnitStoreMode,
    )
    from .cart import (
        CustomLineItem,
        DiscountCodeState,
        DiscountedLineItemPriceForQuantity,
        ItemShippingDetails,
        LineItem,
        MethodTaxedPrice,
        ProductPublishScope,
        ShippingInfo,
        ShippingRateInput,
        TaxedItemPrice,
    )
    from .category import Category, CategoryReference
    from .channel import ChannelReference
    from .common import (
        Address,
        CentPrecisionMoney,
        CreatedBy,
        DiscountedPrice,
        Image,
        LastModifiedBy,
        LocalizedString,
        Money,
        Price,
        PriceTier,
        Reference,
    )
    from .customer import Customer, CustomerReference
    from .customer_group import CustomerGroupReference
    from .discount_code import DiscountCodeReference
    from .inventory import InventoryEntry
    from .order import (
        Delivery,
        DeliveryItem,
        ItemState,
        Order,
        OrderState,
        Parcel,
        ParcelMeasurements,
        PaymentState,
        ReturnInfo,
        ReturnShipmentState,
        ShipmentState,
        TrackingData,
    )
    from .order_edit import OrderEdit, OrderEditApplied
    from .payment import Payment, PaymentReference, Transaction, TransactionState
    from .product import (
        ProductPriceModeEnum,
        ProductProjection,
        ProductReference,
        ProductVariant,
    )
    from .product_selection import (
        ProductSelection,
        ProductVariantExclusion,
        ProductVariantSelection,
    )
    from .quote import Quote, QuoteState
    from .quote_request import QuoteRequest, QuoteRequestState
    from .review import Review
    from .staged_quote import StagedQuote, StagedQuoteState
    from .standalone_price import StagedStandalonePrice, StandalonePrice
    from .state import StateReference
    from .store import ProductSelectionSetting, StoreKeyReference
    from .store_country import StoreCountry
    from .type import CustomFields

__all__ = [
    "AssociateRoleBuyerAssignableChangedMessage",
    "AssociateRoleBuyerAssignableChangedMessagePayload",
    "AssociateRoleCreatedMessage",
    "AssociateRoleCreatedMessagePayload",
    "AssociateRoleDeletedMessage",
    "AssociateRoleDeletedMessagePayload",
    "AssociateRoleNameChangedMessage",
    "AssociateRoleNameChangedMessagePayload",
    "AssociateRolePermissionAddedMessage",
    "AssociateRolePermissionAddedMessagePayload",
    "AssociateRolePermissionRemovedMessage",
    "AssociateRolePermissionRemovedMessagePayload",
    "AssociateRolePermissionsSetMessage",
    "AssociateRolePermissionsSetMessagePayload",
    "BusinessUnitAddressAddedMessage",
    "BusinessUnitAddressAddedMessagePayload",
    "BusinessUnitAddressChangedMessage",
    "BusinessUnitAddressChangedMessagePayload",
    "BusinessUnitAddressRemovedMessage",
    "BusinessUnitAddressRemovedMessagePayload",
    "BusinessUnitAssociateAddedMessage",
    "BusinessUnitAssociateAddedMessagePayload",
    "BusinessUnitAssociateChangedMessage",
    "BusinessUnitAssociateChangedMessagePayload",
    "BusinessUnitAssociateModeChangedMessage",
    "BusinessUnitAssociateModeChangedMessagePayload",
    "BusinessUnitAssociateRemovedMessage",
    "BusinessUnitAssociateRemovedMessagePayload",
    "BusinessUnitAssociatesSetMessage",
    "BusinessUnitAssociatesSetMessagePayload",
    "BusinessUnitBillingAddressAddedMessage",
    "BusinessUnitBillingAddressAddedMessagePayload",
    "BusinessUnitBillingAddressRemovedMessage",
    "BusinessUnitBillingAddressRemovedMessagePayload",
    "BusinessUnitContactEmailSetMessage",
    "BusinessUnitContactEmailSetMessagePayload",
    "BusinessUnitCreatedMessage",
    "BusinessUnitCreatedMessagePayload",
    "BusinessUnitDefaultBillingAddressSetMessage",
    "BusinessUnitDefaultBillingAddressSetMessagePayload",
    "BusinessUnitDefaultShippingAddressSetMessage",
    "BusinessUnitDefaultShippingAddressSetMessagePayload",
    "BusinessUnitDeletedMessage",
    "BusinessUnitDeletedMessagePayload",
    "BusinessUnitNameChangedMessage",
    "BusinessUnitNameChangedMessagePayload",
    "BusinessUnitParentUnitChangedMessage",
    "BusinessUnitParentUnitChangedMessagePayload",
    "BusinessUnitShippingAddressAddedMessage",
    "BusinessUnitShippingAddressAddedMessagePayload",
    "BusinessUnitShippingAddressRemovedMessage",
    "BusinessUnitShippingAddressRemovedMessagePayload",
    "BusinessUnitStatusChangedMessage",
    "BusinessUnitStatusChangedMessagePayload",
    "BusinessUnitStoreAddedMessage",
    "BusinessUnitStoreAddedMessagePayload",
    "BusinessUnitStoreModeChangedMessage",
    "BusinessUnitStoreModeChangedMessagePayload",
    "BusinessUnitStoreRemovedMessage",
    "BusinessUnitStoreRemovedMessagePayload",
    "BusinessUnitStoresSetMessage",
    "BusinessUnitStoresSetMessagePayload",
    "CategoryCreatedMessage",
    "CategoryCreatedMessagePayload",
    "CategorySlugChangedMessage",
    "CategorySlugChangedMessagePayload",
    "ContainerAndKey",
    "CustomLineItemStateTransitionMessage",
    "CustomLineItemStateTransitionMessagePayload",
    "CustomerAddressAddedMessage",
    "CustomerAddressAddedMessagePayload",
    "CustomerAddressChangedMessage",
    "CustomerAddressChangedMessagePayload",
    "CustomerAddressRemovedMessage",
    "CustomerAddressRemovedMessagePayload",
    "CustomerCompanyNameSetMessage",
    "CustomerCompanyNameSetMessagePayload",
    "CustomerCreatedMessage",
    "CustomerCreatedMessagePayload",
    "CustomerDateOfBirthSetMessage",
    "CustomerDateOfBirthSetMessagePayload",
    "CustomerDeletedMessage",
    "CustomerDeletedMessagePayload",
    "CustomerEmailChangedMessage",
    "CustomerEmailChangedMessagePayload",
    "CustomerEmailVerifiedMessage",
    "CustomerEmailVerifiedMessagePayload",
    "CustomerFirstNameSetMessage",
    "CustomerFirstNameSetMessagePayload",
    "CustomerGroupSetMessage",
    "CustomerGroupSetMessagePayload",
    "CustomerLastNameSetMessage",
    "CustomerLastNameSetMessagePayload",
    "CustomerPasswordUpdatedMessage",
    "CustomerPasswordUpdatedMessagePayload",
    "CustomerTitleSetMessage",
    "CustomerTitleSetMessagePayload",
    "DeliveryAddedMessage",
    "DeliveryAddedMessagePayload",
    "DeliveryAddressSetMessage",
    "DeliveryAddressSetMessagePayload",
    "DeliveryItemsUpdatedMessage",
    "DeliveryItemsUpdatedMessagePayload",
    "DeliveryRemovedMessage",
    "DeliveryRemovedMessagePayload",
    "InventoryEntryCreatedMessage",
    "InventoryEntryCreatedMessagePayload",
    "InventoryEntryDeletedMessage",
    "InventoryEntryDeletedMessagePayload",
    "InventoryEntryQuantitySetMessage",
    "InventoryEntryQuantitySetMessagePayload",
    "LineItemStateTransitionMessage",
    "LineItemStateTransitionMessagePayload",
    "Message",
    "MessagePagedQueryResponse",
    "MessagePayload",
    "MessagesConfiguration",
    "MessagesConfigurationDraft",
    "OrderBillingAddressSetMessage",
    "OrderBillingAddressSetMessagePayload",
    "OrderCreatedMessage",
    "OrderCreatedMessagePayload",
    "OrderCustomLineItemAddedMessage",
    "OrderCustomLineItemAddedMessagePayload",
    "OrderCustomLineItemDiscountSetMessage",
    "OrderCustomLineItemDiscountSetMessagePayload",
    "OrderCustomLineItemQuantityChangedMessage",
    "OrderCustomLineItemQuantityChangedMessagePayload",
    "OrderCustomLineItemRemovedMessage",
    "OrderCustomLineItemRemovedMessagePayload",
    "OrderCustomerEmailSetMessage",
    "OrderCustomerEmailSetMessagePayload",
    "OrderCustomerGroupSetMessage",
    "OrderCustomerGroupSetMessagePayload",
    "OrderCustomerSetMessage",
    "OrderCustomerSetMessagePayload",
    "OrderDeletedMessage",
    "OrderDeletedMessagePayload",
    "OrderDiscountCodeAddedMessage",
    "OrderDiscountCodeAddedMessagePayload",
    "OrderDiscountCodeRemovedMessage",
    "OrderDiscountCodeRemovedMessagePayload",
    "OrderDiscountCodeStateSetMessage",
    "OrderDiscountCodeStateSetMessagePayload",
    "OrderEditAppliedMessage",
    "OrderEditAppliedMessagePayload",
    "OrderImportedMessage",
    "OrderImportedMessagePayload",
    "OrderLineItemAddedMessage",
    "OrderLineItemAddedMessagePayload",
    "OrderLineItemDiscountSetMessage",
    "OrderLineItemDiscountSetMessagePayload",
    "OrderLineItemDistributionChannelSetMessage",
    "OrderLineItemDistributionChannelSetMessagePayload",
    "OrderLineItemRemovedMessage",
    "OrderLineItemRemovedMessagePayload",
    "OrderMessage",
    "OrderMessagePayload",
    "OrderPaymentAddedMessage",
    "OrderPaymentAddedMessagePayload",
    "OrderPaymentStateChangedMessage",
    "OrderPaymentStateChangedMessagePayload",
    "OrderPurchaseOrderNumberSetMessage",
    "OrderPurchaseOrderNumberSetMessagePayload",
    "OrderReturnShipmentStateChangedMessage",
    "OrderReturnShipmentStateChangedMessagePayload",
    "OrderShipmentStateChangedMessage",
    "OrderShipmentStateChangedMessagePayload",
    "OrderShippingAddressSetMessage",
    "OrderShippingAddressSetMessagePayload",
    "OrderShippingInfoSetMessage",
    "OrderShippingInfoSetMessagePayload",
    "OrderShippingRateInputSetMessage",
    "OrderShippingRateInputSetMessagePayload",
    "OrderStateChangedMessage",
    "OrderStateChangedMessagePayload",
    "OrderStateTransitionMessage",
    "OrderStateTransitionMessagePayload",
    "OrderStoreSetMessage",
    "OrderStoreSetMessagePayload",
    "ParcelAddedToDeliveryMessage",
    "ParcelAddedToDeliveryMessagePayload",
    "ParcelItemsUpdatedMessage",
    "ParcelItemsUpdatedMessagePayload",
    "ParcelMeasurementsUpdatedMessage",
    "ParcelMeasurementsUpdatedMessagePayload",
    "ParcelRemovedFromDeliveryMessage",
    "ParcelRemovedFromDeliveryMessagePayload",
    "ParcelTrackingDataUpdatedMessage",
    "ParcelTrackingDataUpdatedMessagePayload",
    "PaymentCreatedMessage",
    "PaymentCreatedMessagePayload",
    "PaymentInteractionAddedMessage",
    "PaymentInteractionAddedMessagePayload",
    "PaymentStatusInterfaceCodeSetMessage",
    "PaymentStatusInterfaceCodeSetMessagePayload",
    "PaymentStatusStateTransitionMessage",
    "PaymentStatusStateTransitionMessagePayload",
    "PaymentTransactionAddedMessage",
    "PaymentTransactionAddedMessagePayload",
    "PaymentTransactionStateChangedMessage",
    "PaymentTransactionStateChangedMessagePayload",
    "ProductAddedToCategoryMessage",
    "ProductAddedToCategoryMessagePayload",
    "ProductCreatedMessage",
    "ProductCreatedMessagePayload",
    "ProductDeletedMessage",
    "ProductDeletedMessagePayload",
    "ProductImageAddedMessage",
    "ProductImageAddedMessagePayload",
    "ProductPriceAddedMessage",
    "ProductPriceAddedMessagePayload",
    "ProductPriceChangedMessage",
    "ProductPriceChangedMessagePayload",
    "ProductPriceDiscountsSetMessage",
    "ProductPriceDiscountsSetMessagePayload",
    "ProductPriceDiscountsSetUpdatedPrice",
    "ProductPriceExternalDiscountSetMessage",
    "ProductPriceExternalDiscountSetMessagePayload",
    "ProductPriceKeySetMessage",
    "ProductPriceKeySetMessagePayload",
    "ProductPriceModeSetMessage",
    "ProductPriceModeSetMessagePayload",
    "ProductPriceRemovedMessage",
    "ProductPriceRemovedMessagePayload",
    "ProductPricesSetMessage",
    "ProductPricesSetMessagePayload",
    "ProductPublishedMessage",
    "ProductPublishedMessagePayload",
    "ProductRemovedFromCategoryMessage",
    "ProductRemovedFromCategoryMessagePayload",
    "ProductRevertedStagedChangesMessage",
    "ProductRevertedStagedChangesMessagePayload",
    "ProductSelectionCreatedMessage",
    "ProductSelectionCreatedMessagePayload",
    "ProductSelectionDeletedMessage",
    "ProductSelectionDeletedMessagePayload",
    "ProductSelectionProductAddedMessage",
    "ProductSelectionProductAddedMessagePayload",
    "ProductSelectionProductExcludedMessage",
    "ProductSelectionProductExcludedMessagePayload",
    "ProductSelectionProductRemovedMessage",
    "ProductSelectionProductRemovedMessagePayload",
    "ProductSelectionVariantExclusionChangedMessage",
    "ProductSelectionVariantExclusionChangedMessagePayload",
    "ProductSelectionVariantSelectionChangedMessage",
    "ProductSelectionVariantSelectionChangedMessagePayload",
    "ProductSlugChangedMessage",
    "ProductSlugChangedMessagePayload",
    "ProductStateTransitionMessage",
    "ProductStateTransitionMessagePayload",
    "ProductUnpublishedMessage",
    "ProductUnpublishedMessagePayload",
    "ProductVariantAddedMessage",
    "ProductVariantAddedMessagePayload",
    "ProductVariantDeletedMessage",
    "ProductVariantDeletedMessagePayload",
    "QuoteCreatedMessage",
    "QuoteCreatedMessagePayload",
    "QuoteCustomerChangedMessage",
    "QuoteCustomerChangedMessagePayload",
    "QuoteDeletedMessage",
    "QuoteDeletedMessagePayload",
    "QuoteRequestCreatedMessage",
    "QuoteRequestCreatedMessagePayload",
    "QuoteRequestCustomerChangedMessage",
    "QuoteRequestCustomerChangedMessagePayload",
    "QuoteRequestDeletedMessage",
    "QuoteRequestDeletedMessagePayload",
    "QuoteRequestStateChangedMessage",
    "QuoteRequestStateChangedMessagePayload",
    "QuoteRequestStateTransitionMessage",
    "QuoteRequestStateTransitionMessagePayload",
    "QuoteStateChangedMessage",
    "QuoteStateChangedMessagePayload",
    "QuoteStateTransitionMessage",
    "QuoteStateTransitionMessagePayload",
    "ReturnInfoAddedMessage",
    "ReturnInfoAddedMessagePayload",
    "ReturnInfoSetMessage",
    "ReturnInfoSetMessagePayload",
    "ReviewCreatedMessage",
    "ReviewCreatedMessagePayload",
    "ReviewRatingSetMessage",
    "ReviewRatingSetMessagePayload",
    "ReviewStateTransitionMessage",
    "ReviewStateTransitionMessagePayload",
    "ShoppingListStoreSetMessagePayload",
    "StagedQuoteCreatedMessage",
    "StagedQuoteCreatedMessagePayload",
    "StagedQuoteDeletedMessage",
    "StagedQuoteDeletedMessagePayload",
    "StagedQuoteSellerCommentSetMessage",
    "StagedQuoteSellerCommentSetMessagePayload",
    "StagedQuoteStateChangedMessage",
    "StagedQuoteStateChangedMessagePayload",
    "StagedQuoteStateTransitionMessage",
    "StagedQuoteStateTransitionMessagePayload",
    "StagedQuoteValidToSetMessage",
    "StagedQuoteValidToSetMessagePayload",
    "StandalonePriceActiveChangedMessage",
    "StandalonePriceActiveChangedMessagePayload",
    "StandalonePriceCreatedMessage",
    "StandalonePriceCreatedMessagePayload",
    "StandalonePriceDeletedMessage",
    "StandalonePriceDeletedMessagePayload",
    "StandalonePriceDiscountSetMessage",
    "StandalonePriceDiscountSetMessagePayload",
    "StandalonePriceExternalDiscountSetMessage",
    "StandalonePriceExternalDiscountSetMessagePayload",
    "StandalonePriceKeySetMessage",
    "StandalonePriceKeySetMessagePayload",
    "StandalonePriceStagedChangesAppliedMessage",
    "StandalonePriceStagedChangesAppliedMessagePayload",
    "StandalonePriceTierAddedMessage",
    "StandalonePriceTierAddedMessagePayload",
    "StandalonePriceTierRemovedMessage",
    "StandalonePriceTierRemovedMessagePayload",
    "StandalonePriceTiersSetMessage",
    "StandalonePriceTiersSetMessagePayload",
    "StandalonePriceValidFromAndUntilSetMessage",
    "StandalonePriceValidFromAndUntilSetMessagePayload",
    "StandalonePriceValidFromSetMessage",
    "StandalonePriceValidFromSetMessagePayload",
    "StandalonePriceValidUntilSetMessage",
    "StandalonePriceValidUntilSetMessagePayload",
    "StandalonePriceValueChangedMessage",
    "StandalonePriceValueChangedMessagePayload",
    "StoreCountriesChangedMessage",
    "StoreCountriesChangedMessagePayload",
    "StoreCreatedMessage",
    "StoreCreatedMessagePayload",
    "StoreDeletedMessage",
    "StoreDeletedMessagePayload",
    "StoreDistributionChannelsChangedMessage",
    "StoreDistributionChannelsChangedMessagePayload",
    "StoreLanguagesChangedMessage",
    "StoreLanguagesChangedMessagePayload",
    "StoreNameSetMessage",
    "StoreNameSetMessagePayload",
    "StoreProductSelectionsChangedMessage",
    "StoreProductSelectionsChangedMessagePayload",
    "StoreSupplyChannelsChangedMessage",
    "StoreSupplyChannelsChangedMessagePayload",
    "UserProvidedIdentifiers",
]


class ContainerAndKey(_BaseType):
    """`ContainerAndKey` is specific to [Custom Objects](ctp:api:type:CustomObject). Custom Objects are grouped into containers, which can be used like namespaces. Within a given container, a user-defined key can be used to uniquely identify resources."""

    #: User-defined identifier that is unique within the given container.
    key: str
    #: Namespace to group [Custom Objects](ctp:api:type:CustomObject).
    container: str

    def __init__(self, *, key: str, container: str):
        self.key = key
        self.container = container

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ContainerAndKey":
        from ._schemas.message import ContainerAndKeySchema

        return ContainerAndKeySchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ContainerAndKeySchema

        return ContainerAndKeySchema().dump(self)


class Message(BaseResource):
    """Base representation of a Message containing common fields to all [Message Types](/../api/projects/messages#message-types)."""

    #: Value of `createdBy`.
    last_modified_by: typing.Optional["LastModifiedBy"]
    #: Present on resources created after 1 February 2019 except for [events not tracked](/client-logging#events-tracked).
    created_by: typing.Optional["CreatedBy"]
    #: Message number in relation to other Messages for a given resource. The `sequenceNumber` of the next Message for the resource is the successor of the `sequenceNumber` of the current Message. Meaning, the `sequenceNumber` of the next Message equals the `sequenceNumber` of the current Message + 1.
    #: `sequenceNumber` can be used to ensure that Messages are processed in the correct order for a particular resource.
    sequence_number: int
    #: [Reference](ctp:api:type:Reference) to the resource on which the change or action was performed.
    resource: "Reference"
    #: Version of the resource on which the change or action was performed.
    resource_version: int
    #: [Message Type](/../api/projects/messages#message-types) of the Message.
    type: str
    #: User-provided identifiers of the resource, such as `key` or `externalId`. Only present if the resource has such identifiers.
    resource_user_provided_identifiers: typing.Optional["UserProvidedIdentifiers"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        type: str,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        self.last_modified_by = last_modified_by
        self.created_by = created_by
        self.sequence_number = sequence_number
        self.resource = resource
        self.resource_version = resource_version
        self.type = type
        self.resource_user_provided_identifiers = resource_user_provided_identifiers

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "Message":
        if data["type"] == "AssociateRoleBuyerAssignableChanged":
            from ._schemas.message import (
                AssociateRoleBuyerAssignableChangedMessageSchema,
            )

            return AssociateRoleBuyerAssignableChangedMessageSchema().load(data)
        if data["type"] == "AssociateRoleCreated":
            from ._schemas.message import AssociateRoleCreatedMessageSchema

            return AssociateRoleCreatedMessageSchema().load(data)
        if data["type"] == "AssociateRoleDeleted":
            from ._schemas.message import AssociateRoleDeletedMessageSchema

            return AssociateRoleDeletedMessageSchema().load(data)
        if data["type"] == "AssociateRoleNameSet":
            from ._schemas.message import AssociateRoleNameChangedMessageSchema

            return AssociateRoleNameChangedMessageSchema().load(data)
        if data["type"] == "AssociateRolePermissionAdded":
            from ._schemas.message import AssociateRolePermissionAddedMessageSchema

            return AssociateRolePermissionAddedMessageSchema().load(data)
        if data["type"] == "AssociateRolePermissionRemoved":
            from ._schemas.message import AssociateRolePermissionRemovedMessageSchema

            return AssociateRolePermissionRemovedMessageSchema().load(data)
        if data["type"] == "AssociateRolePermissionsSet":
            from ._schemas.message import AssociateRolePermissionsSetMessageSchema

            return AssociateRolePermissionsSetMessageSchema().load(data)
        if data["type"] == "BusinessUnitAddressAdded":
            from ._schemas.message import BusinessUnitAddressAddedMessageSchema

            return BusinessUnitAddressAddedMessageSchema().load(data)
        if data["type"] == "BusinessUnitAddressChanged":
            from ._schemas.message import BusinessUnitAddressChangedMessageSchema

            return BusinessUnitAddressChangedMessageSchema().load(data)
        if data["type"] == "BusinessUnitAddressRemoved":
            from ._schemas.message import BusinessUnitAddressRemovedMessageSchema

            return BusinessUnitAddressRemovedMessageSchema().load(data)
        if data["type"] == "BusinessUnitAssociateAdded":
            from ._schemas.message import BusinessUnitAssociateAddedMessageSchema

            return BusinessUnitAssociateAddedMessageSchema().load(data)
        if data["type"] == "BusinessUnitAssociateChanged":
            from ._schemas.message import BusinessUnitAssociateChangedMessageSchema

            return BusinessUnitAssociateChangedMessageSchema().load(data)
        if data["type"] == "BusinessUnitAssociateModeChanged":
            from ._schemas.message import BusinessUnitAssociateModeChangedMessageSchema

            return BusinessUnitAssociateModeChangedMessageSchema().load(data)
        if data["type"] == "BusinessUnitAssociateRemoved":
            from ._schemas.message import BusinessUnitAssociateRemovedMessageSchema

            return BusinessUnitAssociateRemovedMessageSchema().load(data)
        if data["type"] == "BusinessUnitAssociatesSet":
            from ._schemas.message import BusinessUnitAssociatesSetMessageSchema

            return BusinessUnitAssociatesSetMessageSchema().load(data)
        if data["type"] == "BusinessUnitBillingAddressAdded":
            from ._schemas.message import BusinessUnitBillingAddressAddedMessageSchema

            return BusinessUnitBillingAddressAddedMessageSchema().load(data)
        if data["type"] == "BusinessUnitBillingAddressRemoved":
            from ._schemas.message import BusinessUnitBillingAddressRemovedMessageSchema

            return BusinessUnitBillingAddressRemovedMessageSchema().load(data)
        if data["type"] == "BusinessUnitContactEmailSet":
            from ._schemas.message import BusinessUnitContactEmailSetMessageSchema

            return BusinessUnitContactEmailSetMessageSchema().load(data)
        if data["type"] == "BusinessUnitCreated":
            from ._schemas.message import BusinessUnitCreatedMessageSchema

            return BusinessUnitCreatedMessageSchema().load(data)
        if data["type"] == "BusinessUnitDefaultBillingAddressSet":
            from ._schemas.message import (
                BusinessUnitDefaultBillingAddressSetMessageSchema,
            )

            return BusinessUnitDefaultBillingAddressSetMessageSchema().load(data)
        if data["type"] == "BusinessUnitDefaultShippingAddressSet":
            from ._schemas.message import (
                BusinessUnitDefaultShippingAddressSetMessageSchema,
            )

            return BusinessUnitDefaultShippingAddressSetMessageSchema().load(data)
        if data["type"] == "BusinessUnitDeleted":
            from ._schemas.message import BusinessUnitDeletedMessageSchema

            return BusinessUnitDeletedMessageSchema().load(data)
        if data["type"] == "BusinessUnitNameChanged":
            from ._schemas.message import BusinessUnitNameChangedMessageSchema

            return BusinessUnitNameChangedMessageSchema().load(data)
        if data["type"] == "BusinessUnitParentUnitChanged":
            from ._schemas.message import BusinessUnitParentUnitChangedMessageSchema

            return BusinessUnitParentUnitChangedMessageSchema().load(data)
        if data["type"] == "BusinessUnitShippingAddressAdded":
            from ._schemas.message import BusinessUnitShippingAddressAddedMessageSchema

            return BusinessUnitShippingAddressAddedMessageSchema().load(data)
        if data["type"] == "BusinessUnitShippingAddressRemoved":
            from ._schemas.message import (
                BusinessUnitShippingAddressRemovedMessageSchema,
            )

            return BusinessUnitShippingAddressRemovedMessageSchema().load(data)
        if data["type"] == "BusinessUnitStatusChanged":
            from ._schemas.message import BusinessUnitStatusChangedMessageSchema

            return BusinessUnitStatusChangedMessageSchema().load(data)
        if data["type"] == "BusinessUnitStoreAdded":
            from ._schemas.message import BusinessUnitStoreAddedMessageSchema

            return BusinessUnitStoreAddedMessageSchema().load(data)
        if data["type"] == "BusinessUnitStoreModeChanged":
            from ._schemas.message import BusinessUnitStoreModeChangedMessageSchema

            return BusinessUnitStoreModeChangedMessageSchema().load(data)
        if data["type"] == "BusinessUnitStoreRemoved":
            from ._schemas.message import BusinessUnitStoreRemovedMessageSchema

            return BusinessUnitStoreRemovedMessageSchema().load(data)
        if data["type"] == "BusinessUnitStoresSet":
            from ._schemas.message import BusinessUnitStoresSetMessageSchema

            return BusinessUnitStoresSetMessageSchema().load(data)
        if data["type"] == "CategoryCreated":
            from ._schemas.message import CategoryCreatedMessageSchema

            return CategoryCreatedMessageSchema().load(data)
        if data["type"] == "CategorySlugChanged":
            from ._schemas.message import CategorySlugChangedMessageSchema

            return CategorySlugChangedMessageSchema().load(data)
        if data["type"] == "CustomerAddressAdded":
            from ._schemas.message import CustomerAddressAddedMessageSchema

            return CustomerAddressAddedMessageSchema().load(data)
        if data["type"] == "CustomerAddressChanged":
            from ._schemas.message import CustomerAddressChangedMessageSchema

            return CustomerAddressChangedMessageSchema().load(data)
        if data["type"] == "CustomerAddressRemoved":
            from ._schemas.message import CustomerAddressRemovedMessageSchema

            return CustomerAddressRemovedMessageSchema().load(data)
        if data["type"] == "CustomerCompanyNameSet":
            from ._schemas.message import CustomerCompanyNameSetMessageSchema

            return CustomerCompanyNameSetMessageSchema().load(data)
        if data["type"] == "CustomerCreated":
            from ._schemas.message import CustomerCreatedMessageSchema

            return CustomerCreatedMessageSchema().load(data)
        if data["type"] == "CustomerDateOfBirthSet":
            from ._schemas.message import CustomerDateOfBirthSetMessageSchema

            return CustomerDateOfBirthSetMessageSchema().load(data)
        if data["type"] == "CustomerDeleted":
            from ._schemas.message import CustomerDeletedMessageSchema

            return CustomerDeletedMessageSchema().load(data)
        if data["type"] == "CustomerEmailChanged":
            from ._schemas.message import CustomerEmailChangedMessageSchema

            return CustomerEmailChangedMessageSchema().load(data)
        if data["type"] == "CustomerEmailVerified":
            from ._schemas.message import CustomerEmailVerifiedMessageSchema

            return CustomerEmailVerifiedMessageSchema().load(data)
        if data["type"] == "CustomerFirstNameSet":
            from ._schemas.message import CustomerFirstNameSetMessageSchema

            return CustomerFirstNameSetMessageSchema().load(data)
        if data["type"] == "CustomerGroupSet":
            from ._schemas.message import CustomerGroupSetMessageSchema

            return CustomerGroupSetMessageSchema().load(data)
        if data["type"] == "CustomerLastNameSet":
            from ._schemas.message import CustomerLastNameSetMessageSchema

            return CustomerLastNameSetMessageSchema().load(data)
        if data["type"] == "CustomerPasswordUpdated":
            from ._schemas.message import CustomerPasswordUpdatedMessageSchema

            return CustomerPasswordUpdatedMessageSchema().load(data)
        if data["type"] == "CustomerTitleSet":
            from ._schemas.message import CustomerTitleSetMessageSchema

            return CustomerTitleSetMessageSchema().load(data)
        if data["type"] == "InventoryEntryCreated":
            from ._schemas.message import InventoryEntryCreatedMessageSchema

            return InventoryEntryCreatedMessageSchema().load(data)
        if data["type"] == "InventoryEntryDeleted":
            from ._schemas.message import InventoryEntryDeletedMessageSchema

            return InventoryEntryDeletedMessageSchema().load(data)
        if data["type"] == "InventoryEntryQuantitySet":
            from ._schemas.message import InventoryEntryQuantitySetMessageSchema

            return InventoryEntryQuantitySetMessageSchema().load(data)
        if data["type"] == "OrderPaymentAdded":
            from ._schemas.message import OrderPaymentAddedMessageSchema

            return OrderPaymentAddedMessageSchema().load(data)
        if data["type"] == "PaymentCreated":
            from ._schemas.message import PaymentCreatedMessageSchema

            return PaymentCreatedMessageSchema().load(data)
        if data["type"] == "PaymentInteractionAdded":
            from ._schemas.message import PaymentInteractionAddedMessageSchema

            return PaymentInteractionAddedMessageSchema().load(data)
        if data["type"] == "PaymentStatusInterfaceCodeSet":
            from ._schemas.message import PaymentStatusInterfaceCodeSetMessageSchema

            return PaymentStatusInterfaceCodeSetMessageSchema().load(data)
        if data["type"] == "PaymentStatusStateTransition":
            from ._schemas.message import PaymentStatusStateTransitionMessageSchema

            return PaymentStatusStateTransitionMessageSchema().load(data)
        if data["type"] == "PaymentTransactionAdded":
            from ._schemas.message import PaymentTransactionAddedMessageSchema

            return PaymentTransactionAddedMessageSchema().load(data)
        if data["type"] == "PaymentTransactionStateChanged":
            from ._schemas.message import PaymentTransactionStateChangedMessageSchema

            return PaymentTransactionStateChangedMessageSchema().load(data)
        if data["type"] == "ProductAddedToCategory":
            from ._schemas.message import ProductAddedToCategoryMessageSchema

            return ProductAddedToCategoryMessageSchema().load(data)
        if data["type"] == "ProductCreated":
            from ._schemas.message import ProductCreatedMessageSchema

            return ProductCreatedMessageSchema().load(data)
        if data["type"] == "ProductDeleted":
            from ._schemas.message import ProductDeletedMessageSchema

            return ProductDeletedMessageSchema().load(data)
        if data["type"] == "ProductImageAdded":
            from ._schemas.message import ProductImageAddedMessageSchema

            return ProductImageAddedMessageSchema().load(data)
        if data["type"] == "ProductPriceAdded":
            from ._schemas.message import ProductPriceAddedMessageSchema

            return ProductPriceAddedMessageSchema().load(data)
        if data["type"] == "ProductPriceChanged":
            from ._schemas.message import ProductPriceChangedMessageSchema

            return ProductPriceChangedMessageSchema().load(data)
        if data["type"] == "ProductPriceDiscountsSet":
            from ._schemas.message import ProductPriceDiscountsSetMessageSchema

            return ProductPriceDiscountsSetMessageSchema().load(data)
        if data["type"] == "ProductPriceExternalDiscountSet":
            from ._schemas.message import ProductPriceExternalDiscountSetMessageSchema

            return ProductPriceExternalDiscountSetMessageSchema().load(data)
        if data["type"] == "ProductPriceKeySet":
            from ._schemas.message import ProductPriceKeySetMessageSchema

            return ProductPriceKeySetMessageSchema().load(data)
        if data["type"] == "ProductPriceModeSet":
            from ._schemas.message import ProductPriceModeSetMessageSchema

            return ProductPriceModeSetMessageSchema().load(data)
        if data["type"] == "ProductPriceRemoved":
            from ._schemas.message import ProductPriceRemovedMessageSchema

            return ProductPriceRemovedMessageSchema().load(data)
        if data["type"] == "ProductPricesSet":
            from ._schemas.message import ProductPricesSetMessageSchema

            return ProductPricesSetMessageSchema().load(data)
        if data["type"] == "ProductPublished":
            from ._schemas.message import ProductPublishedMessageSchema

            return ProductPublishedMessageSchema().load(data)
        if data["type"] == "ProductRemovedFromCategory":
            from ._schemas.message import ProductRemovedFromCategoryMessageSchema

            return ProductRemovedFromCategoryMessageSchema().load(data)
        if data["type"] == "ProductRevertedStagedChanges":
            from ._schemas.message import ProductRevertedStagedChangesMessageSchema

            return ProductRevertedStagedChangesMessageSchema().load(data)
        if data["type"] == "ProductSelectionCreated":
            from ._schemas.message import ProductSelectionCreatedMessageSchema

            return ProductSelectionCreatedMessageSchema().load(data)
        if data["type"] == "ProductSelectionDeleted":
            from ._schemas.message import ProductSelectionDeletedMessageSchema

            return ProductSelectionDeletedMessageSchema().load(data)
        if data["type"] == "ProductSelectionProductAdded":
            from ._schemas.message import ProductSelectionProductAddedMessageSchema

            return ProductSelectionProductAddedMessageSchema().load(data)
        if data["type"] == "ProductSelectionProductExcluded":
            from ._schemas.message import ProductSelectionProductExcludedMessageSchema

            return ProductSelectionProductExcludedMessageSchema().load(data)
        if data["type"] == "ProductSelectionProductRemoved":
            from ._schemas.message import ProductSelectionProductRemovedMessageSchema

            return ProductSelectionProductRemovedMessageSchema().load(data)
        if data["type"] == "ProductSelectionVariantExclusionChanged":
            from ._schemas.message import (
                ProductSelectionVariantExclusionChangedMessageSchema,
            )

            return ProductSelectionVariantExclusionChangedMessageSchema().load(data)
        if data["type"] == "ProductSelectionVariantSelectionChanged":
            from ._schemas.message import (
                ProductSelectionVariantSelectionChangedMessageSchema,
            )

            return ProductSelectionVariantSelectionChangedMessageSchema().load(data)
        if data["type"] == "ProductSlugChanged":
            from ._schemas.message import ProductSlugChangedMessageSchema

            return ProductSlugChangedMessageSchema().load(data)
        if data["type"] == "ProductStateTransition":
            from ._schemas.message import ProductStateTransitionMessageSchema

            return ProductStateTransitionMessageSchema().load(data)
        if data["type"] == "ProductUnpublished":
            from ._schemas.message import ProductUnpublishedMessageSchema

            return ProductUnpublishedMessageSchema().load(data)
        if data["type"] == "ProductVariantAdded":
            from ._schemas.message import ProductVariantAddedMessageSchema

            return ProductVariantAddedMessageSchema().load(data)
        if data["type"] == "ProductVariantDeleted":
            from ._schemas.message import ProductVariantDeletedMessageSchema

            return ProductVariantDeletedMessageSchema().load(data)
        if data["type"] == "QuoteCreated":
            from ._schemas.message import QuoteCreatedMessageSchema

            return QuoteCreatedMessageSchema().load(data)
        if data["type"] == "QuoteCustomerChanged":
            from ._schemas.message import QuoteCustomerChangedMessageSchema

            return QuoteCustomerChangedMessageSchema().load(data)
        if data["type"] == "QuoteDeleted":
            from ._schemas.message import QuoteDeletedMessageSchema

            return QuoteDeletedMessageSchema().load(data)
        if data["type"] == "QuoteRequestCreated":
            from ._schemas.message import QuoteRequestCreatedMessageSchema

            return QuoteRequestCreatedMessageSchema().load(data)
        if data["type"] == "QuoteRequestCustomerChanged":
            from ._schemas.message import QuoteRequestCustomerChangedMessageSchema

            return QuoteRequestCustomerChangedMessageSchema().load(data)
        if data["type"] == "QuoteRequestDeleted":
            from ._schemas.message import QuoteRequestDeletedMessageSchema

            return QuoteRequestDeletedMessageSchema().load(data)
        if data["type"] == "QuoteRequestStateChanged":
            from ._schemas.message import QuoteRequestStateChangedMessageSchema

            return QuoteRequestStateChangedMessageSchema().load(data)
        if data["type"] == "QuoteRequestStateTransition":
            from ._schemas.message import QuoteRequestStateTransitionMessageSchema

            return QuoteRequestStateTransitionMessageSchema().load(data)
        if data["type"] == "QuoteStateChanged":
            from ._schemas.message import QuoteStateChangedMessageSchema

            return QuoteStateChangedMessageSchema().load(data)
        if data["type"] == "QuoteStateTransition":
            from ._schemas.message import QuoteStateTransitionMessageSchema

            return QuoteStateTransitionMessageSchema().load(data)
        if data["type"] == "ReviewCreated":
            from ._schemas.message import ReviewCreatedMessageSchema

            return ReviewCreatedMessageSchema().load(data)
        if data["type"] == "ReviewRatingSet":
            from ._schemas.message import ReviewRatingSetMessageSchema

            return ReviewRatingSetMessageSchema().load(data)
        if data["type"] == "ReviewStateTransition":
            from ._schemas.message import ReviewStateTransitionMessageSchema

            return ReviewStateTransitionMessageSchema().load(data)
        if data["type"] == "StagedQuoteCreated":
            from ._schemas.message import StagedQuoteCreatedMessageSchema

            return StagedQuoteCreatedMessageSchema().load(data)
        if data["type"] == "StagedQuoteDeleted":
            from ._schemas.message import StagedQuoteDeletedMessageSchema

            return StagedQuoteDeletedMessageSchema().load(data)
        if data["type"] == "StagedQuoteSellerCommentSet":
            from ._schemas.message import StagedQuoteSellerCommentSetMessageSchema

            return StagedQuoteSellerCommentSetMessageSchema().load(data)
        if data["type"] == "StagedQuoteStateChanged":
            from ._schemas.message import StagedQuoteStateChangedMessageSchema

            return StagedQuoteStateChangedMessageSchema().load(data)
        if data["type"] == "StagedQuoteStateTransition":
            from ._schemas.message import StagedQuoteStateTransitionMessageSchema

            return StagedQuoteStateTransitionMessageSchema().load(data)
        if data["type"] == "StagedQuoteValidToSet":
            from ._schemas.message import StagedQuoteValidToSetMessageSchema

            return StagedQuoteValidToSetMessageSchema().load(data)
        if data["type"] == "StandalonePriceActiveChanged":
            from ._schemas.message import StandalonePriceActiveChangedMessageSchema

            return StandalonePriceActiveChangedMessageSchema().load(data)
        if data["type"] == "StandalonePriceCreated":
            from ._schemas.message import StandalonePriceCreatedMessageSchema

            return StandalonePriceCreatedMessageSchema().load(data)
        if data["type"] == "StandalonePriceDeleted":
            from ._schemas.message import StandalonePriceDeletedMessageSchema

            return StandalonePriceDeletedMessageSchema().load(data)
        if data["type"] == "StandalonePriceDiscountSet":
            from ._schemas.message import StandalonePriceDiscountSetMessageSchema

            return StandalonePriceDiscountSetMessageSchema().load(data)
        if data["type"] == "StandalonePriceExternalDiscountSet":
            from ._schemas.message import (
                StandalonePriceExternalDiscountSetMessageSchema,
            )

            return StandalonePriceExternalDiscountSetMessageSchema().load(data)
        if data["type"] == "StandalonePriceKeySet":
            from ._schemas.message import StandalonePriceKeySetMessageSchema

            return StandalonePriceKeySetMessageSchema().load(data)
        if data["type"] == "StandalonePriceStagedChangesApplied":
            from ._schemas.message import (
                StandalonePriceStagedChangesAppliedMessageSchema,
            )

            return StandalonePriceStagedChangesAppliedMessageSchema().load(data)
        if data["type"] == "StandalonePriceTierAdded":
            from ._schemas.message import StandalonePriceTierAddedMessageSchema

            return StandalonePriceTierAddedMessageSchema().load(data)
        if data["type"] == "StandalonePriceTierRemoved":
            from ._schemas.message import StandalonePriceTierRemovedMessageSchema

            return StandalonePriceTierRemovedMessageSchema().load(data)
        if data["type"] == "StandalonePriceTiersSet":
            from ._schemas.message import StandalonePriceTiersSetMessageSchema

            return StandalonePriceTiersSetMessageSchema().load(data)
        if data["type"] == "StandalonePriceValidFromAndUntilSet":
            from ._schemas.message import (
                StandalonePriceValidFromAndUntilSetMessageSchema,
            )

            return StandalonePriceValidFromAndUntilSetMessageSchema().load(data)
        if data["type"] == "StandalonePriceValidFromSet":
            from ._schemas.message import StandalonePriceValidFromSetMessageSchema

            return StandalonePriceValidFromSetMessageSchema().load(data)
        if data["type"] == "StandalonePriceValidUntilSet":
            from ._schemas.message import StandalonePriceValidUntilSetMessageSchema

            return StandalonePriceValidUntilSetMessageSchema().load(data)
        if data["type"] == "StandalonePriceValueChanged":
            from ._schemas.message import StandalonePriceValueChangedMessageSchema

            return StandalonePriceValueChangedMessageSchema().load(data)
        if data["type"] == "StoreCountriesChanged":
            from ._schemas.message import StoreCountriesChangedMessageSchema

            return StoreCountriesChangedMessageSchema().load(data)
        if data["type"] == "StoreCreated":
            from ._schemas.message import StoreCreatedMessageSchema

            return StoreCreatedMessageSchema().load(data)
        if data["type"] == "StoreDeleted":
            from ._schemas.message import StoreDeletedMessageSchema

            return StoreDeletedMessageSchema().load(data)
        if data["type"] == "StoreDistributionChannelsChanged":
            from ._schemas.message import StoreDistributionChannelsChangedMessageSchema

            return StoreDistributionChannelsChangedMessageSchema().load(data)
        if data["type"] == "StoreLanguagesChanged":
            from ._schemas.message import StoreLanguagesChangedMessageSchema

            return StoreLanguagesChangedMessageSchema().load(data)
        if data["type"] == "StoreNameSet":
            from ._schemas.message import StoreNameSetMessageSchema

            return StoreNameSetMessageSchema().load(data)
        if data["type"] == "StoreProductSelectionsChanged":
            from ._schemas.message import StoreProductSelectionsChangedMessageSchema

            return StoreProductSelectionsChangedMessageSchema().load(data)
        if data["type"] == "StoreSupplyChannelsChanged":
            from ._schemas.message import StoreSupplyChannelsChangedMessageSchema

            return StoreSupplyChannelsChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import MessageSchema

        return MessageSchema().dump(self)


class AssociateRoleBuyerAssignableChangedMessage(Message):
    """Generated after a successful [Change BuyerAssignable](ctp:api:type:AssociateRoleChangeBuyerAssignableAction) update action."""

    #: The new value of the `buyerAssignable` field of the AssociateRole.
    buyer_assignable: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        buyer_assignable: bool
    ):
        self.buyer_assignable = buyer_assignable

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="AssociateRoleBuyerAssignableChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRoleBuyerAssignableChangedMessage":
        from ._schemas.message import AssociateRoleBuyerAssignableChangedMessageSchema

        return AssociateRoleBuyerAssignableChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRoleBuyerAssignableChangedMessageSchema

        return AssociateRoleBuyerAssignableChangedMessageSchema().dump(self)


class AssociateRoleCreatedMessage(Message):
    """Generated after a successful [Create AssociateRole](/projects/associate-roles#create-associaterole) request."""

    #: The [AssociateRole](ctp:api:type:AssociateRole) that was created.
    associate_role: "AssociateRole"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        associate_role: "AssociateRole"
    ):
        self.associate_role = associate_role

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="AssociateRoleCreated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRoleCreatedMessage":
        from ._schemas.message import AssociateRoleCreatedMessageSchema

        return AssociateRoleCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRoleCreatedMessageSchema

        return AssociateRoleCreatedMessageSchema().dump(self)


class AssociateRoleDeletedMessage(Message):
    """Generated after a successful [Delete AssociateRole](/projects/associate-roles#delete-associaterole) request."""

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="AssociateRoleDeleted",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRoleDeletedMessage":
        from ._schemas.message import AssociateRoleDeletedMessageSchema

        return AssociateRoleDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRoleDeletedMessageSchema

        return AssociateRoleDeletedMessageSchema().dump(self)


class AssociateRoleNameChangedMessage(Message):
    """Generated after a successful [Set Name](ctp:api:type:AssociateRoleSetNameAction) update action."""

    #: Updated name of the [AssociateRole](ctp:api:type:AssociateRole).
    name: str

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        name: str
    ):
        self.name = name

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="AssociateRoleNameSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRoleNameChangedMessage":
        from ._schemas.message import AssociateRoleNameChangedMessageSchema

        return AssociateRoleNameChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRoleNameChangedMessageSchema

        return AssociateRoleNameChangedMessageSchema().dump(self)


class AssociateRolePermissionAddedMessage(Message):
    """Generated after a successful [Add Permissions](ctp:api:type:AssociateRoleAddPermissionAction) update action."""

    #: The Permission that was added to the AssociateRole.
    permission: "Permission"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        permission: "Permission"
    ):
        self.permission = permission

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="AssociateRolePermissionAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRolePermissionAddedMessage":
        from ._schemas.message import AssociateRolePermissionAddedMessageSchema

        return AssociateRolePermissionAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRolePermissionAddedMessageSchema

        return AssociateRolePermissionAddedMessageSchema().dump(self)


class AssociateRolePermissionRemovedMessage(Message):
    """Generated after a successful [Remove Permissions](ctp:api:type:AssociateRoleRemovePermissionAction) update action."""

    #: The Permission that was removed from the AssociateRole.
    permission: "Permission"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        permission: "Permission"
    ):
        self.permission = permission

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="AssociateRolePermissionRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRolePermissionRemovedMessage":
        from ._schemas.message import AssociateRolePermissionRemovedMessageSchema

        return AssociateRolePermissionRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRolePermissionRemovedMessageSchema

        return AssociateRolePermissionRemovedMessageSchema().dump(self)


class AssociateRolePermissionsSetMessage(Message):
    """Generated after a successful [Set Permissions](ctp:api:type:AssociateRoleSetPermissionsAction) update action."""

    #: Permission assigned to the AssociateRole.
    permissions: typing.List["Permission"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        permissions: typing.List["Permission"]
    ):
        self.permissions = permissions

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="AssociateRolePermissionsSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRolePermissionsSetMessage":
        from ._schemas.message import AssociateRolePermissionsSetMessageSchema

        return AssociateRolePermissionsSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRolePermissionsSetMessageSchema

        return AssociateRolePermissionsSetMessageSchema().dump(self)


class BusinessUnitAddressAddedMessage(Message):
    """Generated after a successful [Add Address](ctp:api:type:BusinessUnitAddAddressAction) update action."""

    #: The address that was added to the [Business Unit](ctp:api:type:BusinessUnit).
    address: "Address"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: "Address"
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitAddressAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAddressAddedMessage":
        from ._schemas.message import BusinessUnitAddressAddedMessageSchema

        return BusinessUnitAddressAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAddressAddedMessageSchema

        return BusinessUnitAddressAddedMessageSchema().dump(self)


class BusinessUnitAddressChangedMessage(Message):
    """Generated after a successful [Change Address](ctp:api:type:BusinessUnitChangeAddressAction) update action."""

    #: Updated address of the Business Unit.
    address: "Address"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: "Address"
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitAddressChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAddressChangedMessage":
        from ._schemas.message import BusinessUnitAddressChangedMessageSchema

        return BusinessUnitAddressChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAddressChangedMessageSchema

        return BusinessUnitAddressChangedMessageSchema().dump(self)


class BusinessUnitAddressRemovedMessage(Message):
    """Generated after a successful [Remove Address](ctp:api:type:BusinessUnitRemoveAddressAction) update action."""

    #: The address that was removed from the [Business Unit](ctp:api:type:BusinessUnit).
    address: "Address"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: "Address"
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitAddressRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAddressRemovedMessage":
        from ._schemas.message import BusinessUnitAddressRemovedMessageSchema

        return BusinessUnitAddressRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAddressRemovedMessageSchema

        return BusinessUnitAddressRemovedMessageSchema().dump(self)


class BusinessUnitAssociateAddedMessage(Message):
    """Generated after a successful [Add Associate](ctp:api:type:BusinessUnitAddAssociateAction) update action."""

    #: The [Associate](ctp:api:type:Associate) that was added to the [Business Unit](ctp:api:type:BusinessUnit).
    associate: "Associate"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        associate: "Associate"
    ):
        self.associate = associate

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitAssociateAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAssociateAddedMessage":
        from ._schemas.message import BusinessUnitAssociateAddedMessageSchema

        return BusinessUnitAssociateAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAssociateAddedMessageSchema

        return BusinessUnitAssociateAddedMessageSchema().dump(self)


class BusinessUnitAssociateChangedMessage(Message):
    """Generated after a successful [Change Associate](ctp:api:type:BusinessUnitChangeAssociateAction) update action."""

    #: The [Associate](ctp:api:type:Associate) that was updated.
    associate: "Associate"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        associate: "Associate"
    ):
        self.associate = associate

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitAssociateChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAssociateChangedMessage":
        from ._schemas.message import BusinessUnitAssociateChangedMessageSchema

        return BusinessUnitAssociateChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAssociateChangedMessageSchema

        return BusinessUnitAssociateChangedMessageSchema().dump(self)


class BusinessUnitAssociateModeChangedMessage(Message):
    """Generated after a successful [Change Associate Mode](ctp:api:type:BusinessUnitChangeAssociateModeAction) update action."""

    #: [BusinessUnitAssociateMode](ctp:api:type:BusinessUnitAssociateMode) of the Business Unit after the [Change Associate Mode](ctp:api:type:BusinessUnitChangeAssociateModeAction) update action.
    associate_mode: "BusinessUnitAssociateMode"
    #: [BusinessUnitAssociateMode](ctp:api:type:BusinessUnitAssociateMode) of the Business Unit before the [Change Associate Mode](ctp:api:type:BusinessUnitChangeAssociateModeAction) update action.
    old_associate_mode: "BusinessUnitAssociateMode"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        associate_mode: "BusinessUnitAssociateMode",
        old_associate_mode: "BusinessUnitAssociateMode"
    ):
        self.associate_mode = associate_mode
        self.old_associate_mode = old_associate_mode

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitAssociateModeChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAssociateModeChangedMessage":
        from ._schemas.message import BusinessUnitAssociateModeChangedMessageSchema

        return BusinessUnitAssociateModeChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAssociateModeChangedMessageSchema

        return BusinessUnitAssociateModeChangedMessageSchema().dump(self)


class BusinessUnitAssociateRemovedMessage(Message):
    """Generated after a successful [Remove Associate](ctp:api:type:BusinessUnitRemoveAssociateAction) update action."""

    #: The [Associate](ctp:api:type:Associate) that was removed from the [Business Unit](ctp:api:type:BusinessUnit).
    associate: "Associate"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        associate: "Associate"
    ):
        self.associate = associate

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitAssociateRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAssociateRemovedMessage":
        from ._schemas.message import BusinessUnitAssociateRemovedMessageSchema

        return BusinessUnitAssociateRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAssociateRemovedMessageSchema

        return BusinessUnitAssociateRemovedMessageSchema().dump(self)


class BusinessUnitAssociatesSetMessage(Message):
    """Generated after a successful [Set Associates](ctp:api:type:BusinessUnitSetAssociatesAction) update action."""

    #: The list of [Associates](ctp:api:type:Associate) that was updated on the [Business Unit](ctp:api:type:BusinessUnit).
    associates: typing.List["Associate"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        associates: typing.List["Associate"]
    ):
        self.associates = associates

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitAssociatesSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAssociatesSetMessage":
        from ._schemas.message import BusinessUnitAssociatesSetMessageSchema

        return BusinessUnitAssociatesSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAssociatesSetMessageSchema

        return BusinessUnitAssociatesSetMessageSchema().dump(self)


class BusinessUnitBillingAddressAddedMessage(Message):
    """Generated after a successful [Add Billing Address Identifier](ctp:api:type:BusinessUnitAddBillingAddressIdAction) update action."""

    #: The address that was added to the [Business Unit](ctp:api:type:BusinessUnit) as billing address.
    address: "Address"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: "Address"
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitBillingAddressAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitBillingAddressAddedMessage":
        from ._schemas.message import BusinessUnitBillingAddressAddedMessageSchema

        return BusinessUnitBillingAddressAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitBillingAddressAddedMessageSchema

        return BusinessUnitBillingAddressAddedMessageSchema().dump(self)


class BusinessUnitBillingAddressRemovedMessage(Message):
    """Generated after a successful [Remove Billing Address Identifier](ctp:api:type:BusinessUnitRemoveBillingAddressIdAction) update action."""

    #: The address that was removed from the billing addresses of the [Business Unit](ctp:api:type:BusinessUnit).
    address: "Address"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: "Address"
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitBillingAddressRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitBillingAddressRemovedMessage":
        from ._schemas.message import BusinessUnitBillingAddressRemovedMessageSchema

        return BusinessUnitBillingAddressRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitBillingAddressRemovedMessageSchema

        return BusinessUnitBillingAddressRemovedMessageSchema().dump(self)


class BusinessUnitContactEmailSetMessage(Message):
    """Generated after a successful [Set Contact Email](ctp:api:type:BusinessUnitSetContactEmailAction) update action."""

    #: The contact email that was updated on the [Business Unit](ctp:api:type:BusinessUnit).
    contact_email: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        contact_email: typing.Optional[str] = None
    ):
        self.contact_email = contact_email

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitContactEmailSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitContactEmailSetMessage":
        from ._schemas.message import BusinessUnitContactEmailSetMessageSchema

        return BusinessUnitContactEmailSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitContactEmailSetMessageSchema

        return BusinessUnitContactEmailSetMessageSchema().dump(self)


class BusinessUnitCreatedMessage(Message):
    """Generated after a successful [Create Business Unit](/projects/business-units#create-businessunit) request."""

    #: The [Business Unit](ctp:api:type:BusinessUnit) that was created.
    business_unit: "BusinessUnit"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        business_unit: "BusinessUnit"
    ):
        self.business_unit = business_unit

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitCreated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitCreatedMessage":
        from ._schemas.message import BusinessUnitCreatedMessageSchema

        return BusinessUnitCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitCreatedMessageSchema

        return BusinessUnitCreatedMessageSchema().dump(self)


class BusinessUnitDefaultBillingAddressSetMessage(Message):
    """Generated after a successful [Set Default Billing Address](ctp:api:type:BusinessUnitSetDefaultBillingAddressAction) update action."""

    #: The address that was set as the default billing address.
    address: typing.Optional["Address"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: typing.Optional["Address"] = None
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitDefaultBillingAddressSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitDefaultBillingAddressSetMessage":
        from ._schemas.message import BusinessUnitDefaultBillingAddressSetMessageSchema

        return BusinessUnitDefaultBillingAddressSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitDefaultBillingAddressSetMessageSchema

        return BusinessUnitDefaultBillingAddressSetMessageSchema().dump(self)


class BusinessUnitDefaultShippingAddressSetMessage(Message):
    """Generated after a successful [Set Default Shipping Address](ctp:api:type:BusinessUnitSetDefaultShippingAddressAction) update action."""

    #: The address that was set as the default shipping address.
    address: typing.Optional["Address"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: typing.Optional["Address"] = None
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitDefaultShippingAddressSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitDefaultShippingAddressSetMessage":
        from ._schemas.message import BusinessUnitDefaultShippingAddressSetMessageSchema

        return BusinessUnitDefaultShippingAddressSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitDefaultShippingAddressSetMessageSchema

        return BusinessUnitDefaultShippingAddressSetMessageSchema().dump(self)


class BusinessUnitDeletedMessage(Message):
    """Generated after a successful [Delete Business Unit](/projects/business-units#delete-businessunit) request."""

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitDeleted",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitDeletedMessage":
        from ._schemas.message import BusinessUnitDeletedMessageSchema

        return BusinessUnitDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitDeletedMessageSchema

        return BusinessUnitDeletedMessageSchema().dump(self)


class BusinessUnitNameChangedMessage(Message):
    """Generated after a successful [Change Name](ctp:api:type:BusinessUnitChangeNameAction) update action."""

    #: Updated name of the [Business Unit](ctp:api:type:BusinessUnit).
    name: str

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        name: str
    ):
        self.name = name

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitNameChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitNameChangedMessage":
        from ._schemas.message import BusinessUnitNameChangedMessageSchema

        return BusinessUnitNameChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitNameChangedMessageSchema

        return BusinessUnitNameChangedMessageSchema().dump(self)


class BusinessUnitParentUnitChangedMessage(Message):
    """Generated after a successful [Change Parent Unit](ctp:api:type:BusinessUnitChangeParentUnitAction) update action."""

    #: Parent unit of the [Business Unit](ctp:api:type:BusinessUnit) before the [Change Parent Unit](ctp:api:type:BusinessUnitChangeParentUnitAction) update action.
    old_parent_unit: typing.Optional["BusinessUnitKeyReference"]
    #: Parent unit of the [Business Unit](ctp:api:type:BusinessUnit) after the [Change Parent Unit](ctp:api:type:BusinessUnitChangeParentUnitAction) update action.
    new_parent_unit: typing.Optional["BusinessUnitKeyReference"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        old_parent_unit: typing.Optional["BusinessUnitKeyReference"] = None,
        new_parent_unit: typing.Optional["BusinessUnitKeyReference"] = None
    ):
        self.old_parent_unit = old_parent_unit
        self.new_parent_unit = new_parent_unit

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitParentUnitChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitParentUnitChangedMessage":
        from ._schemas.message import BusinessUnitParentUnitChangedMessageSchema

        return BusinessUnitParentUnitChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitParentUnitChangedMessageSchema

        return BusinessUnitParentUnitChangedMessageSchema().dump(self)


class BusinessUnitShippingAddressAddedMessage(Message):
    """Generated after a successful [Add Shipping Address Identifier](ctp:api:type:BusinessUnitAddShippingAddressIdAction) update action."""

    #: The address that was added to the [Business Unit](ctp:api:type:BusinessUnit) as shipping address.
    address: "Address"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: "Address"
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitShippingAddressAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitShippingAddressAddedMessage":
        from ._schemas.message import BusinessUnitShippingAddressAddedMessageSchema

        return BusinessUnitShippingAddressAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitShippingAddressAddedMessageSchema

        return BusinessUnitShippingAddressAddedMessageSchema().dump(self)


class BusinessUnitShippingAddressRemovedMessage(Message):
    """Generated after a successful [Remove Shipping Address Identifier](ctp:api:type:BusinessUnitRemoveShippingAddressIdAction) update action."""

    #: The address that was removed from shipping addresses of the [Business Unit](ctp:api:type:BusinessUnit).
    address: "Address"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: "Address"
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitShippingAddressRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitShippingAddressRemovedMessage":
        from ._schemas.message import BusinessUnitShippingAddressRemovedMessageSchema

        return BusinessUnitShippingAddressRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitShippingAddressRemovedMessageSchema

        return BusinessUnitShippingAddressRemovedMessageSchema().dump(self)


class BusinessUnitStatusChangedMessage(Message):
    """Generated after a successful [Change Status](ctp:api:type:BusinessUnitChangeStatusAction) update action."""

    #: Updated status of the [Business Unit](ctp:api:type:BusinessUnit).
    active: "BusinessUnitStatus"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        active: "BusinessUnitStatus"
    ):
        self.active = active

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitStatusChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitStatusChangedMessage":
        from ._schemas.message import BusinessUnitStatusChangedMessageSchema

        return BusinessUnitStatusChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitStatusChangedMessageSchema

        return BusinessUnitStatusChangedMessageSchema().dump(self)


class BusinessUnitStoreAddedMessage(Message):
    """Generated after a successful [Add Store](ctp:api:type:BusinessUnitAddStoreAction) update action."""

    #: The [Store](ctp:api:type:Store) that was added to the [Business Unit](ctp:api:type:BusinessUnit).
    store: "StoreKeyReference"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        store: "StoreKeyReference"
    ):
        self.store = store

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitStoreAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitStoreAddedMessage":
        from ._schemas.message import BusinessUnitStoreAddedMessageSchema

        return BusinessUnitStoreAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitStoreAddedMessageSchema

        return BusinessUnitStoreAddedMessageSchema().dump(self)


class BusinessUnitStoreModeChangedMessage(Message):
    """Generated after a successful [Set Store Mode](ctp:api:type:BusinessUnitSetStoreModeAction) update action."""

    #: [Stores](ctp:api:type:Store) of the [Business Unit](ctp:api:type:BusinessUnit) after the [Set Store Mode](ctp:api:type:BusinessUnitSetStoreModeAction) update action.
    stores: typing.List["StoreKeyReference"]
    #: [BusinessUnitStoreMode](ctp:api:type:BusinessUnitStoreMode) of the Business Unit after the [Set Store Mode](ctp:api:type:BusinessUnitSetStoreModeAction) update action.
    store_mode: "BusinessUnitStoreMode"
    #: [Stores](ctp:api:type:Store) of the [Business Unit](ctp:api:type:BusinessUnit) before the [Set Store Mode](ctp:api:type:BusinessUnitSetStoreModeAction) update action.
    old_stores: typing.List["StoreKeyReference"]
    #: [BusinessUnitStoreMode](ctp:api:type:BusinessUnitStoreMode) of the Business Unit before the [Set Store Mode](ctp:api:type:BusinessUnitSetStoreModeAction) update action.
    old_store_mode: "BusinessUnitStoreMode"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        stores: typing.List["StoreKeyReference"],
        store_mode: "BusinessUnitStoreMode",
        old_stores: typing.List["StoreKeyReference"],
        old_store_mode: "BusinessUnitStoreMode"
    ):
        self.stores = stores
        self.store_mode = store_mode
        self.old_stores = old_stores
        self.old_store_mode = old_store_mode

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitStoreModeChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitStoreModeChangedMessage":
        from ._schemas.message import BusinessUnitStoreModeChangedMessageSchema

        return BusinessUnitStoreModeChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitStoreModeChangedMessageSchema

        return BusinessUnitStoreModeChangedMessageSchema().dump(self)


class BusinessUnitStoreRemovedMessage(Message):
    #: The [Store](ctp:api:type:Store) that was removed from the [Business Unit](ctp:api:type:BusinessUnit).
    store: "StoreKeyReference"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        store: "StoreKeyReference"
    ):
        self.store = store

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitStoreRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitStoreRemovedMessage":
        from ._schemas.message import BusinessUnitStoreRemovedMessageSchema

        return BusinessUnitStoreRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitStoreRemovedMessageSchema

        return BusinessUnitStoreRemovedMessageSchema().dump(self)


class BusinessUnitStoresSetMessage(Message):
    """Generated after a successful [Set Stores](ctp:api:type:BusinessUnitSetStoresAction) update action."""

    #: [Stores](ctp:api:type:Store) of the [Business Unit](ctp:api:type:BusinessUnit) after the [Set Stores](ctp:api:type:BusinessUnitSetStoresAction) update action.
    stores: typing.List["StoreKeyReference"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        stores: typing.List["StoreKeyReference"]
    ):
        self.stores = stores

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="BusinessUnitStoresSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitStoresSetMessage":
        from ._schemas.message import BusinessUnitStoresSetMessageSchema

        return BusinessUnitStoresSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitStoresSetMessageSchema

        return BusinessUnitStoresSetMessageSchema().dump(self)


class CategoryCreatedMessage(Message):
    """Generated after a successful [Create Category](/../api/projects/categories#create-category) request."""

    #: [Category](ctp:api:type:Category) that was created.
    category: "Category"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        category: "Category"
    ):
        self.category = category

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CategoryCreated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CategoryCreatedMessage":
        from ._schemas.message import CategoryCreatedMessageSchema

        return CategoryCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CategoryCreatedMessageSchema

        return CategoryCreatedMessageSchema().dump(self)


class CategorySlugChangedMessage(Message):
    """Generated after a successful [Change Slug](ctp:api:type:CategoryChangeSlugAction) update action."""

    #: The slug of the [Category](ctp:api:type:Category) after the [Change Slug](ctp:api:type:CategoryChangeSlugAction) update action.
    slug: "LocalizedString"
    #: The slug of the [Category](ctp:api:type:Category) before the [Change Slug](ctp:api:type:CategoryChangeSlugAction) update action.
    old_slug: typing.Optional["LocalizedString"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        slug: "LocalizedString",
        old_slug: typing.Optional["LocalizedString"] = None
    ):
        self.slug = slug
        self.old_slug = old_slug

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CategorySlugChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CategorySlugChangedMessage":
        from ._schemas.message import CategorySlugChangedMessageSchema

        return CategorySlugChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CategorySlugChangedMessageSchema

        return CategorySlugChangedMessageSchema().dump(self)


class CustomerAddressAddedMessage(Message):
    """Generated after a successful [Add Address](ctp:api:type:CustomerAddAddressAction) update action."""

    #: [Address](ctp:api:type:Address) that was added during the [Add Address](ctp:api:type:CustomerAddAddressAction) update action.
    address: "Address"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: "Address"
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerAddressAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerAddressAddedMessage":
        from ._schemas.message import CustomerAddressAddedMessageSchema

        return CustomerAddressAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerAddressAddedMessageSchema

        return CustomerAddressAddedMessageSchema().dump(self)


class CustomerAddressChangedMessage(Message):
    """Generated after a successful [Change Address](ctp:api:type:CustomerChangeAddressAction) update action."""

    #: [Address](ctp:api:type:Address) that was set during the [Change Address](ctp:api:type:CustomerChangeAddressAction) update action.
    address: "Address"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: "Address"
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerAddressChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerAddressChangedMessage":
        from ._schemas.message import CustomerAddressChangedMessageSchema

        return CustomerAddressChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerAddressChangedMessageSchema

        return CustomerAddressChangedMessageSchema().dump(self)


class CustomerAddressRemovedMessage(Message):
    """Generated after a successful [Remove Address](ctp:api:type:CustomerRemoveAddressAction) update action."""

    #: [Address](ctp:api:type:Address) that was removed during the [Remove Address](ctp:api:type:CustomerRemoveAddressAction) update action.
    address: "Address"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: "Address"
    ):
        self.address = address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerAddressRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerAddressRemovedMessage":
        from ._schemas.message import CustomerAddressRemovedMessageSchema

        return CustomerAddressRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerAddressRemovedMessageSchema

        return CustomerAddressRemovedMessageSchema().dump(self)


class CustomerCompanyNameSetMessage(Message):
    """Generated after a successful [Set Company Name](ctp:api:type:CustomerSetCompanyNameAction) update action."""

    #: The `companyName` that was set during the [Set Company Name](ctp:api:type:CustomerSetCompanyNameAction) update action.
    company_name: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        company_name: typing.Optional[str] = None
    ):
        self.company_name = company_name

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerCompanyNameSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerCompanyNameSetMessage":
        from ._schemas.message import CustomerCompanyNameSetMessageSchema

        return CustomerCompanyNameSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerCompanyNameSetMessageSchema

        return CustomerCompanyNameSetMessageSchema().dump(self)


class CustomerCreatedMessage(Message):
    """Generated after a successful [Create Customer](/../api/projects/customers#create-sign-up-customer) request."""

    #: [Customer](ctp:api:type:Customer) that was created.
    customer: "Customer"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        customer: "Customer"
    ):
        self.customer = customer

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerCreated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerCreatedMessage":
        from ._schemas.message import CustomerCreatedMessageSchema

        return CustomerCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerCreatedMessageSchema

        return CustomerCreatedMessageSchema().dump(self)


class CustomerDateOfBirthSetMessage(Message):
    """Generated after a successful [Set Date of Birth](ctp:api:type:CustomerSetDateOfBirthAction) update action."""

    #: The `dateOfBirth` that was set during the [Set Date of Birth](ctp:api:type:CustomerSetDateOfBirthAction) update action.
    date_of_birth: typing.Optional[datetime.date]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        date_of_birth: typing.Optional[datetime.date] = None
    ):
        self.date_of_birth = date_of_birth

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerDateOfBirthSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerDateOfBirthSetMessage":
        from ._schemas.message import CustomerDateOfBirthSetMessageSchema

        return CustomerDateOfBirthSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerDateOfBirthSetMessageSchema

        return CustomerDateOfBirthSetMessageSchema().dump(self)


class CustomerDeletedMessage(Message):
    """Generated after a successful [Delete Customer](/../api/projects/customers#delete-customer) request."""

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerDeleted",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerDeletedMessage":
        from ._schemas.message import CustomerDeletedMessageSchema

        return CustomerDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerDeletedMessageSchema

        return CustomerDeletedMessageSchema().dump(self)


class CustomerEmailChangedMessage(Message):
    """Generated after a successful [Change Email](ctp:api:type:CustomerChangeEmailAction) update action."""

    #: The `email` that was set during the [Change Email](ctp:api:type:CustomerChangeEmailAction) update action.
    email: str

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        email: str
    ):
        self.email = email

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerEmailChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerEmailChangedMessage":
        from ._schemas.message import CustomerEmailChangedMessageSchema

        return CustomerEmailChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerEmailChangedMessageSchema

        return CustomerEmailChangedMessageSchema().dump(self)


class CustomerEmailVerifiedMessage(Message):
    """Generated after a successful [Verify Customer's Email](/../api/projects/customers#verify-email-of-customer) request."""

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerEmailVerified",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerEmailVerifiedMessage":
        from ._schemas.message import CustomerEmailVerifiedMessageSchema

        return CustomerEmailVerifiedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerEmailVerifiedMessageSchema

        return CustomerEmailVerifiedMessageSchema().dump(self)


class CustomerFirstNameSetMessage(Message):
    """Generated after a successful [Set First Name](ctp:api:type:CustomerSetFirstNameAction) update action."""

    #: The `firstName` that was set during the [Set First Name](ctp:api:type:CustomerSetFirstNameAction) update action.
    first_name: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        first_name: typing.Optional[str] = None
    ):
        self.first_name = first_name

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerFirstNameSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerFirstNameSetMessage":
        from ._schemas.message import CustomerFirstNameSetMessageSchema

        return CustomerFirstNameSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerFirstNameSetMessageSchema

        return CustomerFirstNameSetMessageSchema().dump(self)


class CustomerGroupSetMessage(Message):
    """Generated after a successful [Set Customer Group](ctp:api:type:CustomerSetCustomerGroupAction) update action."""

    #: [Customer Group](ctp:api:type:CustomerGroup) that was set during the [Set Customer Group](ctp:api:type:CustomerSetCustomerGroupAction) update action.
    customer_group: typing.Optional["CustomerGroupReference"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None
    ):
        self.customer_group = customer_group

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerGroupSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerGroupSetMessage":
        from ._schemas.message import CustomerGroupSetMessageSchema

        return CustomerGroupSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerGroupSetMessageSchema

        return CustomerGroupSetMessageSchema().dump(self)


class CustomerLastNameSetMessage(Message):
    """Generated after a successful [Set Last Name](ctp:api:type:CustomerSetLastNameAction) update action."""

    #: The `lastName` that was set during the [Set Last Name](ctp:api:type:CustomerSetLastNameAction) update action.
    last_name: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        last_name: typing.Optional[str] = None
    ):
        self.last_name = last_name

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerLastNameSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerLastNameSetMessage":
        from ._schemas.message import CustomerLastNameSetMessageSchema

        return CustomerLastNameSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerLastNameSetMessageSchema

        return CustomerLastNameSetMessageSchema().dump(self)


class CustomerPasswordUpdatedMessage(Message):
    """Generated after a successful [Reset Customer's Password](/../api/projects/customers#reset-password-of-customer), [Reset Customer's Password in a Store](/../api/projects/customers#reset-password-of-customer-in-store), [Change Customer's Password](/../api/projects/customers#change-password-of-customer), or [Change Customer's Password in a Store](/../api/projects/customers#change-password-of-customer-in-store) request. This Message is also produced during equivalent requests to the [My Customer Profile](/../api/projects/me-profile) endpoint."""

    #: Whether the Customer's password was updated during the [Reset password](/../api/projects/customers#password-reset-of-customer) or [Change password](/../api/projects/customers#change-password-of-customer) flow.
    reset: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        reset: bool
    ):
        self.reset = reset

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerPasswordUpdated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerPasswordUpdatedMessage":
        from ._schemas.message import CustomerPasswordUpdatedMessageSchema

        return CustomerPasswordUpdatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerPasswordUpdatedMessageSchema

        return CustomerPasswordUpdatedMessageSchema().dump(self)


class CustomerTitleSetMessage(Message):
    """Generated after a successful [Set Title](ctp:api:type:CustomerSetTitleAction) update action."""

    #: The `title` that was set during the [Set Title](ctp:api:type:CustomerSetTitleAction) update action.
    title: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        title: typing.Optional[str] = None
    ):
        self.title = title

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomerTitleSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerTitleSetMessage":
        from ._schemas.message import CustomerTitleSetMessageSchema

        return CustomerTitleSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerTitleSetMessageSchema

        return CustomerTitleSetMessageSchema().dump(self)


class InventoryEntryCreatedMessage(Message):
    """Generated after a successful [Create InventoryEntry](/../api/projects/inventory#create-inventoryentry) request."""

    #: [InventoryEntry](ctp:api:type:InventoryEntry) that was created.
    inventory_entry: "InventoryEntry"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        inventory_entry: "InventoryEntry"
    ):
        self.inventory_entry = inventory_entry

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="InventoryEntryCreated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "InventoryEntryCreatedMessage":
        from ._schemas.message import InventoryEntryCreatedMessageSchema

        return InventoryEntryCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import InventoryEntryCreatedMessageSchema

        return InventoryEntryCreatedMessageSchema().dump(self)


class InventoryEntryDeletedMessage(Message):
    """Generated after a successful [Delete InventoryEntry](/../api/projects/inventory#delete-inventoryentry) request."""

    #: The `sku` of the [InventoryEntry](ctp:api:type:InventoryEntry) that was deleted.
    sku: str
    #: [Reference](ctp:api:type:Reference) to the [Channel](ctp:api:type:Channel) where the [InventoryEntry](ctp:api:type:InventoryEntry) was deleted.
    supply_channel: typing.Optional["ChannelReference"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        sku: str,
        supply_channel: typing.Optional["ChannelReference"] = None
    ):
        self.sku = sku
        self.supply_channel = supply_channel

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="InventoryEntryDeleted",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "InventoryEntryDeletedMessage":
        from ._schemas.message import InventoryEntryDeletedMessageSchema

        return InventoryEntryDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import InventoryEntryDeletedMessageSchema

        return InventoryEntryDeletedMessageSchema().dump(self)


class InventoryEntryQuantitySetMessage(Message):
    """Generated after a successful [Add Quantity](ctp:api:type:InventoryEntryAddQuantityAction), [Remove Quantity](ctp:api:type:InventoryEntryRemoveQuantityAction) or [Change Quantity](ctp:api:type:InventoryEntryChangeQuantityAction) update action.
    Inventory changes as a result of [Order creation](/../api/projects/orders#create-order) do not trigger this message.

    """

    #: Quantity on stock for the [InventoryEntry](ctp:api:type:InventoryEntry) before the quantity was updated.
    old_quantity_on_stock: int
    #: Quantity on stock for the [InventoryEntry](ctp:api:type:InventoryEntry) after the quantity was updated.
    new_quantity_on_stock: int
    #: Available quantity for the [InventoryEntry](ctp:api:type:InventoryEntry) before the quantity was updated.
    old_available_quantity: int
    #: Available quantity for the [InventoryEntry](ctp:api:type:InventoryEntry) after the quantity was updated.
    new_available_quantity: int
    #: [Reference](ctp:api:type:Reference) to the [Channel](ctp:api:type:Channel) where the [InventoryEntry](ctp:api:type:InventoryEntry) quantity was set.
    supply_channel: typing.Optional["ChannelReference"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        old_quantity_on_stock: int,
        new_quantity_on_stock: int,
        old_available_quantity: int,
        new_available_quantity: int,
        supply_channel: typing.Optional["ChannelReference"] = None
    ):
        self.old_quantity_on_stock = old_quantity_on_stock
        self.new_quantity_on_stock = new_quantity_on_stock
        self.old_available_quantity = old_available_quantity
        self.new_available_quantity = new_available_quantity
        self.supply_channel = supply_channel

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="InventoryEntryQuantitySet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "InventoryEntryQuantitySetMessage":
        from ._schemas.message import InventoryEntryQuantitySetMessageSchema

        return InventoryEntryQuantitySetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import InventoryEntryQuantitySetMessageSchema

        return InventoryEntryQuantitySetMessageSchema().dump(self)


class MessagePagedQueryResponse(_BaseType):
    """[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [Message](ctp:api:type:Message)."""

    #: Number of [results requested](/../api/general-concepts#limit).
    limit: int
    #: Actual number of results returned.
    count: int
    #: Total number of results matching the query.
    #: This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
    #: This field is returned by default.
    #: For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
    #: When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
    total: typing.Optional[int]
    #: Number of [elements skipped](/../api/general-concepts#offset).
    offset: int
    #: [Messages](ctp:api:type:Message) matching the query.
    results: typing.List["Message"]

    def __init__(
        self,
        *,
        limit: int,
        count: int,
        total: typing.Optional[int] = None,
        offset: int,
        results: typing.List["Message"]
    ):
        self.limit = limit
        self.count = count
        self.total = total
        self.offset = offset
        self.results = results

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "MessagePagedQueryResponse":
        from ._schemas.message import MessagePagedQueryResponseSchema

        return MessagePagedQueryResponseSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import MessagePagedQueryResponseSchema

        return MessagePagedQueryResponseSchema().dump(self)


class MessagesConfiguration(_BaseType):
    """Holds the configuration for the [Messages Query](/../api/projects/messages) feature for the Project."""

    #: When `true`, the [Messages Query](/../api/projects/messages) feature is active.
    enabled: bool
    #: Specifies the number of days each Message should be available via the [Messages Query](/../api/projects/messages) API.
    #: For Messages older than the specified period, it is not guaranteed that they are still accessible via the API.
    #: This field may not be present on Projects created before 8 October 2018.
    delete_days_after_creation: typing.Optional[int]

    def __init__(
        self, *, enabled: bool, delete_days_after_creation: typing.Optional[int] = None
    ):
        self.enabled = enabled
        self.delete_days_after_creation = delete_days_after_creation

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "MessagesConfiguration":
        from ._schemas.message import MessagesConfigurationSchema

        return MessagesConfigurationSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import MessagesConfigurationSchema

        return MessagesConfigurationSchema().dump(self)


class MessagesConfigurationDraft(_BaseType):
    """Defines the configuration for the [Messages Query](/../api/projects/messages) feature for the Project."""

    #: Setting to `true` activates the [Messages Query](/../api/projects/messages) feature.
    enabled: bool
    #: Specifies the number of days each Message should be available via the [Messages Query](/../api/projects/messages) API. For Messages older than the specified period, it is not guaranteed that they are still accessible via the API.
    delete_days_after_creation: int

    def __init__(self, *, enabled: bool, delete_days_after_creation: int):
        self.enabled = enabled
        self.delete_days_after_creation = delete_days_after_creation

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "MessagesConfigurationDraft":
        from ._schemas.message import MessagesConfigurationDraftSchema

        return MessagesConfigurationDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import MessagesConfigurationDraftSchema

        return MessagesConfigurationDraftSchema().dump(self)


class OrderMessage(Message):
    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        type: str,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            type=type,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "OrderMessage":
        if data["type"] == "CustomLineItemStateTransition":
            from ._schemas.message import CustomLineItemStateTransitionMessageSchema

            return CustomLineItemStateTransitionMessageSchema().load(data)
        if data["type"] == "DeliveryAdded":
            from ._schemas.message import DeliveryAddedMessageSchema

            return DeliveryAddedMessageSchema().load(data)
        if data["type"] == "DeliveryAddressSet":
            from ._schemas.message import DeliveryAddressSetMessageSchema

            return DeliveryAddressSetMessageSchema().load(data)
        if data["type"] == "DeliveryItemsUpdated":
            from ._schemas.message import DeliveryItemsUpdatedMessageSchema

            return DeliveryItemsUpdatedMessageSchema().load(data)
        if data["type"] == "DeliveryRemoved":
            from ._schemas.message import DeliveryRemovedMessageSchema

            return DeliveryRemovedMessageSchema().load(data)
        if data["type"] == "LineItemStateTransition":
            from ._schemas.message import LineItemStateTransitionMessageSchema

            return LineItemStateTransitionMessageSchema().load(data)
        if data["type"] == "OrderBillingAddressSet":
            from ._schemas.message import OrderBillingAddressSetMessageSchema

            return OrderBillingAddressSetMessageSchema().load(data)
        if data["type"] == "OrderCreated":
            from ._schemas.message import OrderCreatedMessageSchema

            return OrderCreatedMessageSchema().load(data)
        if data["type"] == "OrderCustomLineItemAdded":
            from ._schemas.message import OrderCustomLineItemAddedMessageSchema

            return OrderCustomLineItemAddedMessageSchema().load(data)
        if data["type"] == "OrderCustomLineItemDiscountSet":
            from ._schemas.message import OrderCustomLineItemDiscountSetMessageSchema

            return OrderCustomLineItemDiscountSetMessageSchema().load(data)
        if data["type"] == "OrderCustomLineItemQuantityChanged":
            from ._schemas.message import (
                OrderCustomLineItemQuantityChangedMessageSchema,
            )

            return OrderCustomLineItemQuantityChangedMessageSchema().load(data)
        if data["type"] == "OrderCustomLineItemRemoved":
            from ._schemas.message import OrderCustomLineItemRemovedMessageSchema

            return OrderCustomLineItemRemovedMessageSchema().load(data)
        if data["type"] == "OrderCustomerEmailSet":
            from ._schemas.message import OrderCustomerEmailSetMessageSchema

            return OrderCustomerEmailSetMessageSchema().load(data)
        if data["type"] == "OrderCustomerGroupSet":
            from ._schemas.message import OrderCustomerGroupSetMessageSchema

            return OrderCustomerGroupSetMessageSchema().load(data)
        if data["type"] == "OrderCustomerSet":
            from ._schemas.message import OrderCustomerSetMessageSchema

            return OrderCustomerSetMessageSchema().load(data)
        if data["type"] == "OrderDeleted":
            from ._schemas.message import OrderDeletedMessageSchema

            return OrderDeletedMessageSchema().load(data)
        if data["type"] == "OrderDiscountCodeAdded":
            from ._schemas.message import OrderDiscountCodeAddedMessageSchema

            return OrderDiscountCodeAddedMessageSchema().load(data)
        if data["type"] == "OrderDiscountCodeRemoved":
            from ._schemas.message import OrderDiscountCodeRemovedMessageSchema

            return OrderDiscountCodeRemovedMessageSchema().load(data)
        if data["type"] == "OrderDiscountCodeStateSet":
            from ._schemas.message import OrderDiscountCodeStateSetMessageSchema

            return OrderDiscountCodeStateSetMessageSchema().load(data)
        if data["type"] == "OrderEditApplied":
            from ._schemas.message import OrderEditAppliedMessageSchema

            return OrderEditAppliedMessageSchema().load(data)
        if data["type"] == "OrderImported":
            from ._schemas.message import OrderImportedMessageSchema

            return OrderImportedMessageSchema().load(data)
        if data["type"] == "OrderLineItemAdded":
            from ._schemas.message import OrderLineItemAddedMessageSchema

            return OrderLineItemAddedMessageSchema().load(data)
        if data["type"] == "OrderLineItemDiscountSet":
            from ._schemas.message import OrderLineItemDiscountSetMessageSchema

            return OrderLineItemDiscountSetMessageSchema().load(data)
        if data["type"] == "OrderLineItemDistributionChannelSet":
            from ._schemas.message import (
                OrderLineItemDistributionChannelSetMessageSchema,
            )

            return OrderLineItemDistributionChannelSetMessageSchema().load(data)
        if data["type"] == "OrderLineItemRemoved":
            from ._schemas.message import OrderLineItemRemovedMessageSchema

            return OrderLineItemRemovedMessageSchema().load(data)
        if data["type"] == "OrderPaymentStateChanged":
            from ._schemas.message import OrderPaymentStateChangedMessageSchema

            return OrderPaymentStateChangedMessageSchema().load(data)
        if data["type"] == "OrderPurchaseOrderNumberSet":
            from ._schemas.message import OrderPurchaseOrderNumberSetMessageSchema

            return OrderPurchaseOrderNumberSetMessageSchema().load(data)
        if data["type"] == "OrderReturnShipmentStateChanged":
            from ._schemas.message import OrderReturnShipmentStateChangedMessageSchema

            return OrderReturnShipmentStateChangedMessageSchema().load(data)
        if data["type"] == "OrderShipmentStateChanged":
            from ._schemas.message import OrderShipmentStateChangedMessageSchema

            return OrderShipmentStateChangedMessageSchema().load(data)
        if data["type"] == "OrderShippingAddressSet":
            from ._schemas.message import OrderShippingAddressSetMessageSchema

            return OrderShippingAddressSetMessageSchema().load(data)
        if data["type"] == "OrderShippingInfoSet":
            from ._schemas.message import OrderShippingInfoSetMessageSchema

            return OrderShippingInfoSetMessageSchema().load(data)
        if data["type"] == "OrderShippingRateInputSet":
            from ._schemas.message import OrderShippingRateInputSetMessageSchema

            return OrderShippingRateInputSetMessageSchema().load(data)
        if data["type"] == "OrderStateChanged":
            from ._schemas.message import OrderStateChangedMessageSchema

            return OrderStateChangedMessageSchema().load(data)
        if data["type"] == "OrderStateTransition":
            from ._schemas.message import OrderStateTransitionMessageSchema

            return OrderStateTransitionMessageSchema().load(data)
        if data["type"] == "OrderStoreSet":
            from ._schemas.message import OrderStoreSetMessageSchema

            return OrderStoreSetMessageSchema().load(data)
        if data["type"] == "ParcelAddedToDelivery":
            from ._schemas.message import ParcelAddedToDeliveryMessageSchema

            return ParcelAddedToDeliveryMessageSchema().load(data)
        if data["type"] == "ParcelItemsUpdated":
            from ._schemas.message import ParcelItemsUpdatedMessageSchema

            return ParcelItemsUpdatedMessageSchema().load(data)
        if data["type"] == "ParcelMeasurementsUpdated":
            from ._schemas.message import ParcelMeasurementsUpdatedMessageSchema

            return ParcelMeasurementsUpdatedMessageSchema().load(data)
        if data["type"] == "ParcelRemovedFromDelivery":
            from ._schemas.message import ParcelRemovedFromDeliveryMessageSchema

            return ParcelRemovedFromDeliveryMessageSchema().load(data)
        if data["type"] == "ParcelTrackingDataUpdated":
            from ._schemas.message import ParcelTrackingDataUpdatedMessageSchema

            return ParcelTrackingDataUpdatedMessageSchema().load(data)
        if data["type"] == "ReturnInfoAdded":
            from ._schemas.message import ReturnInfoAddedMessageSchema

            return ReturnInfoAddedMessageSchema().load(data)
        if data["type"] == "ReturnInfoSet":
            from ._schemas.message import ReturnInfoSetMessageSchema

            return ReturnInfoSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderMessageSchema

        return OrderMessageSchema().dump(self)


class CustomLineItemStateTransitionMessage(OrderMessage):
    """Generated after a successful [Transition Custom Line Item State](ctp:api:type:OrderTransitionCustomLineItemStateAction) update action."""

    #: Unique identifier of the [Custom Line Item](ctp:api:type:CustomLineItem).
    custom_line_item_id: str
    #: Date and time (UTC) when the transition of the [Custom Line Item](ctp:api:type:CustomLineItem) [State](ctp:api:type:State) was performed.
    transition_date: datetime.datetime
    #: Number of [Custom Line Items](ctp:api:type:CustomLineItem) for which the [State](ctp:api:type:State) was transitioned.
    quantity: int
    #: [State](ctp:api:type:State) the [Custom Line Item](ctp:api:type:CustomLineItem) was transitioned from.
    from_state: "StateReference"
    #: [State](ctp:api:type:State) the [Custom Line Item](ctp:api:type:CustomLineItem) was transitioned to.
    to_state: "StateReference"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        custom_line_item_id: str,
        transition_date: datetime.datetime,
        quantity: int,
        from_state: "StateReference",
        to_state: "StateReference"
    ):
        self.custom_line_item_id = custom_line_item_id
        self.transition_date = transition_date
        self.quantity = quantity
        self.from_state = from_state
        self.to_state = to_state

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="CustomLineItemStateTransition",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomLineItemStateTransitionMessage":
        from ._schemas.message import CustomLineItemStateTransitionMessageSchema

        return CustomLineItemStateTransitionMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomLineItemStateTransitionMessageSchema

        return CustomLineItemStateTransitionMessageSchema().dump(self)


class DeliveryAddedMessage(OrderMessage):
    """Generated after a successful [Add Delivery](ctp:api:type:OrderAddDeliveryAction) update action."""

    #: [Delivery](ctp:api:type:Delivery) that was added to the [Order](ctp:api:type:Order). The [Delivery](ctp:api:type:Delivery) in the Message body does not contain [Parcels](ctp:api:type:Parcel) if those were part of the initial [Add Delivery](ctp:api:type:OrderAddDeliveryAction) update action. In that case, the update action produces an additional [ParcelAddedToDelivery](ctp:api:type:ParcelAddedToDeliveryMessage) Message containing information about the [Parcels](ctp:api:type:Parcel).
    delivery: "Delivery"
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        delivery: "Delivery",
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery = delivery
        self.shipping_key = shipping_key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="DeliveryAdded",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "DeliveryAddedMessage":
        from ._schemas.message import DeliveryAddedMessageSchema

        return DeliveryAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import DeliveryAddedMessageSchema

        return DeliveryAddedMessageSchema().dump(self)


class DeliveryAddressSetMessage(OrderMessage):
    """Generated after a successful [Set Delivery Address](ctp:api:type:OrderSetDeliveryAddressAction) update action."""

    #: Unique identifier of the [Parcel](ctp:api:type:Delivery).
    delivery_id: str
    #: [Address](ctp:api:type:Address) after the [Set Delivery Address](ctp:api:type:OrderSetDeliveryAddressAction) update action.
    address: typing.Optional["Address"]
    #: [Address](ctp:api:type:Address) before the [Set Delivery Address](ctp:api:type:OrderSetDeliveryAddressAction) update action.
    old_address: typing.Optional["Address"]
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        delivery_id: str,
        address: typing.Optional["Address"] = None,
        old_address: typing.Optional["Address"] = None,
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery_id = delivery_id
        self.address = address
        self.old_address = old_address
        self.shipping_key = shipping_key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="DeliveryAddressSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "DeliveryAddressSetMessage":
        from ._schemas.message import DeliveryAddressSetMessageSchema

        return DeliveryAddressSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import DeliveryAddressSetMessageSchema

        return DeliveryAddressSetMessageSchema().dump(self)


class DeliveryItemsUpdatedMessage(OrderMessage):
    """Generated after a successful [Set Delivery Items](ctp:api:type:OrderSetDeliveryItemsAction) update action."""

    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery_id: str
    #: [Delivery Items](ctp:api:type:DeliveryItem) after the [Set Delivery Items](ctp:api:type:OrderSetDeliveryItemsAction) update action.
    items: typing.List["DeliveryItem"]
    #: [Delivery Items](ctp:api:type:DeliveryItem) before the [Set Delivery Items](ctp:api:type:OrderSetDeliveryItemsAction) update action.
    old_items: typing.List["DeliveryItem"]
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        delivery_id: str,
        items: typing.List["DeliveryItem"],
        old_items: typing.List["DeliveryItem"],
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery_id = delivery_id
        self.items = items
        self.old_items = old_items
        self.shipping_key = shipping_key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="DeliveryItemsUpdated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "DeliveryItemsUpdatedMessage":
        from ._schemas.message import DeliveryItemsUpdatedMessageSchema

        return DeliveryItemsUpdatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import DeliveryItemsUpdatedMessageSchema

        return DeliveryItemsUpdatedMessageSchema().dump(self)


class DeliveryRemovedMessage(OrderMessage):
    """Generated after a successful [Remove Delivery](ctp:api:type:OrderRemoveDeliveryAction) update action."""

    #: The [Delivery](ctp:api:type:Delivery) that was removed from the [Order](ctp:api:type:Order).
    delivery: "Delivery"
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        delivery: "Delivery",
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery = delivery
        self.shipping_key = shipping_key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="DeliveryRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "DeliveryRemovedMessage":
        from ._schemas.message import DeliveryRemovedMessageSchema

        return DeliveryRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import DeliveryRemovedMessageSchema

        return DeliveryRemovedMessageSchema().dump(self)


class LineItemStateTransitionMessage(OrderMessage):
    """Generated after a successful [Transition Line Item State](ctp:api:type:OrderTransitionLineItemStateAction) update action."""

    #: Unique identifier of the [Line Item](ctp:api:type:LineItem).
    line_item_id: str
    #: Date and time (UTC) when the transition of the [Line Item](ctp:api:type:LineItem) [State](ctp:api:type:State) was performed.
    transition_date: datetime.datetime
    #: Number of [Line Items](ctp:api:type:LineItem) for which the [State](ctp:api:type:State) was transitioned.
    quantity: int
    #: [State](ctp:api:type:State) the [Line Item](ctp:api:type:LineItem) was transitioned from.
    from_state: "StateReference"
    #: [State](ctp:api:type:State) the [Line Item](ctp:api:type:LineItem) was transitioned to.
    to_state: "StateReference"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        line_item_id: str,
        transition_date: datetime.datetime,
        quantity: int,
        from_state: "StateReference",
        to_state: "StateReference"
    ):
        self.line_item_id = line_item_id
        self.transition_date = transition_date
        self.quantity = quantity
        self.from_state = from_state
        self.to_state = to_state

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="LineItemStateTransition",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "LineItemStateTransitionMessage":
        from ._schemas.message import LineItemStateTransitionMessageSchema

        return LineItemStateTransitionMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import LineItemStateTransitionMessageSchema

        return LineItemStateTransitionMessageSchema().dump(self)


class OrderBillingAddressSetMessage(OrderMessage):
    """Generated after a successful [Set Billing Address](ctp:api:type:OrderSetBillingAddressAction) update action."""

    #: Billing address on the Order after the [Set Billing Address](ctp:api:type:OrderSetBillingAddressAction) update action.
    address: typing.Optional["Address"]
    #: Billing address on the Order before the [Set Billing Address](ctp:api:type:OrderSetBillingAddressAction) update action.
    old_address: typing.Optional["Address"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: typing.Optional["Address"] = None,
        old_address: typing.Optional["Address"] = None
    ):
        self.address = address
        self.old_address = old_address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderBillingAddressSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderBillingAddressSetMessage":
        from ._schemas.message import OrderBillingAddressSetMessageSchema

        return OrderBillingAddressSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderBillingAddressSetMessageSchema

        return OrderBillingAddressSetMessageSchema().dump(self)


class OrderCreatedMessage(OrderMessage):
    """Generated after a successful [Create Order](/../api/projects/orders#create-order) request."""

    #: [Order](ctp:api:type:Order) that was created.
    order: "Order"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        order: "Order"
    ):
        self.order = order

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderCreated",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "OrderCreatedMessage":
        from ._schemas.message import OrderCreatedMessageSchema

        return OrderCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCreatedMessageSchema

        return OrderCreatedMessageSchema().dump(self)


class OrderCustomLineItemAddedMessage(OrderMessage):
    """Generated after a successful [Add Custom Line Item](ctp:api:type:StagedOrderAddCustomLineItemAction) update action."""

    #: [Custom Line Item](ctp:api:type:CustomLineItem) that was added to the [Order](ctp:api:type:Order).
    custom_line_item: "CustomLineItem"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        custom_line_item: "CustomLineItem"
    ):
        self.custom_line_item = custom_line_item

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderCustomLineItemAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomLineItemAddedMessage":
        from ._schemas.message import OrderCustomLineItemAddedMessageSchema

        return OrderCustomLineItemAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomLineItemAddedMessageSchema

        return OrderCustomLineItemAddedMessageSchema().dump(self)


class OrderCustomLineItemDiscountSetMessage(OrderMessage):
    """Generated after a successful recalculation of a Discount on a [Custom Line Item](ctp:api:type:CustomLineItem)."""

    #: Unique identifier for the [Custom Line Item](ctp:api:type:CustomLineItem).
    custom_line_item_id: str
    #: Array of [DiscountedLineItemPriceForQuantity](ctp:api:type:DiscountedLineItemPriceForQuantity) after the Discount recalculation.
    discounted_price_per_quantity: typing.List["DiscountedLineItemPriceForQuantity"]
    #: [TaxedItemPrice](ctp:api:type:TaxedItemPrice) of the [Custom Line Item](ctp:api:type:CustomLineItem) after the Discount recalculation.
    taxed_price: typing.Optional["TaxedItemPrice"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        custom_line_item_id: str,
        discounted_price_per_quantity: typing.List[
            "DiscountedLineItemPriceForQuantity"
        ],
        taxed_price: typing.Optional["TaxedItemPrice"] = None
    ):
        self.custom_line_item_id = custom_line_item_id
        self.discounted_price_per_quantity = discounted_price_per_quantity
        self.taxed_price = taxed_price

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderCustomLineItemDiscountSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomLineItemDiscountSetMessage":
        from ._schemas.message import OrderCustomLineItemDiscountSetMessageSchema

        return OrderCustomLineItemDiscountSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomLineItemDiscountSetMessageSchema

        return OrderCustomLineItemDiscountSetMessageSchema().dump(self)


class OrderCustomLineItemQuantityChangedMessage(OrderMessage):
    """Generated after a successful [Change Custom Line Item Quantity](ctp:api:type:StagedOrderChangeCustomLineItemQuantityAction) update action."""

    #: Unique identifier of the [Custom Line Item](ctp:api:type:CustomLineItem).
    custom_line_item_id: str
    #: [Custom Line Item](ctp:api:type:CustomLineItem) quantity after the [Change Custom Line Item Quantity](ctp:api:type:StagedOrderChangeCustomLineItemQuantityAction) update action.
    quantity: int
    #: [Custom Line Item](ctp:api:type:CustomLineItem) quantity before the [Change Custom Line Item Quantity](ctp:api:type:StagedOrderChangeCustomLineItemQuantityAction) update action.
    old_quantity: int

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        custom_line_item_id: str,
        quantity: int,
        old_quantity: int
    ):
        self.custom_line_item_id = custom_line_item_id
        self.quantity = quantity
        self.old_quantity = old_quantity

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderCustomLineItemQuantityChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomLineItemQuantityChangedMessage":
        from ._schemas.message import OrderCustomLineItemQuantityChangedMessageSchema

        return OrderCustomLineItemQuantityChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomLineItemQuantityChangedMessageSchema

        return OrderCustomLineItemQuantityChangedMessageSchema().dump(self)


class OrderCustomLineItemRemovedMessage(OrderMessage):
    """Generated after a successful [Remove Custom Line Item](ctp:api:type:StagedOrderRemoveCustomLineItemAction) update action."""

    #: Unique identifier of the [Custom Line Item](ctp:api:type:CustomLineItem).
    custom_line_item_id: str
    #: [Custom Line Item](ctp:api:type:CustomLineItem) that was removed from the [Order](ctp:api:type:Order).
    custom_line_item: "CustomLineItem"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        custom_line_item_id: str,
        custom_line_item: "CustomLineItem"
    ):
        self.custom_line_item_id = custom_line_item_id
        self.custom_line_item = custom_line_item

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderCustomLineItemRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomLineItemRemovedMessage":
        from ._schemas.message import OrderCustomLineItemRemovedMessageSchema

        return OrderCustomLineItemRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomLineItemRemovedMessageSchema

        return OrderCustomLineItemRemovedMessageSchema().dump(self)


class OrderCustomerEmailSetMessage(OrderMessage):
    """Generated after a successful [Set Customer Email](ctp:api:type:OrderSetCustomerEmailAction) update action."""

    #: Email address on the [Order](ctp:api:type:Order) after the [Set Customer Email](ctp:api:type:OrderSetCustomerEmailAction) update action.
    email: typing.Optional[str]
    #: Email address on the [Order](ctp:api:type:Order) before the [Set Customer Email](ctp:api:type:OrderSetCustomerEmailAction) update action.
    old_email: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        email: typing.Optional[str] = None,
        old_email: typing.Optional[str] = None
    ):
        self.email = email
        self.old_email = old_email

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderCustomerEmailSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomerEmailSetMessage":
        from ._schemas.message import OrderCustomerEmailSetMessageSchema

        return OrderCustomerEmailSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomerEmailSetMessageSchema

        return OrderCustomerEmailSetMessageSchema().dump(self)


class OrderCustomerGroupSetMessage(OrderMessage):
    """Generated after a successful [Set Customer Group](ctp:api:type:StagedOrderSetCustomerGroupAction) update action."""

    #: [CustomerGroup](ctp:api:type:CustomerGroup) on the [Order](ctp:api:type:Order) after the [Set Customer Group](ctp:api:type:StagedOrderSetCustomerGroupAction) update action.
    customer_group: typing.Optional["CustomerGroupReference"]
    #: [CustomerGroup](ctp:api:type:CustomerGroup) on the [Order](ctp:api:type:Order) before the [Set Customer Group](ctp:api:type:StagedOrderSetCustomerGroupAction) update action.
    old_customer_group: typing.Optional["CustomerGroupReference"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        old_customer_group: typing.Optional["CustomerGroupReference"] = None
    ):
        self.customer_group = customer_group
        self.old_customer_group = old_customer_group

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderCustomerGroupSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomerGroupSetMessage":
        from ._schemas.message import OrderCustomerGroupSetMessageSchema

        return OrderCustomerGroupSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomerGroupSetMessageSchema

        return OrderCustomerGroupSetMessageSchema().dump(self)


class OrderCustomerSetMessage(OrderMessage):
    """Generated after a successful [Set Customer Id](ctp:api:type:OrderSetCustomerIdAction) update action."""

    #: [Customer](ctp:api:type:Customer) on the [Order](ctp:api:type:Order) after the [Set Customer Id](ctp:api:type:OrderSetCustomerIdAction) update action.
    customer: typing.Optional["CustomerReference"]
    #: [CustomerGroup](ctp:api:type:CustomerGroup) on the [Order](ctp:api:type:Order) after the [Set Customer Id](ctp:api:type:OrderSetCustomerIdAction) update action.
    customer_group: typing.Optional["CustomerGroupReference"]
    #: [Customer](ctp:api:type:Customer) on the [Order](ctp:api:type:Order) before the [Set Customer Id](ctp:api:type:OrderSetCustomerIdAction) update action.
    old_customer: typing.Optional["CustomerReference"]
    #: [CustomerGroup](ctp:api:type:CustomerGroup) on the [Order](ctp:api:type:Order) before the [Set Customer Id](ctp:api:type:OrderSetCustomerIdAction) update action.
    old_customer_group: typing.Optional["CustomerGroupReference"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        customer: typing.Optional["CustomerReference"] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        old_customer: typing.Optional["CustomerReference"] = None,
        old_customer_group: typing.Optional["CustomerGroupReference"] = None
    ):
        self.customer = customer
        self.customer_group = customer_group
        self.old_customer = old_customer
        self.old_customer_group = old_customer_group

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderCustomerSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomerSetMessage":
        from ._schemas.message import OrderCustomerSetMessageSchema

        return OrderCustomerSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomerSetMessageSchema

        return OrderCustomerSetMessageSchema().dump(self)


class OrderDeletedMessage(OrderMessage):
    """Generated after a successful [Delete Order](/../api/projects/orders#delete-order) request."""

    #: [Order](ctp:api:type:Order) that has been deleted.
    order: "Order"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        order: "Order"
    ):
        self.order = order

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderDeleted",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "OrderDeletedMessage":
        from ._schemas.message import OrderDeletedMessageSchema

        return OrderDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderDeletedMessageSchema

        return OrderDeletedMessageSchema().dump(self)


class OrderDiscountCodeAddedMessage(OrderMessage):
    """Generated after a successful [Add Discount Code](ctp:api:type:StagedOrderAddDiscountCodeAction) update action."""

    #: [DiscountCode](ctp:api:type:DiscountCode) that was added.
    discount_code: "DiscountCodeReference"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        discount_code: "DiscountCodeReference"
    ):
        self.discount_code = discount_code

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderDiscountCodeAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderDiscountCodeAddedMessage":
        from ._schemas.message import OrderDiscountCodeAddedMessageSchema

        return OrderDiscountCodeAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderDiscountCodeAddedMessageSchema

        return OrderDiscountCodeAddedMessageSchema().dump(self)


class OrderDiscountCodeRemovedMessage(OrderMessage):
    """Generated after a successful [Remove Discount Code](ctp:api:type:StagedOrderRemoveDiscountCodeAction) update action."""

    #: [DiscountCode](ctp:api:type:DiscountCode) that was removed.
    discount_code: "DiscountCodeReference"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        discount_code: "DiscountCodeReference"
    ):
        self.discount_code = discount_code

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderDiscountCodeRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderDiscountCodeRemovedMessage":
        from ._schemas.message import OrderDiscountCodeRemovedMessageSchema

        return OrderDiscountCodeRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderDiscountCodeRemovedMessageSchema

        return OrderDiscountCodeRemovedMessageSchema().dump(self)


class OrderDiscountCodeStateSetMessage(OrderMessage):
    """Generated after the [DiscountCodeState](ctp:api:type:DiscountCodeState) changes due to a [recalculation](/../api/projects/carts#recalculate)."""

    #: [DiscountCode](ctp:api:type:DiscountCode) that changed due to the recalculation.
    discount_code: "DiscountCodeReference"
    #: [DiscountCodeState](ctp:api:type:DiscountCodeState) after the recalculation.
    state: "DiscountCodeState"
    #: [DiscountCodeState](ctp:api:type:DiscountCodeState) before the recalculation.
    old_state: typing.Optional["DiscountCodeState"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        discount_code: "DiscountCodeReference",
        state: "DiscountCodeState",
        old_state: typing.Optional["DiscountCodeState"] = None
    ):
        self.discount_code = discount_code
        self.state = state
        self.old_state = old_state

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderDiscountCodeStateSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderDiscountCodeStateSetMessage":
        from ._schemas.message import OrderDiscountCodeStateSetMessageSchema

        return OrderDiscountCodeStateSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderDiscountCodeStateSetMessageSchema

        return OrderDiscountCodeStateSetMessageSchema().dump(self)


class OrderEditAppliedMessage(OrderMessage):
    """Generated after a successfully applying an [OrderEdit](/../api/projects/order-edits#apply-an-orderedit)."""

    #: [OrderEdit](ctp:api:type:OrderEdit) that was applied.
    edit: "OrderEdit"
    #: Information about a successfully applied [OrderEdit](ctp:api:type:OrderEdit).
    result: "OrderEditApplied"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        edit: "OrderEdit",
        result: "OrderEditApplied"
    ):
        self.edit = edit
        self.result = result

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderEditApplied",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderEditAppliedMessage":
        from ._schemas.message import OrderEditAppliedMessageSchema

        return OrderEditAppliedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderEditAppliedMessageSchema

        return OrderEditAppliedMessageSchema().dump(self)


class OrderImportedMessage(OrderMessage):
    """Generated after a successful [Order Import](/../api/projects/orders-import#create-an-order-by-import)."""

    #: [Order](ctp:api:type:Order) that was imported.
    order: "Order"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        order: "Order"
    ):
        self.order = order

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderImported",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "OrderImportedMessage":
        from ._schemas.message import OrderImportedMessageSchema

        return OrderImportedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderImportedMessageSchema

        return OrderImportedMessageSchema().dump(self)


class OrderLineItemAddedMessage(OrderMessage):
    """Generated after a successful [Add Line Item](ctp:api:type:StagedOrderAddLineItemAction) update action."""

    #: [Line Item](ctp:api:type:LineItem) that was added to the [Order](ctp:api:type:Order).
    line_item: "LineItem"
    #: Quantity of [Line Items](ctp:api:type:LineItem) that were added to the [Order](ctp:api:type:Order).
    added_quantity: int

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        line_item: "LineItem",
        added_quantity: int
    ):
        self.line_item = line_item
        self.added_quantity = added_quantity

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderLineItemAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderLineItemAddedMessage":
        from ._schemas.message import OrderLineItemAddedMessageSchema

        return OrderLineItemAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderLineItemAddedMessageSchema

        return OrderLineItemAddedMessageSchema().dump(self)


class OrderLineItemDiscountSetMessage(OrderMessage):
    """Generated after a successful recalculation of a Discount on a [Line Item](ctp:api:type:LineItem)."""

    #: Unique identifier for the [Line Item](ctp:api:type:LineItem).
    line_item_id: str
    #: Array of [DiscountedLineItemPriceForQuantity](ctp:api:type:DiscountedLineItemPriceForQuantity) after the Discount recalculation.
    discounted_price_per_quantity: typing.List["DiscountedLineItemPriceForQuantity"]
    #: Total Price of the [Line Item](ctp:api:type:LineItem) after the Discount recalculation.
    total_price: "Money"
    #: [TaxedItemPrice](ctp:api:type:TaxedItemPrice) of the [Line Item](ctp:api:type:LineItem) after the Discount recalculation.
    taxed_price: typing.Optional["TaxedItemPrice"]
    #: Taxed price of the Shipping Methods in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    taxed_price_portions: typing.List["MethodTaxedPrice"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        line_item_id: str,
        discounted_price_per_quantity: typing.List[
            "DiscountedLineItemPriceForQuantity"
        ],
        total_price: "Money",
        taxed_price: typing.Optional["TaxedItemPrice"] = None,
        taxed_price_portions: typing.List["MethodTaxedPrice"]
    ):
        self.line_item_id = line_item_id
        self.discounted_price_per_quantity = discounted_price_per_quantity
        self.total_price = total_price
        self.taxed_price = taxed_price
        self.taxed_price_portions = taxed_price_portions

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderLineItemDiscountSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderLineItemDiscountSetMessage":
        from ._schemas.message import OrderLineItemDiscountSetMessageSchema

        return OrderLineItemDiscountSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderLineItemDiscountSetMessageSchema

        return OrderLineItemDiscountSetMessageSchema().dump(self)


class OrderLineItemDistributionChannelSetMessage(OrderMessage):
    """Generated after a successful [Set Line Item Distribution Channel](/../api/projects/order-edits#set-lineitem-distributionchannel) update action."""

    #: Unique identifier of the [Line Item](ctp:api:type:LineItem).
    line_item_id: str
    #: [Distribution Channel](ctp:api:type:Channel) that was set.
    distribution_channel: typing.Optional["ChannelReference"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        line_item_id: str,
        distribution_channel: typing.Optional["ChannelReference"] = None
    ):
        self.line_item_id = line_item_id
        self.distribution_channel = distribution_channel

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderLineItemDistributionChannelSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderLineItemDistributionChannelSetMessage":
        from ._schemas.message import OrderLineItemDistributionChannelSetMessageSchema

        return OrderLineItemDistributionChannelSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderLineItemDistributionChannelSetMessageSchema

        return OrderLineItemDistributionChannelSetMessageSchema().dump(self)


class OrderLineItemRemovedMessage(OrderMessage):
    """Generated after a successful [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action."""

    #: Unique identifier of the [Line Item](ctp:api:type:LineItem).
    line_item_id: str
    #: Quantity of [Line Items](ctp:api:type:LineItem) that were removed during the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    removed_quantity: int
    #: [Line Item](ctp:api:type:LineItem) quantity after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_quantity: int
    #: [ItemStates](ctp:api:type:ItemState) after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_state: typing.List["ItemState"]
    #: `totalPrice` of the [Order](ctp:api:type:Order) after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_total_price: "CentPrecisionMoney"
    #: [TaxedItemPrice](ctp:api:type:TaxedItemPrice) of the [Order](ctp:api:type:Order) after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_taxed_price: typing.Optional["TaxedItemPrice"]
    #: [Price](ctp:api:type:Price) of the [Order](ctp:api:type:Order) after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_price: typing.Optional["Price"]
    #: [Shipping Details](ctp:api:type:ItemShippingDetails) of the [Order](ctp:api:type:Order) after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_shipping_detail: typing.Optional["ItemShippingDetails"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        line_item_id: str,
        removed_quantity: int,
        new_quantity: int,
        new_state: typing.List["ItemState"],
        new_total_price: "CentPrecisionMoney",
        new_taxed_price: typing.Optional["TaxedItemPrice"] = None,
        new_price: typing.Optional["Price"] = None,
        new_shipping_detail: typing.Optional["ItemShippingDetails"] = None
    ):
        self.line_item_id = line_item_id
        self.removed_quantity = removed_quantity
        self.new_quantity = new_quantity
        self.new_state = new_state
        self.new_total_price = new_total_price
        self.new_taxed_price = new_taxed_price
        self.new_price = new_price
        self.new_shipping_detail = new_shipping_detail

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderLineItemRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderLineItemRemovedMessage":
        from ._schemas.message import OrderLineItemRemovedMessageSchema

        return OrderLineItemRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderLineItemRemovedMessageSchema

        return OrderLineItemRemovedMessageSchema().dump(self)


class OrderPaymentAddedMessage(Message):
    """Generated after a successful [Add Payment](ctp:api:type:OrderAddPaymentAction) update action or when a [Payment](ctp:api:type:Payment) is added via [Order Edits](ctp:api:type:StagedOrderAddPaymentAction)."""

    #: [Payment](ctp:api:type:Payment) that was added to the [Order](ctp:api:type:Order).
    payment: "PaymentReference"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        payment: "PaymentReference"
    ):
        self.payment = payment

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderPaymentAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderPaymentAddedMessage":
        from ._schemas.message import OrderPaymentAddedMessageSchema

        return OrderPaymentAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderPaymentAddedMessageSchema

        return OrderPaymentAddedMessageSchema().dump(self)


class OrderPaymentStateChangedMessage(OrderMessage):
    """Generated after a successful [Change Payment State](ctp:api:type:OrderChangePaymentStateAction) update action."""

    #: [PaymentState](ctp:api:type:PaymentState) after the [Change Payment State](ctp:api:type:OrderChangePaymentStateAction) update action.
    payment_state: "PaymentState"
    #: [PaymentState](ctp:api:type:PaymentState) before the [Change Payment State](ctp:api:type:OrderChangePaymentStateAction) update action.
    old_payment_state: typing.Optional["PaymentState"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        payment_state: "PaymentState",
        old_payment_state: typing.Optional["PaymentState"] = None
    ):
        self.payment_state = payment_state
        self.old_payment_state = old_payment_state

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderPaymentStateChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderPaymentStateChangedMessage":
        from ._schemas.message import OrderPaymentStateChangedMessageSchema

        return OrderPaymentStateChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderPaymentStateChangedMessageSchema

        return OrderPaymentStateChangedMessageSchema().dump(self)


class OrderPurchaseOrderNumberSetMessage(OrderMessage):
    """Generated after a successful [Set PurchaseOrderNumber](/../api/projects/orders#set-purchase-order-number) update action."""

    #: Purchase order number on the [Order](ctp:api:type:Order) after the [Set PurchaseOrderNumber](/../api/projects/orders#set-purchase-order-number) update action.
    purchase_order_number: typing.Optional[str]
    #: Purchase order number on the [Order](ctp:api:type:Order) before the [Set PurchaseOrderNumber](/../api/projects/orders#set-purchase-order-number) update action.
    old_purchase_order_number: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        purchase_order_number: typing.Optional[str] = None,
        old_purchase_order_number: typing.Optional[str] = None
    ):
        self.purchase_order_number = purchase_order_number
        self.old_purchase_order_number = old_purchase_order_number

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderPurchaseOrderNumberSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderPurchaseOrderNumberSetMessage":
        from ._schemas.message import OrderPurchaseOrderNumberSetMessageSchema

        return OrderPurchaseOrderNumberSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderPurchaseOrderNumberSetMessageSchema

        return OrderPurchaseOrderNumberSetMessageSchema().dump(self)


class OrderReturnShipmentStateChangedMessage(OrderMessage):
    """Generated after a successful [Set Return Shipment State](ctp:api:type:OrderSetReturnShipmentStateAction) update action."""

    #: Unique identifier of the [ReturnItem](ctp:api:type:ReturnItem).
    return_item_id: str
    #: State of the [ReturnItem](ctp:api:type:ReturnItem) after the [Set Return Shipment State](ctp:api:type:OrderSetReturnShipmentStateAction) update action.
    return_shipment_state: "ReturnShipmentState"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        return_item_id: str,
        return_shipment_state: "ReturnShipmentState"
    ):
        self.return_item_id = return_item_id
        self.return_shipment_state = return_shipment_state

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderReturnShipmentStateChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderReturnShipmentStateChangedMessage":
        from ._schemas.message import OrderReturnShipmentStateChangedMessageSchema

        return OrderReturnShipmentStateChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderReturnShipmentStateChangedMessageSchema

        return OrderReturnShipmentStateChangedMessageSchema().dump(self)


class OrderShipmentStateChangedMessage(OrderMessage):
    """Generated after a successful [Change Shipment State](ctp:api:type:OrderChangeShipmentStateAction) update action."""

    #: [ShipmentState](ctp:api:type:ShipmentState) after the [Change Shipment State](ctp:api:type:OrderChangeShipmentStateAction) update action.
    shipment_state: "ShipmentState"
    #: [ShipmentState](ctp:api:type:ShipmentState) before the [Change Shipment State](ctp:api:type:OrderChangeShipmentStateAction) update action.
    old_shipment_state: "ShipmentState"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        shipment_state: "ShipmentState",
        old_shipment_state: "ShipmentState"
    ):
        self.shipment_state = shipment_state
        self.old_shipment_state = old_shipment_state

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderShipmentStateChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderShipmentStateChangedMessage":
        from ._schemas.message import OrderShipmentStateChangedMessageSchema

        return OrderShipmentStateChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderShipmentStateChangedMessageSchema

        return OrderShipmentStateChangedMessageSchema().dump(self)


class OrderShippingAddressSetMessage(OrderMessage):
    """Generated after a successful [Set Shipping Address](ctp:api:type:OrderSetShippingAddressAction) update action."""

    #: Shipping address on the Order after the [Set Shipping Address](ctp:api:type:OrderSetShippingAddressAction) update action.
    address: typing.Optional["Address"]
    #: Shipping address on the Order before the [Set Shipping Address](ctp:api:type:OrderSetShippingAddressAction) update action.
    old_address: typing.Optional["Address"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        address: typing.Optional["Address"] = None,
        old_address: typing.Optional["Address"] = None
    ):
        self.address = address
        self.old_address = old_address

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderShippingAddressSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderShippingAddressSetMessage":
        from ._schemas.message import OrderShippingAddressSetMessageSchema

        return OrderShippingAddressSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderShippingAddressSetMessageSchema

        return OrderShippingAddressSetMessageSchema().dump(self)


class OrderShippingInfoSetMessage(OrderMessage):
    """Generated after a successful [Set Shipping Method](ctp:api:type:StagedOrderSetShippingMethodAction) and [Set Custom Shipping Method](ctp:api:type:StagedOrderSetCustomShippingMethodAction) update actions."""

    #: [ShippingInfo](ctp:api:type:ShippingInfo) after the [Set Shipping Method](ctp:api:type:StagedOrderSetShippingMethodAction) or [Set Custom Shipping Method](ctp:api:type:StagedOrderSetCustomShippingMethodAction) update action.
    shipping_info: typing.Optional["ShippingInfo"]
    #: [ShippingInfo](ctp:api:type:ShippingInfo) before the [Set Shipping Method](ctp:api:type:StagedOrderSetShippingMethodAction) or [Set Custom Shipping Method](ctp:api:type:StagedOrderSetCustomShippingMethodAction) update action.
    old_shipping_info: typing.Optional["ShippingInfo"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        shipping_info: typing.Optional["ShippingInfo"] = None,
        old_shipping_info: typing.Optional["ShippingInfo"] = None
    ):
        self.shipping_info = shipping_info
        self.old_shipping_info = old_shipping_info

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderShippingInfoSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderShippingInfoSetMessage":
        from ._schemas.message import OrderShippingInfoSetMessageSchema

        return OrderShippingInfoSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderShippingInfoSetMessageSchema

        return OrderShippingInfoSetMessageSchema().dump(self)


class OrderShippingRateInputSetMessage(OrderMessage):
    """Generated after a successful [Set ShippingRateInput](ctp:api:type:StagedOrderSetShippingRateInputAction) update action."""

    #: [ShippingRateInput](ctp:api:type:ShippingRateInput) after the [Set ShippingRateInput](ctp:api:type:StagedOrderSetShippingRateInputAction) update action.
    shipping_rate_input: typing.Optional["ShippingRateInput"]
    #: [ShippingRateInput](ctp:api:type:ShippingRateInput) before the [Set ShippingRateInput](ctp:api:type:StagedOrderSetShippingRateInputAction) update action.
    old_shipping_rate_input: typing.Optional["ShippingRateInput"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        shipping_rate_input: typing.Optional["ShippingRateInput"] = None,
        old_shipping_rate_input: typing.Optional["ShippingRateInput"] = None
    ):
        self.shipping_rate_input = shipping_rate_input
        self.old_shipping_rate_input = old_shipping_rate_input

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderShippingRateInputSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderShippingRateInputSetMessage":
        from ._schemas.message import OrderShippingRateInputSetMessageSchema

        return OrderShippingRateInputSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderShippingRateInputSetMessageSchema

        return OrderShippingRateInputSetMessageSchema().dump(self)


class OrderStateChangedMessage(OrderMessage):
    """Generated after a successful [Change Order State](ctp:api:type:OrderChangeOrderStateAction) update action."""

    #: [OrderState](ctp:api:type:OrderState) after the [Change Order State](ctp:api:type:OrderChangeOrderStateAction) update action.
    order_state: "OrderState"
    #: [OrderState](ctp:api:type:OrderState) before the [Change Order State](ctp:api:type:OrderChangeOrderStateAction) update action.
    old_order_state: "OrderState"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        order_state: "OrderState",
        old_order_state: "OrderState"
    ):
        self.order_state = order_state
        self.old_order_state = old_order_state

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderStateChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderStateChangedMessage":
        from ._schemas.message import OrderStateChangedMessageSchema

        return OrderStateChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderStateChangedMessageSchema

        return OrderStateChangedMessageSchema().dump(self)


class OrderStateTransitionMessage(OrderMessage):
    """Generated after a successful [Transition State](ctp:api:type:OrderTransitionStateAction) update action."""

    #: [OrderState](ctp:api:type:OrderState) after the [Transition State](ctp:api:type:OrderTransitionStateAction) update action.
    state: "StateReference"
    #: [OrderState](ctp:api:type:OrderState) before the [Transition State](ctp:api:type:OrderTransitionStateAction) update action.
    old_state: typing.Optional["StateReference"]
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:OrderTransitionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        state: "StateReference",
        old_state: typing.Optional["StateReference"] = None,
        force: bool
    ):
        self.state = state
        self.old_state = old_state
        self.force = force

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderStateTransition",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderStateTransitionMessage":
        from ._schemas.message import OrderStateTransitionMessageSchema

        return OrderStateTransitionMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderStateTransitionMessageSchema

        return OrderStateTransitionMessageSchema().dump(self)


class OrderStoreSetMessage(OrderMessage):
    """Generated after a successful [Set Store](ctp:api:type:OrderSetStoreAction) update action."""

    #: [Store](ctp:api:type:Store) that was set.
    store: typing.Optional["StoreKeyReference"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        store: typing.Optional["StoreKeyReference"] = None
    ):
        self.store = store

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="OrderStoreSet",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "OrderStoreSetMessage":
        from ._schemas.message import OrderStoreSetMessageSchema

        return OrderStoreSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderStoreSetMessageSchema

        return OrderStoreSetMessageSchema().dump(self)


class ParcelAddedToDeliveryMessage(OrderMessage):
    """Generated after a successful [Add Parcel To Delivery](ctp:api:type:OrderAddParcelToDeliveryAction) update action."""

    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery: "Delivery"
    #: [Parcel](ctp:api:type:Parcel) that was added to the [Delivery](ctp:api:type:Delivery).
    parcel: "Parcel"
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        delivery: "Delivery",
        parcel: "Parcel",
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery = delivery
        self.parcel = parcel
        self.shipping_key = shipping_key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ParcelAddedToDelivery",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ParcelAddedToDeliveryMessage":
        from ._schemas.message import ParcelAddedToDeliveryMessageSchema

        return ParcelAddedToDeliveryMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ParcelAddedToDeliveryMessageSchema

        return ParcelAddedToDeliveryMessageSchema().dump(self)


class ParcelItemsUpdatedMessage(OrderMessage):
    """Generated after a successful [Set Parcel Items](ctp:api:type:OrderSetParcelItemsAction) update action."""

    #: Unique identifier of the [Parcel](ctp:api:type:Parcel).
    parcel_id: str
    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery_id: str
    #: [Delivery Items](ctp:api:type:DeliveryItem) after the [Set Parcel Items](ctp:api:type:OrderSetParcelItemsAction) update action.
    items: typing.List["DeliveryItem"]
    #: [Delivery Items](ctp:api:type:DeliveryItem) before the [Set Parcel Items](ctp:api:type:OrderSetParcelItemsAction) update action.
    old_items: typing.List["DeliveryItem"]
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        parcel_id: str,
        delivery_id: str,
        items: typing.List["DeliveryItem"],
        old_items: typing.List["DeliveryItem"],
        shipping_key: typing.Optional[str] = None
    ):
        self.parcel_id = parcel_id
        self.delivery_id = delivery_id
        self.items = items
        self.old_items = old_items
        self.shipping_key = shipping_key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ParcelItemsUpdated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ParcelItemsUpdatedMessage":
        from ._schemas.message import ParcelItemsUpdatedMessageSchema

        return ParcelItemsUpdatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ParcelItemsUpdatedMessageSchema

        return ParcelItemsUpdatedMessageSchema().dump(self)


class ParcelMeasurementsUpdatedMessage(OrderMessage):
    """Generated after a successful [Set Parcel Measurements](ctp:api:type:OrderSetParcelMeasurementsAction) update action."""

    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery_id: str
    #: Unique identifier of the [Parcel](ctp:api:type:Parcel).
    parcel_id: str
    #: The [Parcel Measurements](ctp:api:type:ParcelMeasurements) that were set on the [Parcel](ctp:api:type:Parcel).
    measurements: typing.Optional["ParcelMeasurements"]
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        delivery_id: str,
        parcel_id: str,
        measurements: typing.Optional["ParcelMeasurements"] = None,
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery_id = delivery_id
        self.parcel_id = parcel_id
        self.measurements = measurements
        self.shipping_key = shipping_key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ParcelMeasurementsUpdated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ParcelMeasurementsUpdatedMessage":
        from ._schemas.message import ParcelMeasurementsUpdatedMessageSchema

        return ParcelMeasurementsUpdatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ParcelMeasurementsUpdatedMessageSchema

        return ParcelMeasurementsUpdatedMessageSchema().dump(self)


class ParcelRemovedFromDeliveryMessage(OrderMessage):
    """Generated after a successful [Remove Parcel From Delivery](ctp:api:type:OrderRemoveParcelFromDeliveryAction) update action."""

    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery_id: str
    #: [Parcel](ctp:api:type:Parcel) that was removed from the [Delivery](ctp:api:type:Delivery).
    parcel: "Parcel"
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        delivery_id: str,
        parcel: "Parcel",
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery_id = delivery_id
        self.parcel = parcel
        self.shipping_key = shipping_key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ParcelRemovedFromDelivery",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ParcelRemovedFromDeliveryMessage":
        from ._schemas.message import ParcelRemovedFromDeliveryMessageSchema

        return ParcelRemovedFromDeliveryMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ParcelRemovedFromDeliveryMessageSchema

        return ParcelRemovedFromDeliveryMessageSchema().dump(self)


class ParcelTrackingDataUpdatedMessage(OrderMessage):
    """Generated after a successful [Set Parcel TrackingData](ctp:api:type:OrderSetParcelTrackingDataAction) update action."""

    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery_id: str
    #: Unique identifier of the [Parcel](ctp:api:type:Parcel).
    parcel_id: str
    #: The [Tracking Data](ctp:api:type:TrackingData) that was added to the [Parcel](ctp:api:type:Parcel).
    tracking_data: typing.Optional["TrackingData"]
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        delivery_id: str,
        parcel_id: str,
        tracking_data: typing.Optional["TrackingData"] = None,
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery_id = delivery_id
        self.parcel_id = parcel_id
        self.tracking_data = tracking_data
        self.shipping_key = shipping_key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ParcelTrackingDataUpdated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ParcelTrackingDataUpdatedMessage":
        from ._schemas.message import ParcelTrackingDataUpdatedMessageSchema

        return ParcelTrackingDataUpdatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ParcelTrackingDataUpdatedMessageSchema

        return ParcelTrackingDataUpdatedMessageSchema().dump(self)


class PaymentCreatedMessage(Message):
    """Generated after a successful [Create Payment](/../api/projects/payments#create-payment) request."""

    #: [Payment](ctp:api:type:Payment) that was created.
    payment: "Payment"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        payment: "Payment"
    ):
        self.payment = payment

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="PaymentCreated",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "PaymentCreatedMessage":
        from ._schemas.message import PaymentCreatedMessageSchema

        return PaymentCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentCreatedMessageSchema

        return PaymentCreatedMessageSchema().dump(self)


class PaymentInteractionAddedMessage(Message):
    """Generated after a successful [Add InterfaceInteraction](ctp:api:type:PaymentAddInterfaceInteractionAction) update action."""

    #: The interface interaction that was added to the [Payment](ctp:api:type:Payment).
    interaction: "CustomFields"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        interaction: "CustomFields"
    ):
        self.interaction = interaction

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="PaymentInteractionAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentInteractionAddedMessage":
        from ._schemas.message import PaymentInteractionAddedMessageSchema

        return PaymentInteractionAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentInteractionAddedMessageSchema

        return PaymentInteractionAddedMessageSchema().dump(self)


class PaymentStatusInterfaceCodeSetMessage(Message):
    """Generated after a successful [Set StatusInterfaceCode](ctp:api:type:PaymentSetStatusInterfaceCodeAction) update action."""

    #: Unique identifier for the [Payment](ctp:api:type:Payment) for which the [Set StatusInterfaceCode](ctp:api:type:PaymentSetStatusInterfaceCodeAction) update action was applied.
    payment_id: str
    #: The `interfaceCode` that was set during the [Set StatusInterfaceCode](ctp:api:type:PaymentSetStatusInterfaceCodeAction) update action.
    interface_code: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        payment_id: str,
        interface_code: typing.Optional[str] = None
    ):
        self.payment_id = payment_id
        self.interface_code = interface_code

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="PaymentStatusInterfaceCodeSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentStatusInterfaceCodeSetMessage":
        from ._schemas.message import PaymentStatusInterfaceCodeSetMessageSchema

        return PaymentStatusInterfaceCodeSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentStatusInterfaceCodeSetMessageSchema

        return PaymentStatusInterfaceCodeSetMessageSchema().dump(self)


class PaymentStatusStateTransitionMessage(Message):
    """Generated after a successful [Transition State](ctp:api:type:PaymentTransitionStateAction) update action."""

    #: [State](ctp:api:type:State) of the [Payment](ctp:api:type:Payment) after the [Transition State](ctp:api:type:PaymentTransitionStateAction) update action.
    state: "StateReference"
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Change Transaction State](ctp:api:type:PaymentChangeTransactionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        state: "StateReference",
        force: bool
    ):
        self.state = state
        self.force = force

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="PaymentStatusStateTransition",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentStatusStateTransitionMessage":
        from ._schemas.message import PaymentStatusStateTransitionMessageSchema

        return PaymentStatusStateTransitionMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentStatusStateTransitionMessageSchema

        return PaymentStatusStateTransitionMessageSchema().dump(self)


class PaymentTransactionAddedMessage(Message):
    """Generated after a successful [Add Transaction](ctp:api:type:PaymentAddTransactionAction) update action."""

    #: [Transaction](ctp:api:type:Transaction) that was added to the [Payment](ctp:api:type:Payment).
    transaction: "Transaction"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        transaction: "Transaction"
    ):
        self.transaction = transaction

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="PaymentTransactionAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentTransactionAddedMessage":
        from ._schemas.message import PaymentTransactionAddedMessageSchema

        return PaymentTransactionAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentTransactionAddedMessageSchema

        return PaymentTransactionAddedMessageSchema().dump(self)


class PaymentTransactionStateChangedMessage(Message):
    """Generated after a successful [Change Transaction State](ctp:api:type:PaymentChangeTransactionStateAction) update action."""

    #: Unique identifier for the [Transaction](ctp:api:type:Transaction) for which the [Transaction State](ctp:api:type:TransactionState) changed.
    transaction_id: str
    #: [Transaction State](ctp:api:type:TransactionState) after the [Change Transaction State](ctp:api:type:PaymentChangeTransactionStateAction) update action.
    state: "TransactionState"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        transaction_id: str,
        state: "TransactionState"
    ):
        self.transaction_id = transaction_id
        self.state = state

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="PaymentTransactionStateChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentTransactionStateChangedMessage":
        from ._schemas.message import PaymentTransactionStateChangedMessageSchema

        return PaymentTransactionStateChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentTransactionStateChangedMessageSchema

        return PaymentTransactionStateChangedMessageSchema().dump(self)


class ProductAddedToCategoryMessage(Message):
    """Generated after a successful [Add To Category](ctp:api:type:ProductAddToCategoryAction) update action."""

    #: [Category](ctp:api:type:Category) the [Product](ctp:api:type:Product) was added to.
    category: "CategoryReference"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        category: "CategoryReference",
        staged: bool
    ):
        self.category = category
        self.staged = staged

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductAddedToCategory",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductAddedToCategoryMessage":
        from ._schemas.message import ProductAddedToCategoryMessageSchema

        return ProductAddedToCategoryMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductAddedToCategoryMessageSchema

        return ProductAddedToCategoryMessageSchema().dump(self)


class ProductCreatedMessage(Message):
    """Generated after a successful [Create Product](/../api/projects/products#create-product) request."""

    #: The staged [Product Projection](ctp:api:type:ProductProjection) of the [Product](ctp:api:type:Product) at the time of creation.
    product_projection: "ProductProjection"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        product_projection: "ProductProjection"
    ):
        self.product_projection = product_projection

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductCreated",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ProductCreatedMessage":
        from ._schemas.message import ProductCreatedMessageSchema

        return ProductCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductCreatedMessageSchema

        return ProductCreatedMessageSchema().dump(self)


class ProductDeletedMessage(Message):
    """Generated after a successful [Delete Product](/../api/projects/products#delete-product) request."""

    #: List of image URLs that were removed during the [Delete Product](ctp:api:type:Product) request.
    removed_image_urls: typing.List["str"]
    #: Current [Product Projection](ctp:api:type:ProductProjection) of the deleted [Product](ctp:api:type:Product).
    current_projection: typing.Optional["ProductProjection"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        removed_image_urls: typing.List["str"],
        current_projection: typing.Optional["ProductProjection"] = None
    ):
        self.removed_image_urls = removed_image_urls
        self.current_projection = current_projection

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductDeleted",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ProductDeletedMessage":
        from ._schemas.message import ProductDeletedMessageSchema

        return ProductDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductDeletedMessageSchema

        return ProductDeletedMessageSchema().dump(self)


class ProductImageAddedMessage(Message):
    """Generated after a successful [Add External Image](ctp:api:type:ProductAddExternalImageAction) update action or after the successful [upload of an image](/../api/projects/products#upload-product-image)."""

    #: Unique identifier of the [Product Variant](ctp:api:type:ProductVariant) to which the [Image](ctp:api:type:Image) was added.
    variant_id: int
    #: [Image](ctp:api:type:Image) that was added.
    image: "Image"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        variant_id: int,
        image: "Image",
        staged: bool
    ):
        self.variant_id = variant_id
        self.image = image
        self.staged = staged

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductImageAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductImageAddedMessage":
        from ._schemas.message import ProductImageAddedMessageSchema

        return ProductImageAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductImageAddedMessageSchema

        return ProductImageAddedMessageSchema().dump(self)


class ProductPriceAddedMessage(Message):
    """Generated after a successful [Add Embedded Price](ctp:api:type:ProductAddPriceAction) update action."""

    #: Unique identifier of the [ProductVariant](ctp:api:type:ProductVariant) for which the Price was added.
    variant_id: int
    #: The [Embedded Price](/projects/products#embedded-price) that was added to the [ProductVariant](ctp:api:type:ProductVariant).
    price: "Price"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        variant_id: int,
        price: "Price",
        staged: bool
    ):
        self.variant_id = variant_id
        self.price = price
        self.staged = staged

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductPriceAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceAddedMessage":
        from ._schemas.message import ProductPriceAddedMessageSchema

        return ProductPriceAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceAddedMessageSchema

        return ProductPriceAddedMessageSchema().dump(self)


class ProductPriceChangedMessage(Message):
    """Generated after a successful [Change Embedded Price](ctp:api:type:ProductChangePriceAction) update action."""

    #: Unique identifier of the [ProductVariant](ctp:api:type:ProductVariant) for which the Price was changed.
    variant_id: int
    #: The current [Embedded Price](/projects/products#embedded-price) before the [Change Embedded Price](ctp:api:type:ProductChangePriceAction) update action.
    old_price: "Price"
    #: The [Embedded Price](/projects/products#embedded-price) after the [Change Embedded Price](ctp:api:type:ProductChangePriceAction) update action.
    new_price: "Price"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool
    #: The staged [Embedded Price](/projects/products#embedded-price) before the [Change Embedded Price](ctp:api:type:ProductChangePriceAction) update action.
    old_staged_price: typing.Optional["Price"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        variant_id: int,
        old_price: "Price",
        new_price: "Price",
        staged: bool,
        old_staged_price: typing.Optional["Price"] = None
    ):
        self.variant_id = variant_id
        self.old_price = old_price
        self.new_price = new_price
        self.staged = staged
        self.old_staged_price = old_staged_price

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductPriceChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceChangedMessage":
        from ._schemas.message import ProductPriceChangedMessageSchema

        return ProductPriceChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceChangedMessageSchema

        return ProductPriceChangedMessageSchema().dump(self)


class ProductPriceDiscountsSetMessage(Message):
    """Generated after a Price is updated due to a [Product Discount](ctp:api:type:ProductDiscount)."""

    #: Array containing details about the [Embedded Prices](ctp:api:type:Price) that were updated.
    updated_prices: typing.List["ProductPriceDiscountsSetUpdatedPrice"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        updated_prices: typing.List["ProductPriceDiscountsSetUpdatedPrice"]
    ):
        self.updated_prices = updated_prices

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductPriceDiscountsSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceDiscountsSetMessage":
        from ._schemas.message import ProductPriceDiscountsSetMessageSchema

        return ProductPriceDiscountsSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceDiscountsSetMessageSchema

        return ProductPriceDiscountsSetMessageSchema().dump(self)


class ProductPriceDiscountsSetUpdatedPrice(_BaseType):
    """Details about a [Embedded Price](/projects/products#embedded-price) that was updated due to a Discount. Specific to [ProductPriceDiscountsSet](ctp:api:type:ProductPriceDiscountsSetMessage) Message."""

    #: Unique identifier of the [ProductVariant](ctp:api:type:ProductVariant) for which the Discount was set.
    variant_id: int
    #: Key of the [ProductVariant](ctp:api:type:ProductVariant) for which Discount was set.
    variant_key: typing.Optional[str]
    #: SKU of the [ProductVariant](ctp:api:type:ProductVariant) for which Discount was set.
    sku: typing.Optional[str]
    #: Unique identifier of the [Price](ctp:api:type:Price).
    price_id: str
    #: Discounted Price for the [ProductVariant](ctp:api:type:ProductVariant) for which Discount was set.
    discounted: typing.Optional["DiscountedPrice"]
    #: Whether the update was only applied to the staged [ProductProjection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        variant_id: int,
        variant_key: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        price_id: str,
        discounted: typing.Optional["DiscountedPrice"] = None,
        staged: bool
    ):
        self.variant_id = variant_id
        self.variant_key = variant_key
        self.sku = sku
        self.price_id = price_id
        self.discounted = discounted
        self.staged = staged

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceDiscountsSetUpdatedPrice":
        from ._schemas.message import ProductPriceDiscountsSetUpdatedPriceSchema

        return ProductPriceDiscountsSetUpdatedPriceSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceDiscountsSetUpdatedPriceSchema

        return ProductPriceDiscountsSetUpdatedPriceSchema().dump(self)


class ProductPriceExternalDiscountSetMessage(Message):
    """Generated after a successful [Set Discounted Embedded Price](ctp:api:type:ProductSetDiscountedPriceAction) update action."""

    #: Unique identifier of the [Product Variant](ctp:api:type:ProductVariant) for which the Discount was set.
    variant_id: int
    #: Key of the [Product Variant](ctp:api:type:ProductVariant) for which the Discount was set.
    variant_key: typing.Optional[str]
    #: SKU of the [Product Variant](ctp:api:type:ProductVariant) for which Discount was set.
    sku: typing.Optional[str]
    #: Unique identifier of the [Price](ctp:api:type:Price).
    price_id: str
    #: Discounted Price for the [Product Variant](ctp:api:type:ProductVariant) for which Discount was set.
    discounted: typing.Optional["DiscountedPrice"]
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        variant_id: int,
        variant_key: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        price_id: str,
        discounted: typing.Optional["DiscountedPrice"] = None,
        staged: bool
    ):
        self.variant_id = variant_id
        self.variant_key = variant_key
        self.sku = sku
        self.price_id = price_id
        self.discounted = discounted
        self.staged = staged

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductPriceExternalDiscountSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceExternalDiscountSetMessage":
        from ._schemas.message import ProductPriceExternalDiscountSetMessageSchema

        return ProductPriceExternalDiscountSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceExternalDiscountSetMessageSchema

        return ProductPriceExternalDiscountSetMessageSchema().dump(self)


class ProductPriceKeySetMessage(Message):
    """Generated after a successful [Set Price Key](ctp:api:type:ProductSetPriceKeyAction) update action."""

    variant_id: int
    #: Unique identifier of the [Price](ctp:api:type:Price).
    price_id: typing.Optional[str]
    #: `key` value of the [Price](ctp:api:type:Price) before the [Set Price Key](ctp:api:type:ProductSetPriceKeyAction) update action.
    old_key: typing.Optional[str]
    #: `key` value of the [Price](ctp:api:type:Price) after the [Set Price Key](ctp:api:type:ProductSetPriceKeyAction) update action.
    key: typing.Optional[str]
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        variant_id: int,
        price_id: typing.Optional[str] = None,
        old_key: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        staged: bool
    ):
        self.variant_id = variant_id
        self.price_id = price_id
        self.old_key = old_key
        self.key = key
        self.staged = staged

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductPriceKeySet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceKeySetMessage":
        from ._schemas.message import ProductPriceKeySetMessageSchema

        return ProductPriceKeySetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceKeySetMessageSchema

        return ProductPriceKeySetMessageSchema().dump(self)


class ProductPriceModeSetMessage(Message):
    """Generated after a successful [Set PriceMode](ctp:api:type:ProductSetPriceModeAction) update action."""

    #: The [PriceMode](ctp:api:type:ProductPriceModeEnum) that was set.
    to: "ProductPriceModeEnum"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        to: "ProductPriceModeEnum"
    ):
        self.to = to

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductPriceModeSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceModeSetMessage":
        from ._schemas.message import ProductPriceModeSetMessageSchema

        return ProductPriceModeSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceModeSetMessageSchema

        return ProductPriceModeSetMessageSchema().dump(self)


class ProductPriceRemovedMessage(Message):
    """Generated after a successful [Remove Embedded Price](ctp:api:type:ProductRemovePriceAction) update action."""

    #: Unique identifier of the [ProductVariant](ctp:api:type:ProductVariant) for which the Price was removed.
    variant_id: int
    #: The [Embedded Price](/projects/products#embedded-price) that was removed from the [ProductVariant](ctp:api:type:ProductVariant).
    price: "Price"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        variant_id: int,
        price: "Price",
        staged: bool
    ):
        self.variant_id = variant_id
        self.price = price
        self.staged = staged

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductPriceRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceRemovedMessage":
        from ._schemas.message import ProductPriceRemovedMessageSchema

        return ProductPriceRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceRemovedMessageSchema

        return ProductPriceRemovedMessageSchema().dump(self)


class ProductPricesSetMessage(Message):
    """Generated after a successful [Set Embedded Prices](ctp:api:type:ProductSetPricesAction) update action."""

    #: Unique identifier of the [ProductVariant](ctp:api:type:ProductVariant) for which the Price was set.
    variant_id: int
    #: The [Embedded Prices](ctp:api:type:Price) that were set on the [ProductVariant](ctp:api:type:ProductVariant).
    prices: typing.List["Price"]
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        variant_id: int,
        prices: typing.List["Price"],
        staged: bool
    ):
        self.variant_id = variant_id
        self.prices = prices
        self.staged = staged

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductPricesSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPricesSetMessage":
        from ._schemas.message import ProductPricesSetMessageSchema

        return ProductPricesSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPricesSetMessageSchema

        return ProductPricesSetMessageSchema().dump(self)


class ProductPublishedMessage(Message):
    """Generated after a successful [Publish](ctp:api:type:ProductPublishAction) update action."""

    #: List of image URLs which were removed during the [Publish](ctp:api:type:ProductPublishAction) update action.
    removed_image_urls: typing.List["str"]
    #: Current [Product Projection](ctp:api:type:ProductProjection) of the [Product](ctp:api:type:Product) at the time of creation.
    product_projection: "ProductProjection"
    #: [Publishing Scope](ctp:api:type:ProductPublishScope) that was used during the [Publish](ctp:api:type:ProductPublishAction) update action.
    scope: "ProductPublishScope"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        removed_image_urls: typing.List["str"],
        product_projection: "ProductProjection",
        scope: "ProductPublishScope"
    ):
        self.removed_image_urls = removed_image_urls
        self.product_projection = product_projection
        self.scope = scope

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductPublished",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPublishedMessage":
        from ._schemas.message import ProductPublishedMessageSchema

        return ProductPublishedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPublishedMessageSchema

        return ProductPublishedMessageSchema().dump(self)


class ProductRemovedFromCategoryMessage(Message):
    """Generated after a successful [Remove From Category](ctp:api:type:ProductRemoveFromCategoryAction) update action."""

    #: [Category](ctp:api:type:Category) the [Product](ctp:api:type:Product) was removed from.
    category: "CategoryReference"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        category: "CategoryReference",
        staged: bool
    ):
        self.category = category
        self.staged = staged

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductRemovedFromCategory",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductRemovedFromCategoryMessage":
        from ._schemas.message import ProductRemovedFromCategoryMessageSchema

        return ProductRemovedFromCategoryMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductRemovedFromCategoryMessageSchema

        return ProductRemovedFromCategoryMessageSchema().dump(self)


class ProductRevertedStagedChangesMessage(Message):
    """Generated after a successful [Revert Staged Changes](ctp:api:type:ProductRevertStagedChangesAction) update action."""

    #: List of image URLs that were removed during the [Revert Staged Changes](ctp:api:type:ProductRevertStagedChangesAction) update action.
    removed_image_urls: typing.List["str"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        removed_image_urls: typing.List["str"]
    ):
        self.removed_image_urls = removed_image_urls

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductRevertedStagedChanges",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductRevertedStagedChangesMessage":
        from ._schemas.message import ProductRevertedStagedChangesMessageSchema

        return ProductRevertedStagedChangesMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductRevertedStagedChangesMessageSchema

        return ProductRevertedStagedChangesMessageSchema().dump(self)


class ProductSelectionCreatedMessage(Message):
    """Generated after a successful [Create Product Selection](/../api/projects/product-selections#create-product-selection) request."""

    #: [Product Selection](ctp:api:type:ProductSelection) that was created.
    product_selection: "ProductSelection"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        product_selection: "ProductSelection"
    ):
        self.product_selection = product_selection

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductSelectionCreated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionCreatedMessage":
        from ._schemas.message import ProductSelectionCreatedMessageSchema

        return ProductSelectionCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductSelectionCreatedMessageSchema

        return ProductSelectionCreatedMessageSchema().dump(self)


class ProductSelectionDeletedMessage(Message):
    """Generated after a successful [Delete Product Selection](/../api/projects/product-selections#create-product-selection) request."""

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductSelectionDeleted",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionDeletedMessage":
        from ._schemas.message import ProductSelectionDeletedMessageSchema

        return ProductSelectionDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductSelectionDeletedMessageSchema

        return ProductSelectionDeletedMessageSchema().dump(self)


class ProductSelectionProductAddedMessage(Message):
    """Generated after a successful [Add Product](ctp:api:type:ProductSelectionAddProductAction) update action."""

    #: [Product](ctp:api:type:Product) that was added to the [Product Selection](ctp:api:type:ProductSelection).
    product: "ProductReference"
    #: Product Variant Selection after the [Add Product](ctp:api:type:ProductSelectionAddProductAction) update action.
    variant_selection: "ProductVariantSelection"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        product: "ProductReference",
        variant_selection: "ProductVariantSelection"
    ):
        self.product = product
        self.variant_selection = variant_selection

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductSelectionProductAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionProductAddedMessage":
        from ._schemas.message import ProductSelectionProductAddedMessageSchema

        return ProductSelectionProductAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductSelectionProductAddedMessageSchema

        return ProductSelectionProductAddedMessageSchema().dump(self)


class ProductSelectionProductExcludedMessage(Message):
    """Generated after a successful [Exclude Product](ctp:api:type:ProductSelectionExcludeProductAction) update action."""

    #: [Product](ctp:api:type:Product) that was excluded from the [Product Selection](ctp:api:type:ProductSelection).
    product: "ProductReference"
    #: Product Variant Exclusion after the [Exclude Product](ctp:api:type:ProductSelectionExcludeProductAction) update action.
    variant_exclusion: "ProductVariantExclusion"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        product: "ProductReference",
        variant_exclusion: "ProductVariantExclusion"
    ):
        self.product = product
        self.variant_exclusion = variant_exclusion

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductSelectionProductExcluded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionProductExcludedMessage":
        from ._schemas.message import ProductSelectionProductExcludedMessageSchema

        return ProductSelectionProductExcludedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductSelectionProductExcludedMessageSchema

        return ProductSelectionProductExcludedMessageSchema().dump(self)


class ProductSelectionProductRemovedMessage(Message):
    """Generated after a successful [Remove Product](ctp:api:type:ProductSelectionRemoveProductAction) update action."""

    #: [Product](ctp:api:type:Product) that was removed from the Product Selection.
    product: "ProductReference"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        product: "ProductReference"
    ):
        self.product = product

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductSelectionProductRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionProductRemovedMessage":
        from ._schemas.message import ProductSelectionProductRemovedMessageSchema

        return ProductSelectionProductRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductSelectionProductRemovedMessageSchema

        return ProductSelectionProductRemovedMessageSchema().dump(self)


class ProductSelectionVariantExclusionChangedMessage(Message):
    """Generated after a successful [Set Variant Exclusion](ctp:api:type:ProductSelectionSetVariantExclusionAction) update action."""

    #: [Product](ctp:api:type:Product) for which the Product Variant Exclusion changed.
    product: "ProductReference"
    #: Product Variant Exclusion before the [Set Variant Exclusion](ctp:api:type:ProductSelectionSetVariantExclusionAction) update action.
    old_variant_exclusion: "ProductVariantExclusion"
    #: Product Variant Exclusion after the [Set Variant Exclusion](ctp:api:type:ProductSelectionSetVariantExclusionAction) update action.
    new_variant_exclusion: "ProductVariantExclusion"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        product: "ProductReference",
        old_variant_exclusion: "ProductVariantExclusion",
        new_variant_exclusion: "ProductVariantExclusion"
    ):
        self.product = product
        self.old_variant_exclusion = old_variant_exclusion
        self.new_variant_exclusion = new_variant_exclusion

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductSelectionVariantExclusionChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionVariantExclusionChangedMessage":
        from ._schemas.message import (
            ProductSelectionVariantExclusionChangedMessageSchema,
        )

        return ProductSelectionVariantExclusionChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            ProductSelectionVariantExclusionChangedMessageSchema,
        )

        return ProductSelectionVariantExclusionChangedMessageSchema().dump(self)


class ProductSelectionVariantSelectionChangedMessage(Message):
    """Generated after a successful [Set Variant Selection](ctp:api:type:ProductSelectionSetVariantSelectionAction) update action."""

    #: [Product](ctp:api:type:Product) for which the Product Variant Selection changed.
    product: "ProductReference"
    #: Product Variant Selection before the [Set Variant Selection](ctp:api:type:ProductSelectionSetVariantSelectionAction) update action.
    old_variant_selection: "ProductVariantSelection"
    #: Product Variant Selection after the [Set Variant Selection](ctp:api:type:ProductSelectionSetVariantSelectionAction) update action.
    new_variant_selection: "ProductVariantSelection"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        product: "ProductReference",
        old_variant_selection: "ProductVariantSelection",
        new_variant_selection: "ProductVariantSelection"
    ):
        self.product = product
        self.old_variant_selection = old_variant_selection
        self.new_variant_selection = new_variant_selection

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductSelectionVariantSelectionChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionVariantSelectionChangedMessage":
        from ._schemas.message import (
            ProductSelectionVariantSelectionChangedMessageSchema,
        )

        return ProductSelectionVariantSelectionChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            ProductSelectionVariantSelectionChangedMessageSchema,
        )

        return ProductSelectionVariantSelectionChangedMessageSchema().dump(self)


class ProductSlugChangedMessage(Message):
    """Generated after a successful [Change Slug](ctp:api:type:ProductChangeSlugAction) update action."""

    #: The slug of the [Product](ctp:api:type:Product) after the [Change Slug](ctp:api:type:ProductChangeSlugAction) update action.
    slug: "LocalizedString"
    #: The slug of the [Product](ctp:api:type:Product) before the [Change Slug](ctp:api:type:ProductChangeSlugAction) update action.
    old_slug: typing.Optional["LocalizedString"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        slug: "LocalizedString",
        old_slug: typing.Optional["LocalizedString"] = None
    ):
        self.slug = slug
        self.old_slug = old_slug

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductSlugChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSlugChangedMessage":
        from ._schemas.message import ProductSlugChangedMessageSchema

        return ProductSlugChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductSlugChangedMessageSchema

        return ProductSlugChangedMessageSchema().dump(self)


class ProductStateTransitionMessage(Message):
    """Generated after a successful [Transition State](ctp:api:type:ProductTransitionStateAction) update action."""

    #: Product [State](ctp:api:type:State) after the [Transition State](ctp:api:type:ProductTransitionStateAction) update action.
    state: "StateReference"
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:ProductTransitionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        state: "StateReference",
        force: bool
    ):
        self.state = state
        self.force = force

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductStateTransition",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductStateTransitionMessage":
        from ._schemas.message import ProductStateTransitionMessageSchema

        return ProductStateTransitionMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductStateTransitionMessageSchema

        return ProductStateTransitionMessageSchema().dump(self)


class ProductUnpublishedMessage(Message):
    """Generated after a successful [Unpublish Product](ctp:api:type:ProductUnpublishAction) update action."""

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductUnpublished",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductUnpublishedMessage":
        from ._schemas.message import ProductUnpublishedMessageSchema

        return ProductUnpublishedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductUnpublishedMessageSchema

        return ProductUnpublishedMessageSchema().dump(self)


class ProductVariantAddedMessage(Message):
    """Generated after a successful [Add Product Variant](ctp:api:type:ProductAddVariantAction) update action."""

    #: Unique identifier of the [Product Variant](ctp:api:type:ProductVariant) that was added.
    variant: "ProductVariant"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        variant: "ProductVariant",
        staged: bool
    ):
        self.variant = variant
        self.staged = staged

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductVariantAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductVariantAddedMessage":
        from ._schemas.message import ProductVariantAddedMessageSchema

        return ProductVariantAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductVariantAddedMessageSchema

        return ProductVariantAddedMessageSchema().dump(self)


class ProductVariantDeletedMessage(Message):
    """Generated after a successful [Remove Product Variant](ctp:api:type:ProductRemoveVariantAction) update action."""

    #: Unique identifier of the [Product Variant](ctp:api:type:ProductVariant) that was added.
    variant: typing.Optional["ProductVariant"]
    #: List of image URLs that were removed with the [Remove Product Variant](ctp:api:type:ProductRemoveVariantAction) update action.
    removed_image_urls: typing.List["str"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        variant: typing.Optional["ProductVariant"] = None,
        removed_image_urls: typing.List["str"]
    ):
        self.variant = variant
        self.removed_image_urls = removed_image_urls

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ProductVariantDeleted",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductVariantDeletedMessage":
        from ._schemas.message import ProductVariantDeletedMessageSchema

        return ProductVariantDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductVariantDeletedMessageSchema

        return ProductVariantDeletedMessageSchema().dump(self)


class QuoteCreatedMessage(Message):
    """Generated after a successful [Create Quote](/../api/projects/quotes#create-quote) request."""

    #: [Quote](/../api/projects/quotes) that was created.
    quote: "Quote"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        quote: "Quote"
    ):
        self.quote = quote

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="QuoteCreated",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "QuoteCreatedMessage":
        from ._schemas.message import QuoteCreatedMessageSchema

        return QuoteCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteCreatedMessageSchema

        return QuoteCreatedMessageSchema().dump(self)


class QuoteCustomerChangedMessage(Message):
    """Generated after a successful [Change Customer](ctp:api:type:QuoteChangeCustomerAction) update action."""

    #: The [Buyer](/../api/quotes-overview#buyer) who now owns the Quote.
    customer: "CustomerReference"
    #: The previous [Buyer](/../api/quotes-overview#buyer).
    previous_customer: "CustomerReference"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        customer: "CustomerReference",
        previous_customer: "CustomerReference"
    ):
        self.customer = customer
        self.previous_customer = previous_customer

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="QuoteCustomerChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteCustomerChangedMessage":
        from ._schemas.message import QuoteCustomerChangedMessageSchema

        return QuoteCustomerChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteCustomerChangedMessageSchema

        return QuoteCustomerChangedMessageSchema().dump(self)


class QuoteDeletedMessage(Message):
    """Generated after a successful [Delete Quote](/../api/projects/quotes#delete-quote) request."""

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="QuoteDeleted",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "QuoteDeletedMessage":
        from ._schemas.message import QuoteDeletedMessageSchema

        return QuoteDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteDeletedMessageSchema

        return QuoteDeletedMessageSchema().dump(self)


class QuoteRequestCreatedMessage(Message):
    """Generated after a successful [Create Quote Request](/../api/projects/quote-requests#create-quoterequest) request."""

    #: [Quote Request](/../api/projects/quote-requests) that was created.
    quote_request: "QuoteRequest"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        quote_request: "QuoteRequest"
    ):
        self.quote_request = quote_request

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="QuoteRequestCreated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteRequestCreatedMessage":
        from ._schemas.message import QuoteRequestCreatedMessageSchema

        return QuoteRequestCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteRequestCreatedMessageSchema

        return QuoteRequestCreatedMessageSchema().dump(self)


class QuoteRequestCustomerChangedMessage(Message):
    """Generated after a successful [Change Customer](ctp:api:type:QuoteRequestChangeCustomerAction) update action."""

    #: The [Buyer](/../api/quotes-overview#buyer) who now owns the Quote Request.
    customer: "CustomerReference"
    #: The previous [Buyer](/../api/quotes-overview#buyer).
    previous_customer: "CustomerReference"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        customer: "CustomerReference",
        previous_customer: "CustomerReference"
    ):
        self.customer = customer
        self.previous_customer = previous_customer

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="QuoteRequestCustomerChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteRequestCustomerChangedMessage":
        from ._schemas.message import QuoteRequestCustomerChangedMessageSchema

        return QuoteRequestCustomerChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteRequestCustomerChangedMessageSchema

        return QuoteRequestCustomerChangedMessageSchema().dump(self)


class QuoteRequestDeletedMessage(Message):
    """Generated after a successful [Delete Quote Request](/../api/projects/quote-requests#delete-quoterequest) request."""

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="QuoteRequestDeleted",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteRequestDeletedMessage":
        from ._schemas.message import QuoteRequestDeletedMessageSchema

        return QuoteRequestDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteRequestDeletedMessageSchema

        return QuoteRequestDeletedMessageSchema().dump(self)


class QuoteRequestStateChangedMessage(Message):
    """Generated after a successful [Change Quote Request State](ctp:api:type:QuoteRequestChangeQuoteRequestStateAction) update action."""

    #: State of the Quote Request after the [Change Quote Request State](ctp:api:type:QuoteRequestChangeQuoteRequestStateAction) update action.
    quote_request_state: "QuoteRequestState"
    #: State of the Quote Request before the [Change Quote Request State](ctp:api:type:QuoteRequestChangeQuoteRequestStateAction) update action.
    old_quote_request_state: "QuoteRequestState"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        quote_request_state: "QuoteRequestState",
        old_quote_request_state: "QuoteRequestState"
    ):
        self.quote_request_state = quote_request_state
        self.old_quote_request_state = old_quote_request_state

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="QuoteRequestStateChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteRequestStateChangedMessage":
        from ._schemas.message import QuoteRequestStateChangedMessageSchema

        return QuoteRequestStateChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteRequestStateChangedMessageSchema

        return QuoteRequestStateChangedMessageSchema().dump(self)


class QuoteRequestStateTransitionMessage(Message):
    """Generated after a successful [Transition State](ctp:api:type:QuoteRequestTransitionStateAction) update action."""

    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) after the [Transition State](ctp:api:type:QuoteRequestTransitionStateAction) update action.
    state: "StateReference"
    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) before the [Transition State](ctp:api:type:QuoteRequestTransitionStateAction) update action.
    old_state: typing.Optional["StateReference"]
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:QuoteRequestTransitionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        state: "StateReference",
        old_state: typing.Optional["StateReference"] = None,
        force: bool
    ):
        self.state = state
        self.old_state = old_state
        self.force = force

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="QuoteRequestStateTransition",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteRequestStateTransitionMessage":
        from ._schemas.message import QuoteRequestStateTransitionMessageSchema

        return QuoteRequestStateTransitionMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteRequestStateTransitionMessageSchema

        return QuoteRequestStateTransitionMessageSchema().dump(self)


class QuoteStateChangedMessage(Message):
    """Generated after a successful [Change Quote State](ctp:api:type:QuoteChangeQuoteStateAction) update action."""

    #: State of the Quote after the [Change Quote State](ctp:api:type:QuoteChangeQuoteStateAction) update action.
    quote_state: "QuoteState"
    #: State of the Quote before the [Change Quote State](ctp:api:type:QuoteChangeQuoteStateAction) update action.
    old_quote_state: "QuoteState"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        quote_state: "QuoteState",
        old_quote_state: "QuoteState"
    ):
        self.quote_state = quote_state
        self.old_quote_state = old_quote_state

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="QuoteStateChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteStateChangedMessage":
        from ._schemas.message import QuoteStateChangedMessageSchema

        return QuoteStateChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteStateChangedMessageSchema

        return QuoteStateChangedMessageSchema().dump(self)


class QuoteStateTransitionMessage(Message):
    """Generated after a successful [Transition State](ctp:api:type:QuoteTransitionStateAction) update action."""

    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) after the [Transition State](ctp:api:type:QuoteTransitionStateAction) update action.
    state: "StateReference"
    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) before the [Transition State](ctp:api:type:QuoteTransitionStateAction) update action.
    old_state: typing.Optional["StateReference"]
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:QuoteTransitionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        state: "StateReference",
        old_state: typing.Optional["StateReference"] = None,
        force: bool
    ):
        self.state = state
        self.old_state = old_state
        self.force = force

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="QuoteStateTransition",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteStateTransitionMessage":
        from ._schemas.message import QuoteStateTransitionMessageSchema

        return QuoteStateTransitionMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteStateTransitionMessageSchema

        return QuoteStateTransitionMessageSchema().dump(self)


class ReturnInfoAddedMessage(OrderMessage):
    """Generated after a successful [Add Return Info](ctp:api:type:OrderAddReturnInfoAction) update action."""

    #: The [ReturnInfo](ctp:api:type:ReturnInfo) that was added to the [Order](ctp:api:type:Order).
    return_info: "ReturnInfo"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        return_info: "ReturnInfo"
    ):
        self.return_info = return_info

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ReturnInfoAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ReturnInfoAddedMessage":
        from ._schemas.message import ReturnInfoAddedMessageSchema

        return ReturnInfoAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ReturnInfoAddedMessageSchema

        return ReturnInfoAddedMessageSchema().dump(self)


class ReturnInfoSetMessage(OrderMessage):
    """Generated after a successful [Set Return Info](ctp:api:type:OrderSetReturnInfoAction) update action on [Orders](ctp:api:type:Order) and [Order Edits](ctp:api:type:OrderEdit)."""

    #: The [ReturnInfo](ctp:api:type:ReturnInfo) that was set on the [Order](ctp:api:type:Order) or [Order Edit](ctp:api:type:OrderEdit).
    return_info: typing.Optional[typing.List["ReturnInfo"]]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        return_info: typing.Optional[typing.List["ReturnInfo"]] = None
    ):
        self.return_info = return_info

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ReturnInfoSet",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ReturnInfoSetMessage":
        from ._schemas.message import ReturnInfoSetMessageSchema

        return ReturnInfoSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ReturnInfoSetMessageSchema

        return ReturnInfoSetMessageSchema().dump(self)


class ReviewCreatedMessage(Message):
    """Generated after a successful [Create Review](/../api/projects/reviews#create-a-review) request."""

    #: [Review](ctp:api:type:Review) that was created.
    review: "Review"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        review: "Review"
    ):
        self.review = review

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ReviewCreated",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ReviewCreatedMessage":
        from ._schemas.message import ReviewCreatedMessageSchema

        return ReviewCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ReviewCreatedMessageSchema

        return ReviewCreatedMessageSchema().dump(self)


class ReviewRatingSetMessage(Message):
    """Generated after a successful [Set Rating](ctp:api:type:ReviewSetRatingAction) update action."""

    #: The `rating` of the [Review](ctp:api:type:Review) before the [Set Rating](ctp:api:type:ReviewSetRatingAction) update action.
    old_rating: typing.Optional[float]
    #: The `rating` of the [Review](ctp:api:type:Review) after the [Set Rating](ctp:api:type:ReviewSetRatingAction) update action.
    new_rating: typing.Optional[float]
    #: Whether the [Review](ctp:api:type:Review) was taken into account in the ratings statistics of the target.
    included_in_statistics: bool
    #: [Reference](ctp:api:type:Reference) to the resource that the [Review](ctp:api:type:Review) belongs to.
    target: typing.Optional["Reference"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        old_rating: typing.Optional[float] = None,
        new_rating: typing.Optional[float] = None,
        included_in_statistics: bool,
        target: typing.Optional["Reference"] = None
    ):
        self.old_rating = old_rating
        self.new_rating = new_rating
        self.included_in_statistics = included_in_statistics
        self.target = target

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ReviewRatingSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ReviewRatingSetMessage":
        from ._schemas.message import ReviewRatingSetMessageSchema

        return ReviewRatingSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ReviewRatingSetMessageSchema

        return ReviewRatingSetMessageSchema().dump(self)


class ReviewStateTransitionMessage(Message):
    """Generated after a successful [Transition State](ctp:api:type:ReviewTransitionStateAction) update action."""

    #: [State](ctp:api:type:State) of the [Review](ctp:api:type:Review) before the [Transition State](ctp:api:type:ReviewTransitionStateAction) update action.
    old_state: typing.Optional["StateReference"]
    #: [State](ctp:api:type:State) of the [Review](ctp:api:type:Review) after the [Transition State](ctp:api:type:ReviewTransitionStateAction) update action.
    new_state: "StateReference"
    #: Whether the old [Review](ctp:api:type:Review) was taken into account in the rating statistics of the target before the state transition.
    old_included_in_statistics: bool
    #: Whether the new [Review](ctp:api:type:Review) was taken into account in the rating statistics of the target after the state transition.
    new_included_in_statistics: bool
    #: [Reference](ctp:api:type:Reference) to the resource that the [Review](ctp:api:type:Review) belongs to.
    target: typing.Optional["Reference"]
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:ReviewTransitionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        old_state: typing.Optional["StateReference"] = None,
        new_state: "StateReference",
        old_included_in_statistics: bool,
        new_included_in_statistics: bool,
        target: typing.Optional["Reference"] = None,
        force: bool
    ):
        self.old_state = old_state
        self.new_state = new_state
        self.old_included_in_statistics = old_included_in_statistics
        self.new_included_in_statistics = new_included_in_statistics
        self.target = target
        self.force = force

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="ReviewStateTransition",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ReviewStateTransitionMessage":
        from ._schemas.message import ReviewStateTransitionMessageSchema

        return ReviewStateTransitionMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ReviewStateTransitionMessageSchema

        return ReviewStateTransitionMessageSchema().dump(self)


class StagedQuoteCreatedMessage(Message):
    """Generated after a successful [Create Staged Quote](/../api/projects/staged-quotes#create-stagedquote) request."""

    #: [Staged Quote](/../api/projects/staged-quotes) that was created.
    staged_quote: "StagedQuote"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        staged_quote: "StagedQuote"
    ):
        self.staged_quote = staged_quote

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StagedQuoteCreated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteCreatedMessage":
        from ._schemas.message import StagedQuoteCreatedMessageSchema

        return StagedQuoteCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteCreatedMessageSchema

        return StagedQuoteCreatedMessageSchema().dump(self)


class StagedQuoteDeletedMessage(Message):
    """Generated after a successful [Delete Staged Quote](/../api/projects/staged-quotes#delete-stagedquote) request."""

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StagedQuoteDeleted",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteDeletedMessage":
        from ._schemas.message import StagedQuoteDeletedMessageSchema

        return StagedQuoteDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteDeletedMessageSchema

        return StagedQuoteDeletedMessageSchema().dump(self)


class StagedQuoteSellerCommentSetMessage(Message):
    """Generated after a successful [Set Seller Comment](ctp:api:type:StagedQuoteSetSellerCommentAction) update action."""

    #: `sellerComment` on the [StagedQuote](ctp:api:type:StagedQuote) after a successful [Set Seller Comment](ctp:api:type:StagedQuoteSetSellerCommentAction) update action.
    seller_comment: str

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        seller_comment: str
    ):
        self.seller_comment = seller_comment

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StagedQuoteSellerCommentSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteSellerCommentSetMessage":
        from ._schemas.message import StagedQuoteSellerCommentSetMessageSchema

        return StagedQuoteSellerCommentSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteSellerCommentSetMessageSchema

        return StagedQuoteSellerCommentSetMessageSchema().dump(self)


class StagedQuoteStateChangedMessage(Message):
    """Generated after a successful [Change Staged Quote State](ctp:api:type:StagedQuoteChangeStagedQuoteStateAction) update action."""

    #: State of the Staged Quote after the [Change Staged Quote State](ctp:api:type:StagedQuoteChangeStagedQuoteStateAction) update action.
    staged_quote_state: "StagedQuoteState"
    #: State of the Staged Quote before the [Change Staged Quote State](ctp:api:type:StagedQuoteChangeStagedQuoteStateAction) update action.
    old_staged_quote_state: "StagedQuoteState"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        staged_quote_state: "StagedQuoteState",
        old_staged_quote_state: "StagedQuoteState"
    ):
        self.staged_quote_state = staged_quote_state
        self.old_staged_quote_state = old_staged_quote_state

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StagedQuoteStateChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteStateChangedMessage":
        from ._schemas.message import StagedQuoteStateChangedMessageSchema

        return StagedQuoteStateChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteStateChangedMessageSchema

        return StagedQuoteStateChangedMessageSchema().dump(self)


class StagedQuoteStateTransitionMessage(Message):
    """Generated after a successful [Transition State](ctp:api:type:StagedQuoteTransitionStateAction) update action."""

    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) after the [Transition State](ctp:api:type:StagedQuoteTransitionStateAction) update action.
    state: "StateReference"
    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) before the [Transition State](ctp:api:type:StagedQuoteTransitionStateAction) update action.
    old_state: typing.Optional["StateReference"]
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:StagedQuoteTransitionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        state: "StateReference",
        old_state: typing.Optional["StateReference"] = None,
        force: bool
    ):
        self.state = state
        self.old_state = old_state
        self.force = force

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StagedQuoteStateTransition",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteStateTransitionMessage":
        from ._schemas.message import StagedQuoteStateTransitionMessageSchema

        return StagedQuoteStateTransitionMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteStateTransitionMessageSchema

        return StagedQuoteStateTransitionMessageSchema().dump(self)


class StagedQuoteValidToSetMessage(Message):
    """Generated after a successful [Set Valid To](ctp:api:type:StagedQuoteSetValidToAction) update action."""

    #: Expiration date for the Staged Quote after the [Set Valid To](ctp:api:type:StagedQuoteSetValidToAction) update action.
    valid_to: datetime.datetime

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        valid_to: datetime.datetime
    ):
        self.valid_to = valid_to

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StagedQuoteValidToSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteValidToSetMessage":
        from ._schemas.message import StagedQuoteValidToSetMessageSchema

        return StagedQuoteValidToSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteValidToSetMessageSchema

        return StagedQuoteValidToSetMessageSchema().dump(self)


class StandalonePriceActiveChangedMessage(Message):
    """Generated after a successful [Change Active](ctp:api:types:StandalonePriceChangeActiveAction) update action."""

    #: Value of the `active` field of the StandalonePrice after the [Change Active](ctp:api:types:StandalonePriceChangeActiveAction) update action.
    active: bool
    #: Value of the `active` field of the StandalonePrice before the [Change Active](ctp:api:types:StandalonePriceChangeActiveAction) update action.
    old_active: bool

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        active: bool,
        old_active: bool
    ):
        self.active = active
        self.old_active = old_active

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceActiveChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceActiveChangedMessage":
        from ._schemas.message import StandalonePriceActiveChangedMessageSchema

        return StandalonePriceActiveChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceActiveChangedMessageSchema

        return StandalonePriceActiveChangedMessageSchema().dump(self)


class StandalonePriceCreatedMessage(Message):
    """Generated after a successful [Create StandalonePrice](/../api/projects/standalone-prices#create-standaloneprice) request."""

    #: [Standalone Price](ctp:api:type:StandalonePrice) that was created.
    standalone_price: "StandalonePrice"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        standalone_price: "StandalonePrice"
    ):
        self.standalone_price = standalone_price

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceCreated",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceCreatedMessage":
        from ._schemas.message import StandalonePriceCreatedMessageSchema

        return StandalonePriceCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceCreatedMessageSchema

        return StandalonePriceCreatedMessageSchema().dump(self)


class StandalonePriceDeletedMessage(Message):
    """Generated after a successful [Delete StandalonePrice](/../api/projects/standalone-prices#delete-standaloneprice) request."""

    #: SKU of the [ProductVariant](ctp:api:type:ProductVariant) to which the deleted Standalone Price was associated.
    sku: str

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        sku: str
    ):
        self.sku = sku

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceDeleted",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceDeletedMessage":
        from ._schemas.message import StandalonePriceDeletedMessageSchema

        return StandalonePriceDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceDeletedMessageSchema

        return StandalonePriceDeletedMessageSchema().dump(self)


class StandalonePriceDiscountSetMessage(Message):
    """Generated after a [Product Discount](ctp:api:type:ProductDiscount) is successfully applied to a StandalonePrice."""

    #: The new `discounted` value of the updated [StandalonePrice](ctp:api:type:StandalonePrice).
    discounted: typing.Optional["DiscountedPrice"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        discounted: typing.Optional["DiscountedPrice"] = None
    ):
        self.discounted = discounted

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceDiscountSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceDiscountSetMessage":
        from ._schemas.message import StandalonePriceDiscountSetMessageSchema

        return StandalonePriceDiscountSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceDiscountSetMessageSchema

        return StandalonePriceDiscountSetMessageSchema().dump(self)


class StandalonePriceExternalDiscountSetMessage(Message):
    """Generated after a successful [Set Discounted Price](ctp:api:type:StandalonePriceSetDiscountedPriceAction) update action."""

    #: The `discounted` value of the [StandalonePrice](ctp:api:type:StandalonePrice) after the [Set Discounted Price](ctp:api:type:StandalonePriceSetDiscountedPriceAction) update action.
    discounted: typing.Optional["DiscountedPrice"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        discounted: typing.Optional["DiscountedPrice"] = None
    ):
        self.discounted = discounted

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceExternalDiscountSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceExternalDiscountSetMessage":
        from ._schemas.message import StandalonePriceExternalDiscountSetMessageSchema

        return StandalonePriceExternalDiscountSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceExternalDiscountSetMessageSchema

        return StandalonePriceExternalDiscountSetMessageSchema().dump(self)


class StandalonePriceKeySetMessage(Message):
    """Generated after a successful [Set Key](ctp:api:type:StandalonePriceSetKeyAction) update action."""

    #: `key` value of the [StandalonePrice](ctp:api:type:StandalonePrice) after the [Set Key](ctp:api:type:StandalonePriceSetKeyAction) update action.
    key: typing.Optional[str]
    #: `key` value of the [StandalonePrice](ctp:api:type:StandalonePrice) before the [Set Key](ctp:api:type:StandalonePriceSetKeyAction) update action.
    old_key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        key: typing.Optional[str] = None,
        old_key: typing.Optional[str] = None
    ):
        self.key = key
        self.old_key = old_key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceKeySet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceKeySetMessage":
        from ._schemas.message import StandalonePriceKeySetMessageSchema

        return StandalonePriceKeySetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceKeySetMessageSchema

        return StandalonePriceKeySetMessageSchema().dump(self)


class StandalonePriceStagedChangesAppliedMessage(Message):
    """Generated after a successful [Apply Staged Changes](ctp:api:types:StandalonePriceApplyStagedChangesAction) update action."""

    #: Applied changes of the [StandalonePrice](/../api/projects/standalone-prices) after the [Apply Staged Changes](ctp:api:types:StandalonePriceApplyStagedChangesAction) update action.
    staged_changes: "StagedStandalonePrice"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        staged_changes: "StagedStandalonePrice"
    ):
        self.staged_changes = staged_changes

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceStagedChangesApplied",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceStagedChangesAppliedMessage":
        from ._schemas.message import StandalonePriceStagedChangesAppliedMessageSchema

        return StandalonePriceStagedChangesAppliedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceStagedChangesAppliedMessageSchema

        return StandalonePriceStagedChangesAppliedMessageSchema().dump(self)


class StandalonePriceTierAddedMessage(Message):
    """Generated after a successful [Add Price Tier](ctp:api:type:StandalonePriceAddPriceTierAction) update action"""

    #: The [Price Tier](ctp:api:type:PriceTier) that has been added to the array field `tiers` for the [StandalonePrice](ctp:api:type:StandalonePrice).
    tier: "PriceTier"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        tier: "PriceTier"
    ):
        self.tier = tier

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceTierAdded",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceTierAddedMessage":
        from ._schemas.message import StandalonePriceTierAddedMessageSchema

        return StandalonePriceTierAddedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceTierAddedMessageSchema

        return StandalonePriceTierAddedMessageSchema().dump(self)


class StandalonePriceTierRemovedMessage(Message):
    """Generated after a successful [Remove Price Tier](ctp:api:type:StandalonePriceRemovePriceTierAction) update action"""

    #: The [Price Tier](ctp:api:type:PriceTier) that has been removed from the array field `tiers` for the [StandalonePrice](ctp:api:type:StandalonePrice).
    removed_tier: "PriceTier"

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        removed_tier: "PriceTier"
    ):
        self.removed_tier = removed_tier

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceTierRemoved",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceTierRemovedMessage":
        from ._schemas.message import StandalonePriceTierRemovedMessageSchema

        return StandalonePriceTierRemovedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceTierRemovedMessageSchema

        return StandalonePriceTierRemovedMessageSchema().dump(self)


class StandalonePriceTiersSetMessage(Message):
    """Generated after a successful [Set Price Tier](ctp:api:type:StandalonePriceSetPriceTiersAction) update action"""

    #: The updated content of the field `tiers` of the affected [StandalonePrice](ctp:api:type:StandalonePrice).
    tiers: typing.List["PriceTier"]
    #: The previous content of the field `tiers` of the affected [StandalonePrice](ctp:api:type:StandalonePrice).
    previous_tiers: typing.List["PriceTier"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        tiers: typing.List["PriceTier"],
        previous_tiers: typing.List["PriceTier"]
    ):
        self.tiers = tiers
        self.previous_tiers = previous_tiers

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceTiersSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceTiersSetMessage":
        from ._schemas.message import StandalonePriceTiersSetMessageSchema

        return StandalonePriceTiersSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceTiersSetMessageSchema

        return StandalonePriceTiersSetMessageSchema().dump(self)


class StandalonePriceValidFromAndUntilSetMessage(Message):
    """Generated after a successful [Set Valid From and Until](ctp:api:type:StandalonePriceSetValidFromAndUntilAction) update action."""

    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validFrom` after the [Set Valid From and Until](ctp:api:type:StandalonePriceSetValidFromAndUntilAction) update action.
    valid_from: typing.Optional[datetime.datetime]
    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validFrom` before the [Set Valid From and Until](ctp:api:type:StandalonePriceSetValidFromAndUntilAction) update action.
    previous_valid_from: typing.Optional[datetime.datetime]
    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validUntil` after the [Set Valid From and Until](ctp:api:type:StandalonePriceSetValidFromAndUntilAction) update action.
    valid_until: typing.Optional[datetime.datetime]
    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validUntil` before the [Set Valid From and Until](ctp:api:type:StandalonePriceSetValidFromAndUntilAction) update action.
    previous_valid_until: typing.Optional[datetime.datetime]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        valid_from: typing.Optional[datetime.datetime] = None,
        previous_valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
        previous_valid_until: typing.Optional[datetime.datetime] = None
    ):
        self.valid_from = valid_from
        self.previous_valid_from = previous_valid_from
        self.valid_until = valid_until
        self.previous_valid_until = previous_valid_until

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceValidFromAndUntilSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceValidFromAndUntilSetMessage":
        from ._schemas.message import StandalonePriceValidFromAndUntilSetMessageSchema

        return StandalonePriceValidFromAndUntilSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceValidFromAndUntilSetMessageSchema

        return StandalonePriceValidFromAndUntilSetMessageSchema().dump(self)


class StandalonePriceValidFromSetMessage(Message):
    """Generated after a successful [Set Valid From](ctp:api:type:StandalonePriceSetValidFromAction) update action."""

    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validFrom` after the [Set Valid From](ctp:api:type:StandalonePriceSetValidFromAction) update action.
    valid_from: typing.Optional[datetime.datetime]
    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validFrom` before the [Set Valid From](ctp:api:type:StandalonePriceSetValidFromAction) update action.
    previous_valid_from: typing.Optional[datetime.datetime]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        valid_from: typing.Optional[datetime.datetime] = None,
        previous_valid_from: typing.Optional[datetime.datetime] = None
    ):
        self.valid_from = valid_from
        self.previous_valid_from = previous_valid_from

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceValidFromSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceValidFromSetMessage":
        from ._schemas.message import StandalonePriceValidFromSetMessageSchema

        return StandalonePriceValidFromSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceValidFromSetMessageSchema

        return StandalonePriceValidFromSetMessageSchema().dump(self)


class StandalonePriceValidUntilSetMessage(Message):
    """Generated after a successful [Set Valid Until](ctp:api:type:StandalonePriceSetValidUntilAction) update action."""

    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validUntil` after the [Set Valid Until](ctp:api:type:StandalonePriceSetValidUntilAction) update action.
    valid_until: typing.Optional[datetime.datetime]
    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validUntil` before the [Set Valid Until](ctp:api:type:StandalonePriceSetValidUntilAction) update action.
    previous_valid_until: typing.Optional[datetime.datetime]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
        previous_valid_until: typing.Optional[datetime.datetime] = None
    ):
        self.valid_until = valid_until
        self.previous_valid_until = previous_valid_until

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceValidUntilSet",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceValidUntilSetMessage":
        from ._schemas.message import StandalonePriceValidUntilSetMessageSchema

        return StandalonePriceValidUntilSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceValidUntilSetMessageSchema

        return StandalonePriceValidUntilSetMessageSchema().dump(self)


class StandalonePriceValueChangedMessage(Message):
    """Generated after a successful [Change Value](ctp:api:type:StandalonePriceChangeValueAction) update action."""

    #: The new value of the updated [StandalonePrice](ctp:api:type:StandalonePrice).
    value: "Money"
    #: Whether the new value was applied to the current or the staged representation of the StandalonePrice. Staged changes are stored on the [StagedStandalonePrice](ctp:api:type:StagedStandalonePrice).
    staged: bool
    #: The old value of the updated [StandalonePrice](ctp:api:type:StandalonePrice).
    #: Present on Messages created after 3 February 2023. Optional for backwards compatibility.
    old_value: typing.Optional["Money"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        value: "Money",
        staged: bool,
        old_value: typing.Optional["Money"] = None
    ):
        self.value = value
        self.staged = staged
        self.old_value = old_value

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StandalonePriceValueChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceValueChangedMessage":
        from ._schemas.message import StandalonePriceValueChangedMessageSchema

        return StandalonePriceValueChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceValueChangedMessageSchema

        return StandalonePriceValueChangedMessageSchema().dump(self)


class StoreCountriesChangedMessage(Message):
    """Generated after a successful [Add Country](ctp:api:type:StoreAddCountryAction),
    [Remove Country](ctp:api:type:StoreRemoveCountryAction), or
    [Set Countries](ctp:api:type:StoreSetCountriesAction) update action.

    """

    #: [Countries](ctp:api:type:StoreCountry) added to the [Store](ctp:api:type:Store).
    added_countries: typing.Optional[typing.List["StoreCountry"]]
    #: [Countries](ctp:api:type:StoreCountry) removed from the [Store](ctp:api:type:Store).
    removed_countries: typing.Optional[typing.List["StoreCountry"]]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        added_countries: typing.Optional[typing.List["StoreCountry"]] = None,
        removed_countries: typing.Optional[typing.List["StoreCountry"]] = None
    ):
        self.added_countries = added_countries
        self.removed_countries = removed_countries

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StoreCountriesChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreCountriesChangedMessage":
        from ._schemas.message import StoreCountriesChangedMessageSchema

        return StoreCountriesChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreCountriesChangedMessageSchema

        return StoreCountriesChangedMessageSchema().dump(self)


class StoreCreatedMessage(Message):
    """Generated after a successful [Create Store](/../api/projects/stores#create-store) request."""

    #: The `name` of the [Store](ctp:api:type:Store) that was created.
    name: typing.Optional["LocalizedString"]
    #: Languages of the [Store](ctp:api:type:Store) that was created. Languages are represented as [IETF language tags](https://en.wikipedia.org/wiki/IETF_language_tag).
    languages: typing.Optional[typing.List["str"]]
    #: [Countries](ctp:api:type:StoreCountry) of the [Store](ctp:api:type:Store) that was created.
    countries: typing.Optional[typing.List["StoreCountry"]]
    #: [Distribution Channels](ctp:api:type:ChannelRoleEnum) of the [Store](ctp:api:type:Store) that was created.
    distribution_channels: typing.List["ChannelReference"]
    #: [Supply Channels](ctp:api:type:ChannelRoleEnum) of the [Store](ctp:api:type:Store) that was created.
    supply_channels: typing.List["ChannelReference"]
    #: [ProductSelectionSettings](ctp:api:type:ProductSelectionSetting) of the [Store](ctp:api:type:Store) that was created.
    product_selections: typing.List["ProductSelectionSetting"]
    #: [Custom Fields](ctp:api:type:CustomFields) on the [Store](ctp:api:type:Store) that was created.
    custom: typing.Optional["CustomFields"]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        name: typing.Optional["LocalizedString"] = None,
        languages: typing.Optional[typing.List["str"]] = None,
        countries: typing.Optional[typing.List["StoreCountry"]] = None,
        distribution_channels: typing.List["ChannelReference"],
        supply_channels: typing.List["ChannelReference"],
        product_selections: typing.List["ProductSelectionSetting"],
        custom: typing.Optional["CustomFields"] = None
    ):
        self.name = name
        self.languages = languages
        self.countries = countries
        self.distribution_channels = distribution_channels
        self.supply_channels = supply_channels
        self.product_selections = product_selections
        self.custom = custom

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StoreCreated",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "StoreCreatedMessage":
        from ._schemas.message import StoreCreatedMessageSchema

        return StoreCreatedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreCreatedMessageSchema

        return StoreCreatedMessageSchema().dump(self)


class StoreDeletedMessage(Message):
    """Generated after a successful [Delete Store](/../api/projects/quote-requests#delete-quoterequest) request."""

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None
    ):
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StoreDeleted",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "StoreDeletedMessage":
        from ._schemas.message import StoreDeletedMessageSchema

        return StoreDeletedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreDeletedMessageSchema

        return StoreDeletedMessageSchema().dump(self)


class StoreDistributionChannelsChangedMessage(Message):
    """Generated after a successful [Add Distribution Channel](ctp:api:type:StoreAddDistributionChannelAction),
    [Remove Distribution Channel](ctp:api:type:StoreRemoveDistributionChannelAction), or
    [Set Distribution Channels](ctp:api:type:StoreSetDistributionChannelsAction) update action.

    """

    #: Product distribution Channels that have been added to the [Store](ctp:api:type:Store).
    added_distribution_channels: typing.Optional[typing.List["ChannelReference"]]
    #: Product distribution Channels that have been removed from the [Store](ctp:api:type:Store).
    removed_distribution_channels: typing.Optional[typing.List["ChannelReference"]]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        added_distribution_channels: typing.Optional[
            typing.List["ChannelReference"]
        ] = None,
        removed_distribution_channels: typing.Optional[
            typing.List["ChannelReference"]
        ] = None
    ):
        self.added_distribution_channels = added_distribution_channels
        self.removed_distribution_channels = removed_distribution_channels

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StoreDistributionChannelsChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreDistributionChannelsChangedMessage":
        from ._schemas.message import StoreDistributionChannelsChangedMessageSchema

        return StoreDistributionChannelsChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreDistributionChannelsChangedMessageSchema

        return StoreDistributionChannelsChangedMessageSchema().dump(self)


class StoreLanguagesChangedMessage(Message):
    """Generated after a successful [Set Languages](ctp:api:type:StoreSetLanguagesAction) update action."""

    #: [Locales](ctp:api:type:Locale) added to the [Store](ctp:api:type:Store) after the [Set Languages](ctp:api:type:StoreSetLanguagesAction) update action.
    added_languages: typing.Optional[typing.List["str"]]
    #: [Locales](ctp:api:type:Locale) removed from the [Store](ctp:api:type:Store) during the [Set Languages](ctp:api:type:StoreSetLanguagesAction) update action.
    removed_languages: typing.Optional[typing.List["str"]]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        added_languages: typing.Optional[typing.List["str"]] = None,
        removed_languages: typing.Optional[typing.List["str"]] = None
    ):
        self.added_languages = added_languages
        self.removed_languages = removed_languages

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StoreLanguagesChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreLanguagesChangedMessage":
        from ._schemas.message import StoreLanguagesChangedMessageSchema

        return StoreLanguagesChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreLanguagesChangedMessageSchema

        return StoreLanguagesChangedMessageSchema().dump(self)


class StoreNameSetMessage(Message):
    """Generated after a successful [Set Name](ctp:api:type:StoreSetNameAction) update action."""

    #: Name of the [Store](ctp:api:type:Store) set during the [Set Name](ctp:api:type:StoreSetNameAction) update action.
    name: typing.Optional["LocalizedString"]
    #: Names set for the [Store](ctp:api:type:Store) in different locales.
    name_all_locales: typing.Optional[typing.List["LocalizedString"]]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        name: typing.Optional["LocalizedString"] = None,
        name_all_locales: typing.Optional[typing.List["LocalizedString"]] = None
    ):
        self.name = name
        self.name_all_locales = name_all_locales

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StoreNameSet",
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "StoreNameSetMessage":
        from ._schemas.message import StoreNameSetMessageSchema

        return StoreNameSetMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreNameSetMessageSchema

        return StoreNameSetMessageSchema().dump(self)


class StoreProductSelectionsChangedMessage(Message):
    """Generated by a successful [Add Product Selection](ctp:api:type:StoreAddProductSelectionAction),
    [Remove Product Selection](ctp:api:type:StoreRemoveProductSelectionAction),
    [Set Product Selections](ctp:api:type:StoreSetProductSelectionsAction),
    or [Change Product Selections Active](ctp:api:type:StoreChangeProductSelectionAction) update action.

    """

    #: [ProductSelectionSettings](ctp:api:type:ProductSelectionSetting) that were added to the [Store](ctp:api:type:Store).
    added_product_selections: typing.Optional[typing.List["ProductSelectionSetting"]]
    #: [ProductSelectionSettings](ctp:api:type:ProductSelectionSetting) that were removed from the [Store](ctp:api:type:Store).
    removed_product_selections: typing.Optional[typing.List["ProductSelectionSetting"]]
    #: [ProductSelectionSettings](ctp:api:type:ProductSelectionSetting) that were updated in the [Store](ctp:api:type:Store).
    updated_product_selections: typing.Optional[typing.List["ProductSelectionSetting"]]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        added_product_selections: typing.Optional[
            typing.List["ProductSelectionSetting"]
        ] = None,
        removed_product_selections: typing.Optional[
            typing.List["ProductSelectionSetting"]
        ] = None,
        updated_product_selections: typing.Optional[
            typing.List["ProductSelectionSetting"]
        ] = None
    ):
        self.added_product_selections = added_product_selections
        self.removed_product_selections = removed_product_selections
        self.updated_product_selections = updated_product_selections

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StoreProductSelectionsChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreProductSelectionsChangedMessage":
        from ._schemas.message import StoreProductSelectionsChangedMessageSchema

        return StoreProductSelectionsChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreProductSelectionsChangedMessageSchema

        return StoreProductSelectionsChangedMessageSchema().dump(self)


class StoreSupplyChannelsChangedMessage(Message):
    """Generated after a successful [Add Supply Channel](ctp:api:type:StoreAddSupplyChannelAction),
    [Remove Supply Channel](ctp:api:type:StoreRemoveSupplyChannelAction), or
    [Set Supply Channels](ctp:api:type:StoreSetSupplyChannelsAction) update action.

    """

    #: Inventory supply Channels that have been added to the [Store](ctp:api:type:Store).
    added_supply_channels: typing.Optional[typing.List["ChannelReference"]]
    #: Inventory supply Channels that have been removed from the [Store](ctp:api:type:Store).
    removed_supply_channels: typing.Optional[typing.List["ChannelReference"]]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        sequence_number: int,
        resource: "Reference",
        resource_version: int,
        resource_user_provided_identifiers: typing.Optional[
            "UserProvidedIdentifiers"
        ] = None,
        added_supply_channels: typing.Optional[typing.List["ChannelReference"]] = None,
        removed_supply_channels: typing.Optional[typing.List["ChannelReference"]] = None
    ):
        self.added_supply_channels = added_supply_channels
        self.removed_supply_channels = removed_supply_channels

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
            sequence_number=sequence_number,
            resource=resource,
            resource_version=resource_version,
            resource_user_provided_identifiers=resource_user_provided_identifiers,
            type="StoreSupplyChannelsChanged",
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreSupplyChannelsChangedMessage":
        from ._schemas.message import StoreSupplyChannelsChangedMessageSchema

        return StoreSupplyChannelsChangedMessageSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreSupplyChannelsChangedMessageSchema

        return StoreSupplyChannelsChangedMessageSchema().dump(self)


class UserProvidedIdentifiers(_BaseType):
    """User-provided identifiers present on the resource for which the Message is created. The value of the identifier stored in the Message corresponds to the one that was set on the resource at the version shown in `resourceVersion`."""

    #: User-provided unique identifier of the resource.
    key: typing.Optional[str]
    #: User-provided unique identifier of the resource.
    external_id: typing.Optional[str]
    #: User-provided unique identifier of an [Order](ctp:api:type:Order).
    order_number: typing.Optional[str]
    #: User-provided unique identifier of a [Customer](ctp:api:type:Customer).
    customer_number: typing.Optional[str]
    #: Unique SKU of a [Product Variant](ctp:api:type:ProductVariant).
    sku: typing.Optional[str]
    #: Unique identifier usually used in deep-link URLs for a [Product](ctp:api:type:Product). The value corresponds to the slug in the `current` [Product Projection](ctp:api:type:ProductProjection).
    slug: typing.Optional["LocalizedString"]
    #: Unique identifier of a [Custom Object](/../api/projects/custom-objects).
    container_and_key: typing.Optional["ContainerAndKey"]

    def __init__(
        self,
        *,
        key: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        order_number: typing.Optional[str] = None,
        customer_number: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        slug: typing.Optional["LocalizedString"] = None,
        container_and_key: typing.Optional["ContainerAndKey"] = None
    ):
        self.key = key
        self.external_id = external_id
        self.order_number = order_number
        self.customer_number = customer_number
        self.sku = sku
        self.slug = slug
        self.container_and_key = container_and_key

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "UserProvidedIdentifiers":
        from ._schemas.message import UserProvidedIdentifiersSchema

        return UserProvidedIdentifiersSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import UserProvidedIdentifiersSchema

        return UserProvidedIdentifiersSchema().dump(self)


class MessagePayload(_BaseType):
    type: str

    def __init__(self, *, type: str):
        self.type = type

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "MessagePayload":
        if data["type"] == "AssociateRoleBuyerAssignableChanged":
            from ._schemas.message import (
                AssociateRoleBuyerAssignableChangedMessagePayloadSchema,
            )

            return AssociateRoleBuyerAssignableChangedMessagePayloadSchema().load(data)
        if data["type"] == "AssociateRoleCreated":
            from ._schemas.message import AssociateRoleCreatedMessagePayloadSchema

            return AssociateRoleCreatedMessagePayloadSchema().load(data)
        if data["type"] == "AssociateRoleDeleted":
            from ._schemas.message import AssociateRoleDeletedMessagePayloadSchema

            return AssociateRoleDeletedMessagePayloadSchema().load(data)
        if data["type"] == "AssociateRoleNameSet":
            from ._schemas.message import AssociateRoleNameChangedMessagePayloadSchema

            return AssociateRoleNameChangedMessagePayloadSchema().load(data)
        if data["type"] == "AssociateRolePermissionAdded":
            from ._schemas.message import (
                AssociateRolePermissionAddedMessagePayloadSchema,
            )

            return AssociateRolePermissionAddedMessagePayloadSchema().load(data)
        if data["type"] == "AssociateRolePermissionRemoved":
            from ._schemas.message import (
                AssociateRolePermissionRemovedMessagePayloadSchema,
            )

            return AssociateRolePermissionRemovedMessagePayloadSchema().load(data)
        if data["type"] == "AssociateRolePermissionsSet":
            from ._schemas.message import (
                AssociateRolePermissionsSetMessagePayloadSchema,
            )

            return AssociateRolePermissionsSetMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitAddressAdded":
            from ._schemas.message import BusinessUnitAddressAddedMessagePayloadSchema

            return BusinessUnitAddressAddedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitAddressChanged":
            from ._schemas.message import BusinessUnitAddressChangedMessagePayloadSchema

            return BusinessUnitAddressChangedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitAddressRemoved":
            from ._schemas.message import BusinessUnitAddressRemovedMessagePayloadSchema

            return BusinessUnitAddressRemovedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitAssociateAdded":
            from ._schemas.message import BusinessUnitAssociateAddedMessagePayloadSchema

            return BusinessUnitAssociateAddedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitAssociateChanged":
            from ._schemas.message import (
                BusinessUnitAssociateChangedMessagePayloadSchema,
            )

            return BusinessUnitAssociateChangedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitAssociateModeChanged":
            from ._schemas.message import (
                BusinessUnitAssociateModeChangedMessagePayloadSchema,
            )

            return BusinessUnitAssociateModeChangedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitAssociateRemoved":
            from ._schemas.message import (
                BusinessUnitAssociateRemovedMessagePayloadSchema,
            )

            return BusinessUnitAssociateRemovedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitAssociatesSet":
            from ._schemas.message import BusinessUnitAssociatesSetMessagePayloadSchema

            return BusinessUnitAssociatesSetMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitBillingAddressAdded":
            from ._schemas.message import (
                BusinessUnitBillingAddressAddedMessagePayloadSchema,
            )

            return BusinessUnitBillingAddressAddedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitBillingAddressRemoved":
            from ._schemas.message import (
                BusinessUnitBillingAddressRemovedMessagePayloadSchema,
            )

            return BusinessUnitBillingAddressRemovedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitContactEmailSet":
            from ._schemas.message import (
                BusinessUnitContactEmailSetMessagePayloadSchema,
            )

            return BusinessUnitContactEmailSetMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitCreated":
            from ._schemas.message import BusinessUnitCreatedMessagePayloadSchema

            return BusinessUnitCreatedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitDefaultBillingAddressSet":
            from ._schemas.message import (
                BusinessUnitDefaultBillingAddressSetMessagePayloadSchema,
            )

            return BusinessUnitDefaultBillingAddressSetMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitDefaultShippingAddressSet":
            from ._schemas.message import (
                BusinessUnitDefaultShippingAddressSetMessagePayloadSchema,
            )

            return BusinessUnitDefaultShippingAddressSetMessagePayloadSchema().load(
                data
            )
        if data["type"] == "BusinessUnitDeleted":
            from ._schemas.message import BusinessUnitDeletedMessagePayloadSchema

            return BusinessUnitDeletedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitNameChanged":
            from ._schemas.message import BusinessUnitNameChangedMessagePayloadSchema

            return BusinessUnitNameChangedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitParentUnitChanged":
            from ._schemas.message import (
                BusinessUnitParentUnitChangedMessagePayloadSchema,
            )

            return BusinessUnitParentUnitChangedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitShippingAddressAdded":
            from ._schemas.message import (
                BusinessUnitShippingAddressAddedMessagePayloadSchema,
            )

            return BusinessUnitShippingAddressAddedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitShippingAddressRemoved":
            from ._schemas.message import (
                BusinessUnitShippingAddressRemovedMessagePayloadSchema,
            )

            return BusinessUnitShippingAddressRemovedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitStatusChanged":
            from ._schemas.message import BusinessUnitStatusChangedMessagePayloadSchema

            return BusinessUnitStatusChangedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitStoreAdded":
            from ._schemas.message import BusinessUnitStoreAddedMessagePayloadSchema

            return BusinessUnitStoreAddedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitStoreModeChanged":
            from ._schemas.message import (
                BusinessUnitStoreModeChangedMessagePayloadSchema,
            )

            return BusinessUnitStoreModeChangedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitStoreRemoved":
            from ._schemas.message import BusinessUnitStoreRemovedMessagePayloadSchema

            return BusinessUnitStoreRemovedMessagePayloadSchema().load(data)
        if data["type"] == "BusinessUnitStoresSet":
            from ._schemas.message import BusinessUnitStoresSetMessagePayloadSchema

            return BusinessUnitStoresSetMessagePayloadSchema().load(data)
        if data["type"] == "CategoryCreated":
            from ._schemas.message import CategoryCreatedMessagePayloadSchema

            return CategoryCreatedMessagePayloadSchema().load(data)
        if data["type"] == "CategorySlugChanged":
            from ._schemas.message import CategorySlugChangedMessagePayloadSchema

            return CategorySlugChangedMessagePayloadSchema().load(data)
        if data["type"] == "CustomerAddressAdded":
            from ._schemas.message import CustomerAddressAddedMessagePayloadSchema

            return CustomerAddressAddedMessagePayloadSchema().load(data)
        if data["type"] == "CustomerAddressChanged":
            from ._schemas.message import CustomerAddressChangedMessagePayloadSchema

            return CustomerAddressChangedMessagePayloadSchema().load(data)
        if data["type"] == "CustomerAddressRemoved":
            from ._schemas.message import CustomerAddressRemovedMessagePayloadSchema

            return CustomerAddressRemovedMessagePayloadSchema().load(data)
        if data["type"] == "CustomerCompanyNameSet":
            from ._schemas.message import CustomerCompanyNameSetMessagePayloadSchema

            return CustomerCompanyNameSetMessagePayloadSchema().load(data)
        if data["type"] == "CustomerCreated":
            from ._schemas.message import CustomerCreatedMessagePayloadSchema

            return CustomerCreatedMessagePayloadSchema().load(data)
        if data["type"] == "CustomerDateOfBirthSet":
            from ._schemas.message import CustomerDateOfBirthSetMessagePayloadSchema

            return CustomerDateOfBirthSetMessagePayloadSchema().load(data)
        if data["type"] == "CustomerDeleted":
            from ._schemas.message import CustomerDeletedMessagePayloadSchema

            return CustomerDeletedMessagePayloadSchema().load(data)
        if data["type"] == "CustomerEmailChanged":
            from ._schemas.message import CustomerEmailChangedMessagePayloadSchema

            return CustomerEmailChangedMessagePayloadSchema().load(data)
        if data["type"] == "CustomerEmailVerified":
            from ._schemas.message import CustomerEmailVerifiedMessagePayloadSchema

            return CustomerEmailVerifiedMessagePayloadSchema().load(data)
        if data["type"] == "CustomerFirstNameSet":
            from ._schemas.message import CustomerFirstNameSetMessagePayloadSchema

            return CustomerFirstNameSetMessagePayloadSchema().load(data)
        if data["type"] == "CustomerGroupSet":
            from ._schemas.message import CustomerGroupSetMessagePayloadSchema

            return CustomerGroupSetMessagePayloadSchema().load(data)
        if data["type"] == "CustomerLastNameSet":
            from ._schemas.message import CustomerLastNameSetMessagePayloadSchema

            return CustomerLastNameSetMessagePayloadSchema().load(data)
        if data["type"] == "CustomerPasswordUpdated":
            from ._schemas.message import CustomerPasswordUpdatedMessagePayloadSchema

            return CustomerPasswordUpdatedMessagePayloadSchema().load(data)
        if data["type"] == "CustomerTitleSet":
            from ._schemas.message import CustomerTitleSetMessagePayloadSchema

            return CustomerTitleSetMessagePayloadSchema().load(data)
        if data["type"] == "InventoryEntryCreated":
            from ._schemas.message import InventoryEntryCreatedMessagePayloadSchema

            return InventoryEntryCreatedMessagePayloadSchema().load(data)
        if data["type"] == "InventoryEntryDeleted":
            from ._schemas.message import InventoryEntryDeletedMessagePayloadSchema

            return InventoryEntryDeletedMessagePayloadSchema().load(data)
        if data["type"] == "InventoryEntryQuantitySet":
            from ._schemas.message import InventoryEntryQuantitySetMessagePayloadSchema

            return InventoryEntryQuantitySetMessagePayloadSchema().load(data)
        if data["type"] == "OrderPaymentAdded":
            from ._schemas.message import OrderPaymentAddedMessagePayloadSchema

            return OrderPaymentAddedMessagePayloadSchema().load(data)
        if data["type"] == "PaymentCreated":
            from ._schemas.message import PaymentCreatedMessagePayloadSchema

            return PaymentCreatedMessagePayloadSchema().load(data)
        if data["type"] == "PaymentInteractionAdded":
            from ._schemas.message import PaymentInteractionAddedMessagePayloadSchema

            return PaymentInteractionAddedMessagePayloadSchema().load(data)
        if data["type"] == "PaymentStatusInterfaceCodeSet":
            from ._schemas.message import (
                PaymentStatusInterfaceCodeSetMessagePayloadSchema,
            )

            return PaymentStatusInterfaceCodeSetMessagePayloadSchema().load(data)
        if data["type"] == "PaymentStatusStateTransition":
            from ._schemas.message import (
                PaymentStatusStateTransitionMessagePayloadSchema,
            )

            return PaymentStatusStateTransitionMessagePayloadSchema().load(data)
        if data["type"] == "PaymentTransactionAdded":
            from ._schemas.message import PaymentTransactionAddedMessagePayloadSchema

            return PaymentTransactionAddedMessagePayloadSchema().load(data)
        if data["type"] == "PaymentTransactionStateChanged":
            from ._schemas.message import (
                PaymentTransactionStateChangedMessagePayloadSchema,
            )

            return PaymentTransactionStateChangedMessagePayloadSchema().load(data)
        if data["type"] == "ProductAddedToCategory":
            from ._schemas.message import ProductAddedToCategoryMessagePayloadSchema

            return ProductAddedToCategoryMessagePayloadSchema().load(data)
        if data["type"] == "ProductCreated":
            from ._schemas.message import ProductCreatedMessagePayloadSchema

            return ProductCreatedMessagePayloadSchema().load(data)
        if data["type"] == "ProductDeleted":
            from ._schemas.message import ProductDeletedMessagePayloadSchema

            return ProductDeletedMessagePayloadSchema().load(data)
        if data["type"] == "ProductImageAdded":
            from ._schemas.message import ProductImageAddedMessagePayloadSchema

            return ProductImageAddedMessagePayloadSchema().load(data)
        if data["type"] == "ProductPriceAdded":
            from ._schemas.message import ProductPriceAddedMessagePayloadSchema

            return ProductPriceAddedMessagePayloadSchema().load(data)
        if data["type"] == "ProductPriceChanged":
            from ._schemas.message import ProductPriceChangedMessagePayloadSchema

            return ProductPriceChangedMessagePayloadSchema().load(data)
        if data["type"] == "ProductPriceDiscountsSet":
            from ._schemas.message import ProductPriceDiscountsSetMessagePayloadSchema

            return ProductPriceDiscountsSetMessagePayloadSchema().load(data)
        if data["type"] == "ProductPriceExternalDiscountSet":
            from ._schemas.message import (
                ProductPriceExternalDiscountSetMessagePayloadSchema,
            )

            return ProductPriceExternalDiscountSetMessagePayloadSchema().load(data)
        if data["type"] == "ProductPriceKeySet":
            from ._schemas.message import ProductPriceKeySetMessagePayloadSchema

            return ProductPriceKeySetMessagePayloadSchema().load(data)
        if data["type"] == "ProductPriceModeSet":
            from ._schemas.message import ProductPriceModeSetMessagePayloadSchema

            return ProductPriceModeSetMessagePayloadSchema().load(data)
        if data["type"] == "ProductPriceRemoved":
            from ._schemas.message import ProductPriceRemovedMessagePayloadSchema

            return ProductPriceRemovedMessagePayloadSchema().load(data)
        if data["type"] == "ProductPricesSet":
            from ._schemas.message import ProductPricesSetMessagePayloadSchema

            return ProductPricesSetMessagePayloadSchema().load(data)
        if data["type"] == "ProductPublished":
            from ._schemas.message import ProductPublishedMessagePayloadSchema

            return ProductPublishedMessagePayloadSchema().load(data)
        if data["type"] == "ProductRemovedFromCategory":
            from ._schemas.message import ProductRemovedFromCategoryMessagePayloadSchema

            return ProductRemovedFromCategoryMessagePayloadSchema().load(data)
        if data["type"] == "ProductRevertedStagedChanges":
            from ._schemas.message import (
                ProductRevertedStagedChangesMessagePayloadSchema,
            )

            return ProductRevertedStagedChangesMessagePayloadSchema().load(data)
        if data["type"] == "ProductSelectionCreated":
            from ._schemas.message import ProductSelectionCreatedMessagePayloadSchema

            return ProductSelectionCreatedMessagePayloadSchema().load(data)
        if data["type"] == "ProductSelectionDeleted":
            from ._schemas.message import ProductSelectionDeletedMessagePayloadSchema

            return ProductSelectionDeletedMessagePayloadSchema().load(data)
        if data["type"] == "ProductSelectionProductAdded":
            from ._schemas.message import (
                ProductSelectionProductAddedMessagePayloadSchema,
            )

            return ProductSelectionProductAddedMessagePayloadSchema().load(data)
        if data["type"] == "ProductSelectionProductExcluded":
            from ._schemas.message import (
                ProductSelectionProductExcludedMessagePayloadSchema,
            )

            return ProductSelectionProductExcludedMessagePayloadSchema().load(data)
        if data["type"] == "ProductSelectionProductRemoved":
            from ._schemas.message import (
                ProductSelectionProductRemovedMessagePayloadSchema,
            )

            return ProductSelectionProductRemovedMessagePayloadSchema().load(data)
        if data["type"] == "ProductSelectionVariantExclusionChanged":
            from ._schemas.message import (
                ProductSelectionVariantExclusionChangedMessagePayloadSchema,
            )

            return ProductSelectionVariantExclusionChangedMessagePayloadSchema().load(
                data
            )
        if data["type"] == "ProductSelectionVariantSelectionChanged":
            from ._schemas.message import (
                ProductSelectionVariantSelectionChangedMessagePayloadSchema,
            )

            return ProductSelectionVariantSelectionChangedMessagePayloadSchema().load(
                data
            )
        if data["type"] == "ProductSlugChanged":
            from ._schemas.message import ProductSlugChangedMessagePayloadSchema

            return ProductSlugChangedMessagePayloadSchema().load(data)
        if data["type"] == "ProductStateTransition":
            from ._schemas.message import ProductStateTransitionMessagePayloadSchema

            return ProductStateTransitionMessagePayloadSchema().load(data)
        if data["type"] == "ProductUnpublished":
            from ._schemas.message import ProductUnpublishedMessagePayloadSchema

            return ProductUnpublishedMessagePayloadSchema().load(data)
        if data["type"] == "ProductVariantAdded":
            from ._schemas.message import ProductVariantAddedMessagePayloadSchema

            return ProductVariantAddedMessagePayloadSchema().load(data)
        if data["type"] == "ProductVariantDeleted":
            from ._schemas.message import ProductVariantDeletedMessagePayloadSchema

            return ProductVariantDeletedMessagePayloadSchema().load(data)
        if data["type"] == "QuoteCreated":
            from ._schemas.message import QuoteCreatedMessagePayloadSchema

            return QuoteCreatedMessagePayloadSchema().load(data)
        if data["type"] == "QuoteCustomerChanged":
            from ._schemas.message import QuoteCustomerChangedMessagePayloadSchema

            return QuoteCustomerChangedMessagePayloadSchema().load(data)
        if data["type"] == "QuoteDeleted":
            from ._schemas.message import QuoteDeletedMessagePayloadSchema

            return QuoteDeletedMessagePayloadSchema().load(data)
        if data["type"] == "QuoteRequestCreated":
            from ._schemas.message import QuoteRequestCreatedMessagePayloadSchema

            return QuoteRequestCreatedMessagePayloadSchema().load(data)
        if data["type"] == "QuoteRequestCustomerChanged":
            from ._schemas.message import (
                QuoteRequestCustomerChangedMessagePayloadSchema,
            )

            return QuoteRequestCustomerChangedMessagePayloadSchema().load(data)
        if data["type"] == "QuoteRequestDeleted":
            from ._schemas.message import QuoteRequestDeletedMessagePayloadSchema

            return QuoteRequestDeletedMessagePayloadSchema().load(data)
        if data["type"] == "QuoteRequestStateChanged":
            from ._schemas.message import QuoteRequestStateChangedMessagePayloadSchema

            return QuoteRequestStateChangedMessagePayloadSchema().load(data)
        if data["type"] == "QuoteRequestStateTransition":
            from ._schemas.message import (
                QuoteRequestStateTransitionMessagePayloadSchema,
            )

            return QuoteRequestStateTransitionMessagePayloadSchema().load(data)
        if data["type"] == "QuoteStateChanged":
            from ._schemas.message import QuoteStateChangedMessagePayloadSchema

            return QuoteStateChangedMessagePayloadSchema().load(data)
        if data["type"] == "QuoteStateTransition":
            from ._schemas.message import QuoteStateTransitionMessagePayloadSchema

            return QuoteStateTransitionMessagePayloadSchema().load(data)
        if data["type"] == "ReviewCreated":
            from ._schemas.message import ReviewCreatedMessagePayloadSchema

            return ReviewCreatedMessagePayloadSchema().load(data)
        if data["type"] == "ReviewRatingSet":
            from ._schemas.message import ReviewRatingSetMessagePayloadSchema

            return ReviewRatingSetMessagePayloadSchema().load(data)
        if data["type"] == "ReviewStateTransition":
            from ._schemas.message import ReviewStateTransitionMessagePayloadSchema

            return ReviewStateTransitionMessagePayloadSchema().load(data)
        if data["type"] == "ShoppingListStoreSet":
            from ._schemas.message import ShoppingListStoreSetMessagePayloadSchema

            return ShoppingListStoreSetMessagePayloadSchema().load(data)
        if data["type"] == "StagedQuoteCreated":
            from ._schemas.message import StagedQuoteCreatedMessagePayloadSchema

            return StagedQuoteCreatedMessagePayloadSchema().load(data)
        if data["type"] == "StagedQuoteDeleted":
            from ._schemas.message import StagedQuoteDeletedMessagePayloadSchema

            return StagedQuoteDeletedMessagePayloadSchema().load(data)
        if data["type"] == "StagedQuoteSellerCommentSet":
            from ._schemas.message import (
                StagedQuoteSellerCommentSetMessagePayloadSchema,
            )

            return StagedQuoteSellerCommentSetMessagePayloadSchema().load(data)
        if data["type"] == "StagedQuoteStateChanged":
            from ._schemas.message import StagedQuoteStateChangedMessagePayloadSchema

            return StagedQuoteStateChangedMessagePayloadSchema().load(data)
        if data["type"] == "StagedQuoteStateTransition":
            from ._schemas.message import StagedQuoteStateTransitionMessagePayloadSchema

            return StagedQuoteStateTransitionMessagePayloadSchema().load(data)
        if data["type"] == "StagedQuoteValidToSet":
            from ._schemas.message import StagedQuoteValidToSetMessagePayloadSchema

            return StagedQuoteValidToSetMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceActiveChanged":
            from ._schemas.message import (
                StandalonePriceActiveChangedMessagePayloadSchema,
            )

            return StandalonePriceActiveChangedMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceCreated":
            from ._schemas.message import StandalonePriceCreatedMessagePayloadSchema

            return StandalonePriceCreatedMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceDeleted":
            from ._schemas.message import StandalonePriceDeletedMessagePayloadSchema

            return StandalonePriceDeletedMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceDiscountSet":
            from ._schemas.message import StandalonePriceDiscountSetMessagePayloadSchema

            return StandalonePriceDiscountSetMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceExternalDiscountSet":
            from ._schemas.message import (
                StandalonePriceExternalDiscountSetMessagePayloadSchema,
            )

            return StandalonePriceExternalDiscountSetMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceKeySet":
            from ._schemas.message import StandalonePriceKeySetMessagePayloadSchema

            return StandalonePriceKeySetMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceStagedChangesApplied":
            from ._schemas.message import (
                StandalonePriceStagedChangesAppliedMessagePayloadSchema,
            )

            return StandalonePriceStagedChangesAppliedMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceTierAdded":
            from ._schemas.message import StandalonePriceTierAddedMessagePayloadSchema

            return StandalonePriceTierAddedMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceTierRemoved":
            from ._schemas.message import StandalonePriceTierRemovedMessagePayloadSchema

            return StandalonePriceTierRemovedMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceTiersSet":
            from ._schemas.message import StandalonePriceTiersSetMessagePayloadSchema

            return StandalonePriceTiersSetMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceValidFromAndUntilSet":
            from ._schemas.message import (
                StandalonePriceValidFromAndUntilSetMessagePayloadSchema,
            )

            return StandalonePriceValidFromAndUntilSetMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceValidFromSet":
            from ._schemas.message import (
                StandalonePriceValidFromSetMessagePayloadSchema,
            )

            return StandalonePriceValidFromSetMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceValidUntilSet":
            from ._schemas.message import (
                StandalonePriceValidUntilSetMessagePayloadSchema,
            )

            return StandalonePriceValidUntilSetMessagePayloadSchema().load(data)
        if data["type"] == "StandalonePriceValueChanged":
            from ._schemas.message import (
                StandalonePriceValueChangedMessagePayloadSchema,
            )

            return StandalonePriceValueChangedMessagePayloadSchema().load(data)
        if data["type"] == "StoreCountriesChanged":
            from ._schemas.message import StoreCountriesChangedMessagePayloadSchema

            return StoreCountriesChangedMessagePayloadSchema().load(data)
        if data["type"] == "StoreCreated":
            from ._schemas.message import StoreCreatedMessagePayloadSchema

            return StoreCreatedMessagePayloadSchema().load(data)
        if data["type"] == "StoreDeleted":
            from ._schemas.message import StoreDeletedMessagePayloadSchema

            return StoreDeletedMessagePayloadSchema().load(data)
        if data["type"] == "StoreDistributionChannelsChanged":
            from ._schemas.message import (
                StoreDistributionChannelsChangedMessagePayloadSchema,
            )

            return StoreDistributionChannelsChangedMessagePayloadSchema().load(data)
        if data["type"] == "StoreLanguagesChanged":
            from ._schemas.message import StoreLanguagesChangedMessagePayloadSchema

            return StoreLanguagesChangedMessagePayloadSchema().load(data)
        if data["type"] == "StoreNameSet":
            from ._schemas.message import StoreNameSetMessagePayloadSchema

            return StoreNameSetMessagePayloadSchema().load(data)
        if data["type"] == "StoreProductSelectionsChanged":
            from ._schemas.message import (
                StoreProductSelectionsChangedMessagePayloadSchema,
            )

            return StoreProductSelectionsChangedMessagePayloadSchema().load(data)
        if data["type"] == "StoreSupplyChannelsChanged":
            from ._schemas.message import StoreSupplyChannelsChangedMessagePayloadSchema

            return StoreSupplyChannelsChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import MessagePayloadSchema

        return MessagePayloadSchema().dump(self)


class AssociateRoleBuyerAssignableChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change BuyerAssignable](ctp:api:type:AssociateRoleChangeBuyerAssignableAction) update action."""

    #: The new value of the `buyerAssignable` field of the AssociateRole.
    buyer_assignable: bool

    def __init__(self, *, buyer_assignable: bool):
        self.buyer_assignable = buyer_assignable

        super().__init__(type="AssociateRoleBuyerAssignableChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRoleBuyerAssignableChangedMessagePayload":
        from ._schemas.message import (
            AssociateRoleBuyerAssignableChangedMessagePayloadSchema,
        )

        return AssociateRoleBuyerAssignableChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            AssociateRoleBuyerAssignableChangedMessagePayloadSchema,
        )

        return AssociateRoleBuyerAssignableChangedMessagePayloadSchema().dump(self)


class AssociateRoleCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create AssociateRole](/projects/associate-roles#create-associaterole) request."""

    #: The [AssociateRole](ctp:api:type:AssociateRole) that was created.
    associate_role: "AssociateRole"

    def __init__(self, *, associate_role: "AssociateRole"):
        self.associate_role = associate_role

        super().__init__(type="AssociateRoleCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRoleCreatedMessagePayload":
        from ._schemas.message import AssociateRoleCreatedMessagePayloadSchema

        return AssociateRoleCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRoleCreatedMessagePayloadSchema

        return AssociateRoleCreatedMessagePayloadSchema().dump(self)


class AssociateRoleDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Delete AssociateRole](/projects/associate-roles#delete-associaterole) request."""

    def __init__(self):
        super().__init__(type="AssociateRoleDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRoleDeletedMessagePayload":
        from ._schemas.message import AssociateRoleDeletedMessagePayloadSchema

        return AssociateRoleDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRoleDeletedMessagePayloadSchema

        return AssociateRoleDeletedMessagePayloadSchema().dump(self)


class AssociateRoleNameChangedMessagePayload(MessagePayload):
    """Generated after a successful [Set Name](ctp:api:type:AssociateRoleSetNameAction) update action."""

    #: Updated name of the [AssociateRole](ctp:api:type:AssociateRole).
    name: str

    def __init__(self, *, name: str):
        self.name = name

        super().__init__(type="AssociateRoleNameSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRoleNameChangedMessagePayload":
        from ._schemas.message import AssociateRoleNameChangedMessagePayloadSchema

        return AssociateRoleNameChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRoleNameChangedMessagePayloadSchema

        return AssociateRoleNameChangedMessagePayloadSchema().dump(self)


class AssociateRolePermissionAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Permissions](ctp:api:type:AssociateRoleAddPermissionAction) update action."""

    #: The Permission that was added to the AssociateRole.
    permission: "Permission"

    def __init__(self, *, permission: "Permission"):
        self.permission = permission

        super().__init__(type="AssociateRolePermissionAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRolePermissionAddedMessagePayload":
        from ._schemas.message import AssociateRolePermissionAddedMessagePayloadSchema

        return AssociateRolePermissionAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRolePermissionAddedMessagePayloadSchema

        return AssociateRolePermissionAddedMessagePayloadSchema().dump(self)


class AssociateRolePermissionRemovedMessagePayload(MessagePayload):
    """Generated after a successful [Remove Permissions](ctp:api:type:AssociateRoleRemovePermissionAction) update action."""

    #: The Permission that was removed from the AssociateRole.
    permission: "Permission"

    def __init__(self, *, permission: "Permission"):
        self.permission = permission

        super().__init__(type="AssociateRolePermissionRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRolePermissionRemovedMessagePayload":
        from ._schemas.message import AssociateRolePermissionRemovedMessagePayloadSchema

        return AssociateRolePermissionRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRolePermissionRemovedMessagePayloadSchema

        return AssociateRolePermissionRemovedMessagePayloadSchema().dump(self)


class AssociateRolePermissionsSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Permissions](ctp:api:type:AssociateRoleSetPermissionsAction) update action."""

    #: Permission assigned to the AssociateRole.
    permissions: typing.List["Permission"]

    def __init__(self, *, permissions: typing.List["Permission"]):
        self.permissions = permissions

        super().__init__(type="AssociateRolePermissionsSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AssociateRolePermissionsSetMessagePayload":
        from ._schemas.message import AssociateRolePermissionsSetMessagePayloadSchema

        return AssociateRolePermissionsSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import AssociateRolePermissionsSetMessagePayloadSchema

        return AssociateRolePermissionsSetMessagePayloadSchema().dump(self)


class BusinessUnitAddressAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Address](ctp:api:type:BusinessUnitAddAddressAction) update action."""

    #: The address that was added to the [Business Unit](ctp:api:type:BusinessUnit).
    address: "Address"

    def __init__(self, *, address: "Address"):
        self.address = address

        super().__init__(type="BusinessUnitAddressAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAddressAddedMessagePayload":
        from ._schemas.message import BusinessUnitAddressAddedMessagePayloadSchema

        return BusinessUnitAddressAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAddressAddedMessagePayloadSchema

        return BusinessUnitAddressAddedMessagePayloadSchema().dump(self)


class BusinessUnitAddressChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Address](ctp:api:type:BusinessUnitChangeAddressAction) update action."""

    #: Updated address of the Business Unit.
    address: "Address"

    def __init__(self, *, address: "Address"):
        self.address = address

        super().__init__(type="BusinessUnitAddressChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAddressChangedMessagePayload":
        from ._schemas.message import BusinessUnitAddressChangedMessagePayloadSchema

        return BusinessUnitAddressChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAddressChangedMessagePayloadSchema

        return BusinessUnitAddressChangedMessagePayloadSchema().dump(self)


class BusinessUnitAddressRemovedMessagePayload(MessagePayload):
    """Generated after a successful [Remove Address](ctp:api:type:BusinessUnitRemoveAddressAction) update action."""

    #: The address that was removed from the [Business Unit](ctp:api:type:BusinessUnit).
    address: "Address"

    def __init__(self, *, address: "Address"):
        self.address = address

        super().__init__(type="BusinessUnitAddressRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAddressRemovedMessagePayload":
        from ._schemas.message import BusinessUnitAddressRemovedMessagePayloadSchema

        return BusinessUnitAddressRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAddressRemovedMessagePayloadSchema

        return BusinessUnitAddressRemovedMessagePayloadSchema().dump(self)


class BusinessUnitAssociateAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Associate](ctp:api:type:BusinessUnitAddAssociateAction) update action."""

    #: The [Associate](ctp:api:type:Associate) that was added to the [Business Unit](ctp:api:type:BusinessUnit).
    associate: "Associate"

    def __init__(self, *, associate: "Associate"):
        self.associate = associate

        super().__init__(type="BusinessUnitAssociateAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAssociateAddedMessagePayload":
        from ._schemas.message import BusinessUnitAssociateAddedMessagePayloadSchema

        return BusinessUnitAssociateAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAssociateAddedMessagePayloadSchema

        return BusinessUnitAssociateAddedMessagePayloadSchema().dump(self)


class BusinessUnitAssociateChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Associate](ctp:api:type:BusinessUnitChangeAssociateAction) update action."""

    #: The [Associate](ctp:api:type:Associate) that was updated.
    associate: "Associate"

    def __init__(self, *, associate: "Associate"):
        self.associate = associate

        super().__init__(type="BusinessUnitAssociateChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAssociateChangedMessagePayload":
        from ._schemas.message import BusinessUnitAssociateChangedMessagePayloadSchema

        return BusinessUnitAssociateChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAssociateChangedMessagePayloadSchema

        return BusinessUnitAssociateChangedMessagePayloadSchema().dump(self)


class BusinessUnitAssociateModeChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Associate Mode](ctp:api:type:BusinessUnitChangeAssociateModeAction) update action."""

    #: [BusinessUnitAssociateMode](ctp:api:type:BusinessUnitAssociateMode) of the Business Unit after the [Change Associate Mode](ctp:api:type:BusinessUnitChangeAssociateModeAction) update action.
    associate_mode: "BusinessUnitAssociateMode"
    #: [BusinessUnitAssociateMode](ctp:api:type:BusinessUnitAssociateMode) of the Business Unit before the [Change Associate Mode](ctp:api:type:BusinessUnitChangeAssociateModeAction) update action.
    old_associate_mode: "BusinessUnitAssociateMode"

    def __init__(
        self,
        *,
        associate_mode: "BusinessUnitAssociateMode",
        old_associate_mode: "BusinessUnitAssociateMode"
    ):
        self.associate_mode = associate_mode
        self.old_associate_mode = old_associate_mode

        super().__init__(type="BusinessUnitAssociateModeChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAssociateModeChangedMessagePayload":
        from ._schemas.message import (
            BusinessUnitAssociateModeChangedMessagePayloadSchema,
        )

        return BusinessUnitAssociateModeChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            BusinessUnitAssociateModeChangedMessagePayloadSchema,
        )

        return BusinessUnitAssociateModeChangedMessagePayloadSchema().dump(self)


class BusinessUnitAssociateRemovedMessagePayload(MessagePayload):
    """Generated after a successful [Remove Associate](ctp:api:type:BusinessUnitRemoveAssociateAction) update action."""

    #: The [Associate](ctp:api:type:Associate) that was removed from the [Business Unit](ctp:api:type:BusinessUnit).
    associate: "Associate"

    def __init__(self, *, associate: "Associate"):
        self.associate = associate

        super().__init__(type="BusinessUnitAssociateRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAssociateRemovedMessagePayload":
        from ._schemas.message import BusinessUnitAssociateRemovedMessagePayloadSchema

        return BusinessUnitAssociateRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAssociateRemovedMessagePayloadSchema

        return BusinessUnitAssociateRemovedMessagePayloadSchema().dump(self)


class BusinessUnitAssociatesSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Associates](ctp:api:type:BusinessUnitSetAssociatesAction) update action."""

    #: The list of [Associates](ctp:api:type:Associate) that was updated on the [Business Unit](ctp:api:type:BusinessUnit).
    associates: typing.List["Associate"]

    def __init__(self, *, associates: typing.List["Associate"]):
        self.associates = associates

        super().__init__(type="BusinessUnitAssociatesSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitAssociatesSetMessagePayload":
        from ._schemas.message import BusinessUnitAssociatesSetMessagePayloadSchema

        return BusinessUnitAssociatesSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitAssociatesSetMessagePayloadSchema

        return BusinessUnitAssociatesSetMessagePayloadSchema().dump(self)


class BusinessUnitBillingAddressAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Billing Address Identifier](ctp:api:type:BusinessUnitAddBillingAddressIdAction) update action."""

    #: The address that was added to the [Business Unit](ctp:api:type:BusinessUnit) as billing address.
    address: "Address"

    def __init__(self, *, address: "Address"):
        self.address = address

        super().__init__(type="BusinessUnitBillingAddressAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitBillingAddressAddedMessagePayload":
        from ._schemas.message import (
            BusinessUnitBillingAddressAddedMessagePayloadSchema,
        )

        return BusinessUnitBillingAddressAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            BusinessUnitBillingAddressAddedMessagePayloadSchema,
        )

        return BusinessUnitBillingAddressAddedMessagePayloadSchema().dump(self)


class BusinessUnitBillingAddressRemovedMessagePayload(MessagePayload):
    """Generated after a successful [Remove Billing Address Identifier](ctp:api:type:BusinessUnitRemoveBillingAddressIdAction) update action."""

    #: The address that was removed from the billing addresses of the [Business Unit](ctp:api:type:BusinessUnit).
    address: "Address"

    def __init__(self, *, address: "Address"):
        self.address = address

        super().__init__(type="BusinessUnitBillingAddressRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitBillingAddressRemovedMessagePayload":
        from ._schemas.message import (
            BusinessUnitBillingAddressRemovedMessagePayloadSchema,
        )

        return BusinessUnitBillingAddressRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            BusinessUnitBillingAddressRemovedMessagePayloadSchema,
        )

        return BusinessUnitBillingAddressRemovedMessagePayloadSchema().dump(self)


class BusinessUnitContactEmailSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Contact Email](ctp:api:type:BusinessUnitSetContactEmailAction) update action."""

    #: The contact email that was updated on the [Business Unit](ctp:api:type:BusinessUnit).
    contact_email: typing.Optional[str]

    def __init__(self, *, contact_email: typing.Optional[str] = None):
        self.contact_email = contact_email

        super().__init__(type="BusinessUnitContactEmailSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitContactEmailSetMessagePayload":
        from ._schemas.message import BusinessUnitContactEmailSetMessagePayloadSchema

        return BusinessUnitContactEmailSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitContactEmailSetMessagePayloadSchema

        return BusinessUnitContactEmailSetMessagePayloadSchema().dump(self)


class BusinessUnitCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create Business Unit](/projects/business-units#create-businessunit) request."""

    #: The [Business Unit](ctp:api:type:BusinessUnit) that was created.
    business_unit: "BusinessUnit"

    def __init__(self, *, business_unit: "BusinessUnit"):
        self.business_unit = business_unit

        super().__init__(type="BusinessUnitCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitCreatedMessagePayload":
        from ._schemas.message import BusinessUnitCreatedMessagePayloadSchema

        return BusinessUnitCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitCreatedMessagePayloadSchema

        return BusinessUnitCreatedMessagePayloadSchema().dump(self)


class BusinessUnitDefaultBillingAddressSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Default Billing Address](ctp:api:type:BusinessUnitSetDefaultBillingAddressAction) update action."""

    #: The address that was set as the default billing address.
    address: typing.Optional["Address"]

    def __init__(self, *, address: typing.Optional["Address"] = None):
        self.address = address

        super().__init__(type="BusinessUnitDefaultBillingAddressSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitDefaultBillingAddressSetMessagePayload":
        from ._schemas.message import (
            BusinessUnitDefaultBillingAddressSetMessagePayloadSchema,
        )

        return BusinessUnitDefaultBillingAddressSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            BusinessUnitDefaultBillingAddressSetMessagePayloadSchema,
        )

        return BusinessUnitDefaultBillingAddressSetMessagePayloadSchema().dump(self)


class BusinessUnitDefaultShippingAddressSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Default Shipping Address](ctp:api:type:BusinessUnitSetDefaultShippingAddressAction) update action."""

    #: The address that was set as the default shipping address.
    address: typing.Optional["Address"]

    def __init__(self, *, address: typing.Optional["Address"] = None):
        self.address = address

        super().__init__(type="BusinessUnitDefaultShippingAddressSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitDefaultShippingAddressSetMessagePayload":
        from ._schemas.message import (
            BusinessUnitDefaultShippingAddressSetMessagePayloadSchema,
        )

        return BusinessUnitDefaultShippingAddressSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            BusinessUnitDefaultShippingAddressSetMessagePayloadSchema,
        )

        return BusinessUnitDefaultShippingAddressSetMessagePayloadSchema().dump(self)


class BusinessUnitDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Delete Business Unit](/projects/business-units#delete-businessunit) request."""

    def __init__(self):
        super().__init__(type="BusinessUnitDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitDeletedMessagePayload":
        from ._schemas.message import BusinessUnitDeletedMessagePayloadSchema

        return BusinessUnitDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitDeletedMessagePayloadSchema

        return BusinessUnitDeletedMessagePayloadSchema().dump(self)


class BusinessUnitNameChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Name](ctp:api:type:BusinessUnitChangeNameAction) update action."""

    #: Updated name of the [Business Unit](ctp:api:type:BusinessUnit).
    name: str

    def __init__(self, *, name: str):
        self.name = name

        super().__init__(type="BusinessUnitNameChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitNameChangedMessagePayload":
        from ._schemas.message import BusinessUnitNameChangedMessagePayloadSchema

        return BusinessUnitNameChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitNameChangedMessagePayloadSchema

        return BusinessUnitNameChangedMessagePayloadSchema().dump(self)


class BusinessUnitParentUnitChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Parent Unit](ctp:api:type:BusinessUnitChangeParentUnitAction) update action."""

    #: Parent unit of the [Business Unit](ctp:api:type:BusinessUnit) before the [Change Parent Unit](ctp:api:type:BusinessUnitChangeParentUnitAction) update action.
    old_parent_unit: typing.Optional["BusinessUnitKeyReference"]
    #: Parent unit of the [Business Unit](ctp:api:type:BusinessUnit) after the [Change Parent Unit](ctp:api:type:BusinessUnitChangeParentUnitAction) update action.
    new_parent_unit: typing.Optional["BusinessUnitKeyReference"]

    def __init__(
        self,
        *,
        old_parent_unit: typing.Optional["BusinessUnitKeyReference"] = None,
        new_parent_unit: typing.Optional["BusinessUnitKeyReference"] = None
    ):
        self.old_parent_unit = old_parent_unit
        self.new_parent_unit = new_parent_unit

        super().__init__(type="BusinessUnitParentUnitChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitParentUnitChangedMessagePayload":
        from ._schemas.message import BusinessUnitParentUnitChangedMessagePayloadSchema

        return BusinessUnitParentUnitChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitParentUnitChangedMessagePayloadSchema

        return BusinessUnitParentUnitChangedMessagePayloadSchema().dump(self)


class BusinessUnitShippingAddressAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Shipping Address Identifier](ctp:api:type:BusinessUnitAddShippingAddressIdAction) update action."""

    #: The address that was added to the [Business Unit](ctp:api:type:BusinessUnit) as shipping address.
    address: "Address"

    def __init__(self, *, address: "Address"):
        self.address = address

        super().__init__(type="BusinessUnitShippingAddressAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitShippingAddressAddedMessagePayload":
        from ._schemas.message import (
            BusinessUnitShippingAddressAddedMessagePayloadSchema,
        )

        return BusinessUnitShippingAddressAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            BusinessUnitShippingAddressAddedMessagePayloadSchema,
        )

        return BusinessUnitShippingAddressAddedMessagePayloadSchema().dump(self)


class BusinessUnitShippingAddressRemovedMessagePayload(MessagePayload):
    """Generated after a successful [Remove Shipping Address Identifier](ctp:api:type:BusinessUnitRemoveShippingAddressIdAction) update action."""

    #: The address that was removed from shipping addresses of the [Business Unit](ctp:api:type:BusinessUnit).
    address: "Address"

    def __init__(self, *, address: "Address"):
        self.address = address

        super().__init__(type="BusinessUnitShippingAddressRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitShippingAddressRemovedMessagePayload":
        from ._schemas.message import (
            BusinessUnitShippingAddressRemovedMessagePayloadSchema,
        )

        return BusinessUnitShippingAddressRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            BusinessUnitShippingAddressRemovedMessagePayloadSchema,
        )

        return BusinessUnitShippingAddressRemovedMessagePayloadSchema().dump(self)


class BusinessUnitStatusChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Status](ctp:api:type:BusinessUnitChangeStatusAction) update action."""

    #: Updated status of the [Business Unit](ctp:api:type:BusinessUnit).
    active: "BusinessUnitStatus"

    def __init__(self, *, active: "BusinessUnitStatus"):
        self.active = active

        super().__init__(type="BusinessUnitStatusChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitStatusChangedMessagePayload":
        from ._schemas.message import BusinessUnitStatusChangedMessagePayloadSchema

        return BusinessUnitStatusChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitStatusChangedMessagePayloadSchema

        return BusinessUnitStatusChangedMessagePayloadSchema().dump(self)


class BusinessUnitStoreAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Store](ctp:api:type:BusinessUnitAddStoreAction) update action."""

    #: The [Store](ctp:api:type:Store) that was added to the [Business Unit](ctp:api:type:BusinessUnit).
    store: "StoreKeyReference"

    def __init__(self, *, store: "StoreKeyReference"):
        self.store = store

        super().__init__(type="BusinessUnitStoreAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitStoreAddedMessagePayload":
        from ._schemas.message import BusinessUnitStoreAddedMessagePayloadSchema

        return BusinessUnitStoreAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitStoreAddedMessagePayloadSchema

        return BusinessUnitStoreAddedMessagePayloadSchema().dump(self)


class BusinessUnitStoreModeChangedMessagePayload(MessagePayload):
    """Generated after a successful [Set Store Mode](ctp:api:type:BusinessUnitSetStoreModeAction) update action."""

    #: [Stores](ctp:api:type:Store) of the [Business Unit](ctp:api:type:BusinessUnit) after the [Set Store Mode](ctp:api:type:BusinessUnitSetStoreModeAction) update action.
    stores: typing.List["StoreKeyReference"]
    #: [BusinessUnitStoreMode](ctp:api:type:BusinessUnitStoreMode) of the Business Unit after the [Set Store Mode](ctp:api:type:BusinessUnitSetStoreModeAction) update action.
    store_mode: "BusinessUnitStoreMode"
    #: [Stores](ctp:api:type:Store) of the [Business Unit](ctp:api:type:BusinessUnit) before the [Set Store Mode](ctp:api:type:BusinessUnitSetStoreModeAction) update action.
    old_stores: typing.List["StoreKeyReference"]
    #: [BusinessUnitStoreMode](ctp:api:type:BusinessUnitStoreMode) of the Business Unit before the [Set Store Mode](ctp:api:type:BusinessUnitSetStoreModeAction) update action.
    old_store_mode: "BusinessUnitStoreMode"

    def __init__(
        self,
        *,
        stores: typing.List["StoreKeyReference"],
        store_mode: "BusinessUnitStoreMode",
        old_stores: typing.List["StoreKeyReference"],
        old_store_mode: "BusinessUnitStoreMode"
    ):
        self.stores = stores
        self.store_mode = store_mode
        self.old_stores = old_stores
        self.old_store_mode = old_store_mode

        super().__init__(type="BusinessUnitStoreModeChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitStoreModeChangedMessagePayload":
        from ._schemas.message import BusinessUnitStoreModeChangedMessagePayloadSchema

        return BusinessUnitStoreModeChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitStoreModeChangedMessagePayloadSchema

        return BusinessUnitStoreModeChangedMessagePayloadSchema().dump(self)


class BusinessUnitStoreRemovedMessagePayload(MessagePayload):
    #: The [Store](ctp:api:type:Store) that was removed from the [Business Unit](ctp:api:type:BusinessUnit).
    store: "StoreKeyReference"

    def __init__(self, *, store: "StoreKeyReference"):
        self.store = store

        super().__init__(type="BusinessUnitStoreRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitStoreRemovedMessagePayload":
        from ._schemas.message import BusinessUnitStoreRemovedMessagePayloadSchema

        return BusinessUnitStoreRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitStoreRemovedMessagePayloadSchema

        return BusinessUnitStoreRemovedMessagePayloadSchema().dump(self)


class BusinessUnitStoresSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Stores](ctp:api:type:BusinessUnitSetStoresAction) update action."""

    #: [Stores](ctp:api:type:Store) of the [Business Unit](ctp:api:type:BusinessUnit) after the [Set Stores](ctp:api:type:BusinessUnitSetStoresAction) update action.
    stores: typing.List["StoreKeyReference"]

    def __init__(self, *, stores: typing.List["StoreKeyReference"]):
        self.stores = stores

        super().__init__(type="BusinessUnitStoresSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "BusinessUnitStoresSetMessagePayload":
        from ._schemas.message import BusinessUnitStoresSetMessagePayloadSchema

        return BusinessUnitStoresSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import BusinessUnitStoresSetMessagePayloadSchema

        return BusinessUnitStoresSetMessagePayloadSchema().dump(self)


class CategoryCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create Category](/../api/projects/categories#create-category) request."""

    #: [Category](ctp:api:type:Category) that was created.
    category: "Category"

    def __init__(self, *, category: "Category"):
        self.category = category

        super().__init__(type="CategoryCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CategoryCreatedMessagePayload":
        from ._schemas.message import CategoryCreatedMessagePayloadSchema

        return CategoryCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CategoryCreatedMessagePayloadSchema

        return CategoryCreatedMessagePayloadSchema().dump(self)


class CategorySlugChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Slug](ctp:api:type:CategoryChangeSlugAction) update action."""

    #: The slug of the [Category](ctp:api:type:Category) after the [Change Slug](ctp:api:type:CategoryChangeSlugAction) update action.
    slug: "LocalizedString"
    #: The slug of the [Category](ctp:api:type:Category) before the [Change Slug](ctp:api:type:CategoryChangeSlugAction) update action.
    old_slug: typing.Optional["LocalizedString"]

    def __init__(
        self,
        *,
        slug: "LocalizedString",
        old_slug: typing.Optional["LocalizedString"] = None
    ):
        self.slug = slug
        self.old_slug = old_slug

        super().__init__(type="CategorySlugChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CategorySlugChangedMessagePayload":
        from ._schemas.message import CategorySlugChangedMessagePayloadSchema

        return CategorySlugChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CategorySlugChangedMessagePayloadSchema

        return CategorySlugChangedMessagePayloadSchema().dump(self)


class CustomerAddressAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Address](ctp:api:type:CustomerAddAddressAction) update action."""

    #: [Address](ctp:api:type:Address) that was added during the [Add Address](ctp:api:type:CustomerAddAddressAction) update action.
    address: "Address"

    def __init__(self, *, address: "Address"):
        self.address = address

        super().__init__(type="CustomerAddressAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerAddressAddedMessagePayload":
        from ._schemas.message import CustomerAddressAddedMessagePayloadSchema

        return CustomerAddressAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerAddressAddedMessagePayloadSchema

        return CustomerAddressAddedMessagePayloadSchema().dump(self)


class CustomerAddressChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Address](ctp:api:type:CustomerChangeAddressAction) update action."""

    #: [Address](ctp:api:type:Address) that was set during the [Change Address](ctp:api:type:CustomerChangeAddressAction) update action.
    address: "Address"

    def __init__(self, *, address: "Address"):
        self.address = address

        super().__init__(type="CustomerAddressChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerAddressChangedMessagePayload":
        from ._schemas.message import CustomerAddressChangedMessagePayloadSchema

        return CustomerAddressChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerAddressChangedMessagePayloadSchema

        return CustomerAddressChangedMessagePayloadSchema().dump(self)


class CustomerAddressRemovedMessagePayload(MessagePayload):
    """Generated after a successful [Remove Address](ctp:api:type:CustomerRemoveAddressAction) update action."""

    #: [Address](ctp:api:type:Address) that was removed during the [Remove Address](ctp:api:type:CustomerRemoveAddressAction) update action.
    address: "Address"

    def __init__(self, *, address: "Address"):
        self.address = address

        super().__init__(type="CustomerAddressRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerAddressRemovedMessagePayload":
        from ._schemas.message import CustomerAddressRemovedMessagePayloadSchema

        return CustomerAddressRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerAddressRemovedMessagePayloadSchema

        return CustomerAddressRemovedMessagePayloadSchema().dump(self)


class CustomerCompanyNameSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Company Name](ctp:api:type:CustomerSetCompanyNameAction) update action."""

    #: The `companyName` that was set during the [Set Company Name](ctp:api:type:CustomerSetCompanyNameAction) update action.
    company_name: typing.Optional[str]

    def __init__(self, *, company_name: typing.Optional[str] = None):
        self.company_name = company_name

        super().__init__(type="CustomerCompanyNameSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerCompanyNameSetMessagePayload":
        from ._schemas.message import CustomerCompanyNameSetMessagePayloadSchema

        return CustomerCompanyNameSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerCompanyNameSetMessagePayloadSchema

        return CustomerCompanyNameSetMessagePayloadSchema().dump(self)


class CustomerCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create Customer](/../api/projects/customers#create-sign-up-customer) request."""

    #: [Customer](ctp:api:type:Customer) that was created.
    customer: "Customer"

    def __init__(self, *, customer: "Customer"):
        self.customer = customer

        super().__init__(type="CustomerCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerCreatedMessagePayload":
        from ._schemas.message import CustomerCreatedMessagePayloadSchema

        return CustomerCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerCreatedMessagePayloadSchema

        return CustomerCreatedMessagePayloadSchema().dump(self)


class CustomerDateOfBirthSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Date of Birth](ctp:api:type:CustomerSetDateOfBirthAction) update action."""

    #: The `dateOfBirth` that was set during the [Set Date of Birth](ctp:api:type:CustomerSetDateOfBirthAction) update action.
    date_of_birth: typing.Optional[datetime.date]

    def __init__(self, *, date_of_birth: typing.Optional[datetime.date] = None):
        self.date_of_birth = date_of_birth

        super().__init__(type="CustomerDateOfBirthSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerDateOfBirthSetMessagePayload":
        from ._schemas.message import CustomerDateOfBirthSetMessagePayloadSchema

        return CustomerDateOfBirthSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerDateOfBirthSetMessagePayloadSchema

        return CustomerDateOfBirthSetMessagePayloadSchema().dump(self)


class CustomerDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Delete Customer](/../api/projects/customers#delete-customer) request."""

    def __init__(self):
        super().__init__(type="CustomerDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerDeletedMessagePayload":
        from ._schemas.message import CustomerDeletedMessagePayloadSchema

        return CustomerDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerDeletedMessagePayloadSchema

        return CustomerDeletedMessagePayloadSchema().dump(self)


class CustomerEmailChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Email](ctp:api:type:CustomerChangeEmailAction) update action."""

    #: The `email` that was set during the [Change Email](ctp:api:type:CustomerChangeEmailAction) update action.
    email: str

    def __init__(self, *, email: str):
        self.email = email

        super().__init__(type="CustomerEmailChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerEmailChangedMessagePayload":
        from ._schemas.message import CustomerEmailChangedMessagePayloadSchema

        return CustomerEmailChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerEmailChangedMessagePayloadSchema

        return CustomerEmailChangedMessagePayloadSchema().dump(self)


class CustomerEmailVerifiedMessagePayload(MessagePayload):
    """Generated after a successful [Verify Customer's Email](/../api/projects/customers#verify-email-of-customer) request."""

    def __init__(self):
        super().__init__(type="CustomerEmailVerified")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerEmailVerifiedMessagePayload":
        from ._schemas.message import CustomerEmailVerifiedMessagePayloadSchema

        return CustomerEmailVerifiedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerEmailVerifiedMessagePayloadSchema

        return CustomerEmailVerifiedMessagePayloadSchema().dump(self)


class CustomerFirstNameSetMessagePayload(MessagePayload):
    """Generated after a successful [Set First Name](ctp:api:type:CustomerSetFirstNameAction) update action."""

    #: The `firstName` that was set during the [Set First Name](ctp:api:type:CustomerSetFirstNameAction) update action.
    first_name: typing.Optional[str]

    def __init__(self, *, first_name: typing.Optional[str] = None):
        self.first_name = first_name

        super().__init__(type="CustomerFirstNameSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerFirstNameSetMessagePayload":
        from ._schemas.message import CustomerFirstNameSetMessagePayloadSchema

        return CustomerFirstNameSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerFirstNameSetMessagePayloadSchema

        return CustomerFirstNameSetMessagePayloadSchema().dump(self)


class CustomerGroupSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Customer Group](ctp:api:type:CustomerSetCustomerGroupAction) update action."""

    #: [Customer Group](ctp:api:type:CustomerGroup) that was set during the [Set Customer Group](ctp:api:type:CustomerSetCustomerGroupAction) update action.
    customer_group: typing.Optional["CustomerGroupReference"]

    def __init__(
        self, *, customer_group: typing.Optional["CustomerGroupReference"] = None
    ):
        self.customer_group = customer_group

        super().__init__(type="CustomerGroupSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerGroupSetMessagePayload":
        from ._schemas.message import CustomerGroupSetMessagePayloadSchema

        return CustomerGroupSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerGroupSetMessagePayloadSchema

        return CustomerGroupSetMessagePayloadSchema().dump(self)


class CustomerLastNameSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Last Name](ctp:api:type:CustomerSetLastNameAction) update action."""

    #: The `lastName` that was set during the [Set Last Name](ctp:api:type:CustomerSetLastNameAction) update action.
    last_name: typing.Optional[str]

    def __init__(self, *, last_name: typing.Optional[str] = None):
        self.last_name = last_name

        super().__init__(type="CustomerLastNameSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerLastNameSetMessagePayload":
        from ._schemas.message import CustomerLastNameSetMessagePayloadSchema

        return CustomerLastNameSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerLastNameSetMessagePayloadSchema

        return CustomerLastNameSetMessagePayloadSchema().dump(self)


class CustomerPasswordUpdatedMessagePayload(MessagePayload):
    """Generated after a successful [Reset Customer's Password](/../api/projects/customers#reset-password-of-customer), [Reset Customer's Password in a Store](/../api/projects/customers#reset-password-of-customer-in-store), [Change Customer's Password](/../api/projects/customers#change-password-of-customer), or [Change Customer's Password in a Store](/../api/projects/customers#change-password-of-customer-in-store) request. This Message is also produced during equivalent requests to the [My Customer Profile](/../api/projects/me-profile) endpoint."""

    #: Whether the Customer's password was updated during the [Reset password](/../api/projects/customers#password-reset-of-customer) or [Change password](/../api/projects/customers#change-password-of-customer) flow.
    reset: bool

    def __init__(self, *, reset: bool):
        self.reset = reset

        super().__init__(type="CustomerPasswordUpdated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerPasswordUpdatedMessagePayload":
        from ._schemas.message import CustomerPasswordUpdatedMessagePayloadSchema

        return CustomerPasswordUpdatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerPasswordUpdatedMessagePayloadSchema

        return CustomerPasswordUpdatedMessagePayloadSchema().dump(self)


class CustomerTitleSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Title](ctp:api:type:CustomerSetTitleAction) update action."""

    #: The `title` that was set during the [Set Title](ctp:api:type:CustomerSetTitleAction) update action.
    title: typing.Optional[str]

    def __init__(self, *, title: typing.Optional[str] = None):
        self.title = title

        super().__init__(type="CustomerTitleSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomerTitleSetMessagePayload":
        from ._schemas.message import CustomerTitleSetMessagePayloadSchema

        return CustomerTitleSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomerTitleSetMessagePayloadSchema

        return CustomerTitleSetMessagePayloadSchema().dump(self)


class InventoryEntryCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create InventoryEntry](/../api/projects/inventory#create-inventoryentry) request."""

    #: [InventoryEntry](ctp:api:type:InventoryEntry) that was created.
    inventory_entry: "InventoryEntry"

    def __init__(self, *, inventory_entry: "InventoryEntry"):
        self.inventory_entry = inventory_entry

        super().__init__(type="InventoryEntryCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "InventoryEntryCreatedMessagePayload":
        from ._schemas.message import InventoryEntryCreatedMessagePayloadSchema

        return InventoryEntryCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import InventoryEntryCreatedMessagePayloadSchema

        return InventoryEntryCreatedMessagePayloadSchema().dump(self)


class InventoryEntryDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Delete InventoryEntry](/../api/projects/inventory#delete-inventoryentry) request."""

    #: The `sku` of the [InventoryEntry](ctp:api:type:InventoryEntry) that was deleted.
    sku: str
    #: [Reference](ctp:api:type:Reference) to the [Channel](ctp:api:type:Channel) where the [InventoryEntry](ctp:api:type:InventoryEntry) was deleted.
    supply_channel: typing.Optional["ChannelReference"]

    def __init__(
        self, *, sku: str, supply_channel: typing.Optional["ChannelReference"] = None
    ):
        self.sku = sku
        self.supply_channel = supply_channel

        super().__init__(type="InventoryEntryDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "InventoryEntryDeletedMessagePayload":
        from ._schemas.message import InventoryEntryDeletedMessagePayloadSchema

        return InventoryEntryDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import InventoryEntryDeletedMessagePayloadSchema

        return InventoryEntryDeletedMessagePayloadSchema().dump(self)


class InventoryEntryQuantitySetMessagePayload(MessagePayload):
    """Generated after a successful [Add Quantity](ctp:api:type:InventoryEntryAddQuantityAction), [Remove Quantity](ctp:api:type:InventoryEntryRemoveQuantityAction) or [Change Quantity](ctp:api:type:InventoryEntryChangeQuantityAction) update action.
    Inventory changes as a result of [Order creation](/../api/projects/orders#create-order) do not trigger this message.

    """

    #: Quantity on stock for the [InventoryEntry](ctp:api:type:InventoryEntry) before the quantity was updated.
    old_quantity_on_stock: int
    #: Quantity on stock for the [InventoryEntry](ctp:api:type:InventoryEntry) after the quantity was updated.
    new_quantity_on_stock: int
    #: Available quantity for the [InventoryEntry](ctp:api:type:InventoryEntry) before the quantity was updated.
    old_available_quantity: int
    #: Available quantity for the [InventoryEntry](ctp:api:type:InventoryEntry) after the quantity was updated.
    new_available_quantity: int
    #: [Reference](ctp:api:type:Reference) to the [Channel](ctp:api:type:Channel) where the [InventoryEntry](ctp:api:type:InventoryEntry) quantity was set.
    supply_channel: typing.Optional["ChannelReference"]

    def __init__(
        self,
        *,
        old_quantity_on_stock: int,
        new_quantity_on_stock: int,
        old_available_quantity: int,
        new_available_quantity: int,
        supply_channel: typing.Optional["ChannelReference"] = None
    ):
        self.old_quantity_on_stock = old_quantity_on_stock
        self.new_quantity_on_stock = new_quantity_on_stock
        self.old_available_quantity = old_available_quantity
        self.new_available_quantity = new_available_quantity
        self.supply_channel = supply_channel

        super().__init__(type="InventoryEntryQuantitySet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "InventoryEntryQuantitySetMessagePayload":
        from ._schemas.message import InventoryEntryQuantitySetMessagePayloadSchema

        return InventoryEntryQuantitySetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import InventoryEntryQuantitySetMessagePayloadSchema

        return InventoryEntryQuantitySetMessagePayloadSchema().dump(self)


class OrderMessagePayload(MessagePayload):
    def __init__(self, *, type: str):
        super().__init__(type=type)

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "OrderMessagePayload":
        if data["type"] == "CustomLineItemStateTransition":
            from ._schemas.message import (
                CustomLineItemStateTransitionMessagePayloadSchema,
            )

            return CustomLineItemStateTransitionMessagePayloadSchema().load(data)
        if data["type"] == "DeliveryAdded":
            from ._schemas.message import DeliveryAddedMessagePayloadSchema

            return DeliveryAddedMessagePayloadSchema().load(data)
        if data["type"] == "DeliveryAddressSet":
            from ._schemas.message import DeliveryAddressSetMessagePayloadSchema

            return DeliveryAddressSetMessagePayloadSchema().load(data)
        if data["type"] == "DeliveryItemsUpdated":
            from ._schemas.message import DeliveryItemsUpdatedMessagePayloadSchema

            return DeliveryItemsUpdatedMessagePayloadSchema().load(data)
        if data["type"] == "DeliveryRemoved":
            from ._schemas.message import DeliveryRemovedMessagePayloadSchema

            return DeliveryRemovedMessagePayloadSchema().load(data)
        if data["type"] == "LineItemStateTransition":
            from ._schemas.message import LineItemStateTransitionMessagePayloadSchema

            return LineItemStateTransitionMessagePayloadSchema().load(data)
        if data["type"] == "OrderBillingAddressSet":
            from ._schemas.message import OrderBillingAddressSetMessagePayloadSchema

            return OrderBillingAddressSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderCreated":
            from ._schemas.message import OrderCreatedMessagePayloadSchema

            return OrderCreatedMessagePayloadSchema().load(data)
        if data["type"] == "OrderCustomLineItemAdded":
            from ._schemas.message import OrderCustomLineItemAddedMessagePayloadSchema

            return OrderCustomLineItemAddedMessagePayloadSchema().load(data)
        if data["type"] == "OrderCustomLineItemDiscountSet":
            from ._schemas.message import (
                OrderCustomLineItemDiscountSetMessagePayloadSchema,
            )

            return OrderCustomLineItemDiscountSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderCustomLineItemQuantityChanged":
            from ._schemas.message import (
                OrderCustomLineItemQuantityChangedMessagePayloadSchema,
            )

            return OrderCustomLineItemQuantityChangedMessagePayloadSchema().load(data)
        if data["type"] == "OrderCustomLineItemRemoved":
            from ._schemas.message import OrderCustomLineItemRemovedMessagePayloadSchema

            return OrderCustomLineItemRemovedMessagePayloadSchema().load(data)
        if data["type"] == "OrderCustomerEmailSet":
            from ._schemas.message import OrderCustomerEmailSetMessagePayloadSchema

            return OrderCustomerEmailSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderCustomerGroupSet":
            from ._schemas.message import OrderCustomerGroupSetMessagePayloadSchema

            return OrderCustomerGroupSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderCustomerSet":
            from ._schemas.message import OrderCustomerSetMessagePayloadSchema

            return OrderCustomerSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderDeleted":
            from ._schemas.message import OrderDeletedMessagePayloadSchema

            return OrderDeletedMessagePayloadSchema().load(data)
        if data["type"] == "OrderDiscountCodeAdded":
            from ._schemas.message import OrderDiscountCodeAddedMessagePayloadSchema

            return OrderDiscountCodeAddedMessagePayloadSchema().load(data)
        if data["type"] == "OrderDiscountCodeRemoved":
            from ._schemas.message import OrderDiscountCodeRemovedMessagePayloadSchema

            return OrderDiscountCodeRemovedMessagePayloadSchema().load(data)
        if data["type"] == "OrderDiscountCodeStateSet":
            from ._schemas.message import OrderDiscountCodeStateSetMessagePayloadSchema

            return OrderDiscountCodeStateSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderEditApplied":
            from ._schemas.message import OrderEditAppliedMessagePayloadSchema

            return OrderEditAppliedMessagePayloadSchema().load(data)
        if data["type"] == "OrderImported":
            from ._schemas.message import OrderImportedMessagePayloadSchema

            return OrderImportedMessagePayloadSchema().load(data)
        if data["type"] == "OrderLineItemAdded":
            from ._schemas.message import OrderLineItemAddedMessagePayloadSchema

            return OrderLineItemAddedMessagePayloadSchema().load(data)
        if data["type"] == "OrderLineItemDiscountSet":
            from ._schemas.message import OrderLineItemDiscountSetMessagePayloadSchema

            return OrderLineItemDiscountSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderLineItemDistributionChannelSet":
            from ._schemas.message import (
                OrderLineItemDistributionChannelSetMessagePayloadSchema,
            )

            return OrderLineItemDistributionChannelSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderLineItemRemoved":
            from ._schemas.message import OrderLineItemRemovedMessagePayloadSchema

            return OrderLineItemRemovedMessagePayloadSchema().load(data)
        if data["type"] == "OrderPaymentStateChanged":
            from ._schemas.message import OrderPaymentStateChangedMessagePayloadSchema

            return OrderPaymentStateChangedMessagePayloadSchema().load(data)
        if data["type"] == "OrderPurchaseOrderNumberSet":
            from ._schemas.message import (
                OrderPurchaseOrderNumberSetMessagePayloadSchema,
            )

            return OrderPurchaseOrderNumberSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderReturnShipmentStateChanged":
            from ._schemas.message import (
                OrderReturnShipmentStateChangedMessagePayloadSchema,
            )

            return OrderReturnShipmentStateChangedMessagePayloadSchema().load(data)
        if data["type"] == "OrderShipmentStateChanged":
            from ._schemas.message import OrderShipmentStateChangedMessagePayloadSchema

            return OrderShipmentStateChangedMessagePayloadSchema().load(data)
        if data["type"] == "OrderShippingAddressSet":
            from ._schemas.message import OrderShippingAddressSetMessagePayloadSchema

            return OrderShippingAddressSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderShippingInfoSet":
            from ._schemas.message import OrderShippingInfoSetMessagePayloadSchema

            return OrderShippingInfoSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderShippingRateInputSet":
            from ._schemas.message import OrderShippingRateInputSetMessagePayloadSchema

            return OrderShippingRateInputSetMessagePayloadSchema().load(data)
        if data["type"] == "OrderStateChanged":
            from ._schemas.message import OrderStateChangedMessagePayloadSchema

            return OrderStateChangedMessagePayloadSchema().load(data)
        if data["type"] == "OrderStateTransition":
            from ._schemas.message import OrderStateTransitionMessagePayloadSchema

            return OrderStateTransitionMessagePayloadSchema().load(data)
        if data["type"] == "OrderStoreSet":
            from ._schemas.message import OrderStoreSetMessagePayloadSchema

            return OrderStoreSetMessagePayloadSchema().load(data)
        if data["type"] == "ParcelAddedToDelivery":
            from ._schemas.message import ParcelAddedToDeliveryMessagePayloadSchema

            return ParcelAddedToDeliveryMessagePayloadSchema().load(data)
        if data["type"] == "ParcelItemsUpdated":
            from ._schemas.message import ParcelItemsUpdatedMessagePayloadSchema

            return ParcelItemsUpdatedMessagePayloadSchema().load(data)
        if data["type"] == "ParcelMeasurementsUpdated":
            from ._schemas.message import ParcelMeasurementsUpdatedMessagePayloadSchema

            return ParcelMeasurementsUpdatedMessagePayloadSchema().load(data)
        if data["type"] == "ParcelRemovedFromDelivery":
            from ._schemas.message import ParcelRemovedFromDeliveryMessagePayloadSchema

            return ParcelRemovedFromDeliveryMessagePayloadSchema().load(data)
        if data["type"] == "ParcelTrackingDataUpdated":
            from ._schemas.message import ParcelTrackingDataUpdatedMessagePayloadSchema

            return ParcelTrackingDataUpdatedMessagePayloadSchema().load(data)
        if data["type"] == "ReturnInfoAdded":
            from ._schemas.message import ReturnInfoAddedMessagePayloadSchema

            return ReturnInfoAddedMessagePayloadSchema().load(data)
        if data["type"] == "ReturnInfoSet":
            from ._schemas.message import ReturnInfoSetMessagePayloadSchema

            return ReturnInfoSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderMessagePayloadSchema

        return OrderMessagePayloadSchema().dump(self)


class CustomLineItemStateTransitionMessagePayload(OrderMessagePayload):
    """Generated after a successful [Transition Custom Line Item State](ctp:api:type:OrderTransitionCustomLineItemStateAction) update action."""

    #: Unique identifier of the [Custom Line Item](ctp:api:type:CustomLineItem).
    custom_line_item_id: str
    #: Date and time (UTC) when the transition of the [Custom Line Item](ctp:api:type:CustomLineItem) [State](ctp:api:type:State) was performed.
    transition_date: datetime.datetime
    #: Number of [Custom Line Items](ctp:api:type:CustomLineItem) for which the [State](ctp:api:type:State) was transitioned.
    quantity: int
    #: [State](ctp:api:type:State) the [Custom Line Item](ctp:api:type:CustomLineItem) was transitioned from.
    from_state: "StateReference"
    #: [State](ctp:api:type:State) the [Custom Line Item](ctp:api:type:CustomLineItem) was transitioned to.
    to_state: "StateReference"

    def __init__(
        self,
        *,
        custom_line_item_id: str,
        transition_date: datetime.datetime,
        quantity: int,
        from_state: "StateReference",
        to_state: "StateReference"
    ):
        self.custom_line_item_id = custom_line_item_id
        self.transition_date = transition_date
        self.quantity = quantity
        self.from_state = from_state
        self.to_state = to_state

        super().__init__(type="CustomLineItemStateTransition")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomLineItemStateTransitionMessagePayload":
        from ._schemas.message import CustomLineItemStateTransitionMessagePayloadSchema

        return CustomLineItemStateTransitionMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import CustomLineItemStateTransitionMessagePayloadSchema

        return CustomLineItemStateTransitionMessagePayloadSchema().dump(self)


class DeliveryAddedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Add Delivery](ctp:api:type:OrderAddDeliveryAction) update action."""

    #: [Delivery](ctp:api:type:Delivery) that was added to the [Order](ctp:api:type:Order). The [Delivery](ctp:api:type:Delivery) in the Message body does not contain [Parcels](ctp:api:type:Parcel) if those were part of the initial [Add Delivery](ctp:api:type:OrderAddDeliveryAction) update action. In that case, the update action produces an additional [ParcelAddedToDelivery](ctp:api:type:ParcelAddedToDeliveryMessage) Message containing information about the [Parcels](ctp:api:type:Parcel).
    delivery: "Delivery"
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self, *, delivery: "Delivery", shipping_key: typing.Optional[str] = None
    ):
        self.delivery = delivery
        self.shipping_key = shipping_key

        super().__init__(type="DeliveryAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "DeliveryAddedMessagePayload":
        from ._schemas.message import DeliveryAddedMessagePayloadSchema

        return DeliveryAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import DeliveryAddedMessagePayloadSchema

        return DeliveryAddedMessagePayloadSchema().dump(self)


class DeliveryAddressSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Delivery Address](ctp:api:type:OrderSetDeliveryAddressAction) update action."""

    #: Unique identifier of the [Parcel](ctp:api:type:Delivery).
    delivery_id: str
    #: [Address](ctp:api:type:Address) after the [Set Delivery Address](ctp:api:type:OrderSetDeliveryAddressAction) update action.
    address: typing.Optional["Address"]
    #: [Address](ctp:api:type:Address) before the [Set Delivery Address](ctp:api:type:OrderSetDeliveryAddressAction) update action.
    old_address: typing.Optional["Address"]
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        delivery_id: str,
        address: typing.Optional["Address"] = None,
        old_address: typing.Optional["Address"] = None,
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery_id = delivery_id
        self.address = address
        self.old_address = old_address
        self.shipping_key = shipping_key

        super().__init__(type="DeliveryAddressSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "DeliveryAddressSetMessagePayload":
        from ._schemas.message import DeliveryAddressSetMessagePayloadSchema

        return DeliveryAddressSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import DeliveryAddressSetMessagePayloadSchema

        return DeliveryAddressSetMessagePayloadSchema().dump(self)


class DeliveryItemsUpdatedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Delivery Items](ctp:api:type:OrderSetDeliveryItemsAction) update action."""

    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery_id: str
    #: [Delivery Items](ctp:api:type:DeliveryItem) after the [Set Delivery Items](ctp:api:type:OrderSetDeliveryItemsAction) update action.
    items: typing.List["DeliveryItem"]
    #: [Delivery Items](ctp:api:type:DeliveryItem) before the [Set Delivery Items](ctp:api:type:OrderSetDeliveryItemsAction) update action.
    old_items: typing.List["DeliveryItem"]
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        delivery_id: str,
        items: typing.List["DeliveryItem"],
        old_items: typing.List["DeliveryItem"],
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery_id = delivery_id
        self.items = items
        self.old_items = old_items
        self.shipping_key = shipping_key

        super().__init__(type="DeliveryItemsUpdated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "DeliveryItemsUpdatedMessagePayload":
        from ._schemas.message import DeliveryItemsUpdatedMessagePayloadSchema

        return DeliveryItemsUpdatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import DeliveryItemsUpdatedMessagePayloadSchema

        return DeliveryItemsUpdatedMessagePayloadSchema().dump(self)


class DeliveryRemovedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Remove Delivery](ctp:api:type:OrderRemoveDeliveryAction) update action."""

    #: The [Delivery](ctp:api:type:Delivery) that was removed from the [Order](ctp:api:type:Order).
    delivery: "Delivery"
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self, *, delivery: "Delivery", shipping_key: typing.Optional[str] = None
    ):
        self.delivery = delivery
        self.shipping_key = shipping_key

        super().__init__(type="DeliveryRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "DeliveryRemovedMessagePayload":
        from ._schemas.message import DeliveryRemovedMessagePayloadSchema

        return DeliveryRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import DeliveryRemovedMessagePayloadSchema

        return DeliveryRemovedMessagePayloadSchema().dump(self)


class LineItemStateTransitionMessagePayload(OrderMessagePayload):
    """Generated after a successful [Transition Line Item State](ctp:api:type:OrderTransitionLineItemStateAction) update action."""

    #: Unique identifier of the [Line Item](ctp:api:type:LineItem).
    line_item_id: str
    #: Date and time (UTC) when the transition of the [Line Item](ctp:api:type:LineItem) [State](ctp:api:type:State) was performed.
    transition_date: datetime.datetime
    #: Number of [Line Items](ctp:api:type:LineItem) for which the [State](ctp:api:type:State) was transitioned.
    quantity: int
    #: [State](ctp:api:type:State) the [Line Item](ctp:api:type:LineItem) was transitioned from.
    from_state: "StateReference"
    #: [State](ctp:api:type:State) the [Line Item](ctp:api:type:LineItem) was transitioned to.
    to_state: "StateReference"

    def __init__(
        self,
        *,
        line_item_id: str,
        transition_date: datetime.datetime,
        quantity: int,
        from_state: "StateReference",
        to_state: "StateReference"
    ):
        self.line_item_id = line_item_id
        self.transition_date = transition_date
        self.quantity = quantity
        self.from_state = from_state
        self.to_state = to_state

        super().__init__(type="LineItemStateTransition")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "LineItemStateTransitionMessagePayload":
        from ._schemas.message import LineItemStateTransitionMessagePayloadSchema

        return LineItemStateTransitionMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import LineItemStateTransitionMessagePayloadSchema

        return LineItemStateTransitionMessagePayloadSchema().dump(self)


class OrderBillingAddressSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Billing Address](ctp:api:type:OrderSetBillingAddressAction) update action."""

    #: Billing address on the Order after the [Set Billing Address](ctp:api:type:OrderSetBillingAddressAction) update action.
    address: typing.Optional["Address"]
    #: Billing address on the Order before the [Set Billing Address](ctp:api:type:OrderSetBillingAddressAction) update action.
    old_address: typing.Optional["Address"]

    def __init__(
        self,
        *,
        address: typing.Optional["Address"] = None,
        old_address: typing.Optional["Address"] = None
    ):
        self.address = address
        self.old_address = old_address

        super().__init__(type="OrderBillingAddressSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderBillingAddressSetMessagePayload":
        from ._schemas.message import OrderBillingAddressSetMessagePayloadSchema

        return OrderBillingAddressSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderBillingAddressSetMessagePayloadSchema

        return OrderBillingAddressSetMessagePayloadSchema().dump(self)


class OrderCreatedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Create Order](/../api/projects/orders#create-order) request."""

    #: [Order](ctp:api:type:Order) that was created.
    order: "Order"

    def __init__(self, *, order: "Order"):
        self.order = order

        super().__init__(type="OrderCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCreatedMessagePayload":
        from ._schemas.message import OrderCreatedMessagePayloadSchema

        return OrderCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCreatedMessagePayloadSchema

        return OrderCreatedMessagePayloadSchema().dump(self)


class OrderCustomLineItemAddedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Add Custom Line Item](ctp:api:type:StagedOrderAddCustomLineItemAction) update action."""

    #: [Custom Line Item](ctp:api:type:CustomLineItem) that was added to the [Order](ctp:api:type:Order).
    custom_line_item: "CustomLineItem"

    def __init__(self, *, custom_line_item: "CustomLineItem"):
        self.custom_line_item = custom_line_item

        super().__init__(type="OrderCustomLineItemAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomLineItemAddedMessagePayload":
        from ._schemas.message import OrderCustomLineItemAddedMessagePayloadSchema

        return OrderCustomLineItemAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomLineItemAddedMessagePayloadSchema

        return OrderCustomLineItemAddedMessagePayloadSchema().dump(self)


class OrderCustomLineItemDiscountSetMessagePayload(OrderMessagePayload):
    """Generated after a successful recalculation of a Discount on a [Custom Line Item](ctp:api:type:CustomLineItem)."""

    #: Unique identifier for the [Custom Line Item](ctp:api:type:CustomLineItem).
    custom_line_item_id: str
    #: Array of [DiscountedLineItemPriceForQuantity](ctp:api:type:DiscountedLineItemPriceForQuantity) after the Discount recalculation.
    discounted_price_per_quantity: typing.List["DiscountedLineItemPriceForQuantity"]
    #: [TaxedItemPrice](ctp:api:type:TaxedItemPrice) of the [Custom Line Item](ctp:api:type:CustomLineItem) after the Discount recalculation.
    taxed_price: typing.Optional["TaxedItemPrice"]

    def __init__(
        self,
        *,
        custom_line_item_id: str,
        discounted_price_per_quantity: typing.List[
            "DiscountedLineItemPriceForQuantity"
        ],
        taxed_price: typing.Optional["TaxedItemPrice"] = None
    ):
        self.custom_line_item_id = custom_line_item_id
        self.discounted_price_per_quantity = discounted_price_per_quantity
        self.taxed_price = taxed_price

        super().__init__(type="OrderCustomLineItemDiscountSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomLineItemDiscountSetMessagePayload":
        from ._schemas.message import OrderCustomLineItemDiscountSetMessagePayloadSchema

        return OrderCustomLineItemDiscountSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomLineItemDiscountSetMessagePayloadSchema

        return OrderCustomLineItemDiscountSetMessagePayloadSchema().dump(self)


class OrderCustomLineItemQuantityChangedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Change Custom Line Item Quantity](ctp:api:type:StagedOrderChangeCustomLineItemQuantityAction) update action."""

    #: Unique identifier of the [Custom Line Item](ctp:api:type:CustomLineItem).
    custom_line_item_id: str
    #: [Custom Line Item](ctp:api:type:CustomLineItem) quantity after the [Change Custom Line Item Quantity](ctp:api:type:StagedOrderChangeCustomLineItemQuantityAction) update action.
    quantity: int
    #: [Custom Line Item](ctp:api:type:CustomLineItem) quantity before the [Change Custom Line Item Quantity](ctp:api:type:StagedOrderChangeCustomLineItemQuantityAction) update action.
    old_quantity: int

    def __init__(self, *, custom_line_item_id: str, quantity: int, old_quantity: int):
        self.custom_line_item_id = custom_line_item_id
        self.quantity = quantity
        self.old_quantity = old_quantity

        super().__init__(type="OrderCustomLineItemQuantityChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomLineItemQuantityChangedMessagePayload":
        from ._schemas.message import (
            OrderCustomLineItemQuantityChangedMessagePayloadSchema,
        )

        return OrderCustomLineItemQuantityChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            OrderCustomLineItemQuantityChangedMessagePayloadSchema,
        )

        return OrderCustomLineItemQuantityChangedMessagePayloadSchema().dump(self)


class OrderCustomLineItemRemovedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Remove Custom Line Item](ctp:api:type:StagedOrderRemoveCustomLineItemAction) update action."""

    #: Unique identifier of the [Custom Line Item](ctp:api:type:CustomLineItem).
    custom_line_item_id: str
    #: [Custom Line Item](ctp:api:type:CustomLineItem) that was removed from the [Order](ctp:api:type:Order).
    custom_line_item: "CustomLineItem"

    def __init__(self, *, custom_line_item_id: str, custom_line_item: "CustomLineItem"):
        self.custom_line_item_id = custom_line_item_id
        self.custom_line_item = custom_line_item

        super().__init__(type="OrderCustomLineItemRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomLineItemRemovedMessagePayload":
        from ._schemas.message import OrderCustomLineItemRemovedMessagePayloadSchema

        return OrderCustomLineItemRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomLineItemRemovedMessagePayloadSchema

        return OrderCustomLineItemRemovedMessagePayloadSchema().dump(self)


class OrderCustomerEmailSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Customer Email](ctp:api:type:OrderSetCustomerEmailAction) update action."""

    #: Email address on the [Order](ctp:api:type:Order) after the [Set Customer Email](ctp:api:type:OrderSetCustomerEmailAction) update action.
    email: typing.Optional[str]
    #: Email address on the [Order](ctp:api:type:Order) before the [Set Customer Email](ctp:api:type:OrderSetCustomerEmailAction) update action.
    old_email: typing.Optional[str]

    def __init__(
        self,
        *,
        email: typing.Optional[str] = None,
        old_email: typing.Optional[str] = None
    ):
        self.email = email
        self.old_email = old_email

        super().__init__(type="OrderCustomerEmailSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomerEmailSetMessagePayload":
        from ._schemas.message import OrderCustomerEmailSetMessagePayloadSchema

        return OrderCustomerEmailSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomerEmailSetMessagePayloadSchema

        return OrderCustomerEmailSetMessagePayloadSchema().dump(self)


class OrderCustomerGroupSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Customer Group](ctp:api:type:StagedOrderSetCustomerGroupAction) update action."""

    #: [CustomerGroup](ctp:api:type:CustomerGroup) on the [Order](ctp:api:type:Order) after the [Set Customer Group](ctp:api:type:StagedOrderSetCustomerGroupAction) update action.
    customer_group: typing.Optional["CustomerGroupReference"]
    #: [CustomerGroup](ctp:api:type:CustomerGroup) on the [Order](ctp:api:type:Order) before the [Set Customer Group](ctp:api:type:StagedOrderSetCustomerGroupAction) update action.
    old_customer_group: typing.Optional["CustomerGroupReference"]

    def __init__(
        self,
        *,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        old_customer_group: typing.Optional["CustomerGroupReference"] = None
    ):
        self.customer_group = customer_group
        self.old_customer_group = old_customer_group

        super().__init__(type="OrderCustomerGroupSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomerGroupSetMessagePayload":
        from ._schemas.message import OrderCustomerGroupSetMessagePayloadSchema

        return OrderCustomerGroupSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomerGroupSetMessagePayloadSchema

        return OrderCustomerGroupSetMessagePayloadSchema().dump(self)


class OrderCustomerSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Customer Id](ctp:api:type:OrderSetCustomerIdAction) update action."""

    #: [Customer](ctp:api:type:Customer) on the [Order](ctp:api:type:Order) after the [Set Customer Id](ctp:api:type:OrderSetCustomerIdAction) update action.
    customer: typing.Optional["CustomerReference"]
    #: [CustomerGroup](ctp:api:type:CustomerGroup) on the [Order](ctp:api:type:Order) after the [Set Customer Id](ctp:api:type:OrderSetCustomerIdAction) update action.
    customer_group: typing.Optional["CustomerGroupReference"]
    #: [Customer](ctp:api:type:Customer) on the [Order](ctp:api:type:Order) before the [Set Customer Id](ctp:api:type:OrderSetCustomerIdAction) update action.
    old_customer: typing.Optional["CustomerReference"]
    #: [CustomerGroup](ctp:api:type:CustomerGroup) on the [Order](ctp:api:type:Order) before the [Set Customer Id](ctp:api:type:OrderSetCustomerIdAction) update action.
    old_customer_group: typing.Optional["CustomerGroupReference"]

    def __init__(
        self,
        *,
        customer: typing.Optional["CustomerReference"] = None,
        customer_group: typing.Optional["CustomerGroupReference"] = None,
        old_customer: typing.Optional["CustomerReference"] = None,
        old_customer_group: typing.Optional["CustomerGroupReference"] = None
    ):
        self.customer = customer
        self.customer_group = customer_group
        self.old_customer = old_customer
        self.old_customer_group = old_customer_group

        super().__init__(type="OrderCustomerSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderCustomerSetMessagePayload":
        from ._schemas.message import OrderCustomerSetMessagePayloadSchema

        return OrderCustomerSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderCustomerSetMessagePayloadSchema

        return OrderCustomerSetMessagePayloadSchema().dump(self)


class OrderDeletedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Delete Order](/../api/projects/orders#delete-order) request."""

    #: [Order](ctp:api:type:Order) that has been deleted.
    order: "Order"

    def __init__(self, *, order: "Order"):
        self.order = order

        super().__init__(type="OrderDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderDeletedMessagePayload":
        from ._schemas.message import OrderDeletedMessagePayloadSchema

        return OrderDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderDeletedMessagePayloadSchema

        return OrderDeletedMessagePayloadSchema().dump(self)


class OrderDiscountCodeAddedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Add Discount Code](ctp:api:type:StagedOrderAddDiscountCodeAction) update action."""

    #: [DiscountCode](ctp:api:type:DiscountCode) that was added.
    discount_code: "DiscountCodeReference"

    def __init__(self, *, discount_code: "DiscountCodeReference"):
        self.discount_code = discount_code

        super().__init__(type="OrderDiscountCodeAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderDiscountCodeAddedMessagePayload":
        from ._schemas.message import OrderDiscountCodeAddedMessagePayloadSchema

        return OrderDiscountCodeAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderDiscountCodeAddedMessagePayloadSchema

        return OrderDiscountCodeAddedMessagePayloadSchema().dump(self)


class OrderDiscountCodeRemovedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Remove Discount Code](ctp:api:type:StagedOrderRemoveDiscountCodeAction) update action."""

    #: [DiscountCode](ctp:api:type:DiscountCode) that was removed.
    discount_code: "DiscountCodeReference"

    def __init__(self, *, discount_code: "DiscountCodeReference"):
        self.discount_code = discount_code

        super().__init__(type="OrderDiscountCodeRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderDiscountCodeRemovedMessagePayload":
        from ._schemas.message import OrderDiscountCodeRemovedMessagePayloadSchema

        return OrderDiscountCodeRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderDiscountCodeRemovedMessagePayloadSchema

        return OrderDiscountCodeRemovedMessagePayloadSchema().dump(self)


class OrderDiscountCodeStateSetMessagePayload(OrderMessagePayload):
    """Generated after the [DiscountCodeState](ctp:api:type:DiscountCodeState) changes due to a [recalculation](/../api/projects/carts#recalculate)."""

    #: [DiscountCode](ctp:api:type:DiscountCode) that changed due to the recalculation.
    discount_code: "DiscountCodeReference"
    #: [DiscountCodeState](ctp:api:type:DiscountCodeState) after the recalculation.
    state: "DiscountCodeState"
    #: [DiscountCodeState](ctp:api:type:DiscountCodeState) before the recalculation.
    old_state: typing.Optional["DiscountCodeState"]

    def __init__(
        self,
        *,
        discount_code: "DiscountCodeReference",
        state: "DiscountCodeState",
        old_state: typing.Optional["DiscountCodeState"] = None
    ):
        self.discount_code = discount_code
        self.state = state
        self.old_state = old_state

        super().__init__(type="OrderDiscountCodeStateSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderDiscountCodeStateSetMessagePayload":
        from ._schemas.message import OrderDiscountCodeStateSetMessagePayloadSchema

        return OrderDiscountCodeStateSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderDiscountCodeStateSetMessagePayloadSchema

        return OrderDiscountCodeStateSetMessagePayloadSchema().dump(self)


class OrderEditAppliedMessagePayload(OrderMessagePayload):
    """Generated after a successfully applying an [OrderEdit](/../api/projects/order-edits#apply-an-orderedit)."""

    #: [OrderEdit](ctp:api:type:OrderEdit) that was applied.
    edit: "OrderEdit"
    #: Information about a successfully applied [OrderEdit](ctp:api:type:OrderEdit).
    result: "OrderEditApplied"

    def __init__(self, *, edit: "OrderEdit", result: "OrderEditApplied"):
        self.edit = edit
        self.result = result

        super().__init__(type="OrderEditApplied")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderEditAppliedMessagePayload":
        from ._schemas.message import OrderEditAppliedMessagePayloadSchema

        return OrderEditAppliedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderEditAppliedMessagePayloadSchema

        return OrderEditAppliedMessagePayloadSchema().dump(self)


class OrderImportedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Order Import](/../api/projects/orders-import#create-an-order-by-import)."""

    #: [Order](ctp:api:type:Order) that was imported.
    order: "Order"

    def __init__(self, *, order: "Order"):
        self.order = order

        super().__init__(type="OrderImported")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderImportedMessagePayload":
        from ._schemas.message import OrderImportedMessagePayloadSchema

        return OrderImportedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderImportedMessagePayloadSchema

        return OrderImportedMessagePayloadSchema().dump(self)


class OrderLineItemAddedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Add Line Item](ctp:api:type:StagedOrderAddLineItemAction) update action."""

    #: [Line Item](ctp:api:type:LineItem) that was added to the [Order](ctp:api:type:Order).
    line_item: "LineItem"
    #: Quantity of [Line Items](ctp:api:type:LineItem) that were added to the [Order](ctp:api:type:Order).
    added_quantity: int

    def __init__(self, *, line_item: "LineItem", added_quantity: int):
        self.line_item = line_item
        self.added_quantity = added_quantity

        super().__init__(type="OrderLineItemAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderLineItemAddedMessagePayload":
        from ._schemas.message import OrderLineItemAddedMessagePayloadSchema

        return OrderLineItemAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderLineItemAddedMessagePayloadSchema

        return OrderLineItemAddedMessagePayloadSchema().dump(self)


class OrderLineItemDiscountSetMessagePayload(OrderMessagePayload):
    """Generated after a successful recalculation of a Discount on a [Line Item](ctp:api:type:LineItem)."""

    #: Unique identifier for the [Line Item](ctp:api:type:LineItem).
    line_item_id: str
    #: Array of [DiscountedLineItemPriceForQuantity](ctp:api:type:DiscountedLineItemPriceForQuantity) after the Discount recalculation.
    discounted_price_per_quantity: typing.List["DiscountedLineItemPriceForQuantity"]
    #: Total Price of the [Line Item](ctp:api:type:LineItem) after the Discount recalculation.
    total_price: "Money"
    #: [TaxedItemPrice](ctp:api:type:TaxedItemPrice) of the [Line Item](ctp:api:type:LineItem) after the Discount recalculation.
    taxed_price: typing.Optional["TaxedItemPrice"]
    #: Taxed price of the Shipping Methods in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    taxed_price_portions: typing.List["MethodTaxedPrice"]

    def __init__(
        self,
        *,
        line_item_id: str,
        discounted_price_per_quantity: typing.List[
            "DiscountedLineItemPriceForQuantity"
        ],
        total_price: "Money",
        taxed_price: typing.Optional["TaxedItemPrice"] = None,
        taxed_price_portions: typing.List["MethodTaxedPrice"]
    ):
        self.line_item_id = line_item_id
        self.discounted_price_per_quantity = discounted_price_per_quantity
        self.total_price = total_price
        self.taxed_price = taxed_price
        self.taxed_price_portions = taxed_price_portions

        super().__init__(type="OrderLineItemDiscountSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderLineItemDiscountSetMessagePayload":
        from ._schemas.message import OrderLineItemDiscountSetMessagePayloadSchema

        return OrderLineItemDiscountSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderLineItemDiscountSetMessagePayloadSchema

        return OrderLineItemDiscountSetMessagePayloadSchema().dump(self)


class OrderLineItemDistributionChannelSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Line Item Distribution Channel](/../api/projects/order-edits#set-lineitem-distributionchannel) update action."""

    #: Unique identifier of the [Line Item](ctp:api:type:LineItem).
    line_item_id: str
    #: [Distribution Channel](ctp:api:type:Channel) that was set.
    distribution_channel: typing.Optional["ChannelReference"]

    def __init__(
        self,
        *,
        line_item_id: str,
        distribution_channel: typing.Optional["ChannelReference"] = None
    ):
        self.line_item_id = line_item_id
        self.distribution_channel = distribution_channel

        super().__init__(type="OrderLineItemDistributionChannelSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderLineItemDistributionChannelSetMessagePayload":
        from ._schemas.message import (
            OrderLineItemDistributionChannelSetMessagePayloadSchema,
        )

        return OrderLineItemDistributionChannelSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            OrderLineItemDistributionChannelSetMessagePayloadSchema,
        )

        return OrderLineItemDistributionChannelSetMessagePayloadSchema().dump(self)


class OrderLineItemRemovedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action."""

    #: Unique identifier of the [Line Item](ctp:api:type:LineItem).
    line_item_id: str
    #: Quantity of [Line Items](ctp:api:type:LineItem) that were removed during the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    removed_quantity: int
    #: [Line Item](ctp:api:type:LineItem) quantity after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_quantity: int
    #: [ItemStates](ctp:api:type:ItemState) after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_state: typing.List["ItemState"]
    #: `totalPrice` of the [Order](ctp:api:type:Order) after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_total_price: "CentPrecisionMoney"
    #: [TaxedItemPrice](ctp:api:type:TaxedItemPrice) of the [Order](ctp:api:type:Order) after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_taxed_price: typing.Optional["TaxedItemPrice"]
    #: [Price](ctp:api:type:Price) of the [Order](ctp:api:type:Order) after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_price: typing.Optional["Price"]
    #: [Shipping Details](ctp:api:type:ItemShippingDetails) of the [Order](ctp:api:type:Order) after the [Remove Line Item](ctp:api:type:StagedOrderRemoveLineItemAction) update action.
    new_shipping_detail: typing.Optional["ItemShippingDetails"]

    def __init__(
        self,
        *,
        line_item_id: str,
        removed_quantity: int,
        new_quantity: int,
        new_state: typing.List["ItemState"],
        new_total_price: "CentPrecisionMoney",
        new_taxed_price: typing.Optional["TaxedItemPrice"] = None,
        new_price: typing.Optional["Price"] = None,
        new_shipping_detail: typing.Optional["ItemShippingDetails"] = None
    ):
        self.line_item_id = line_item_id
        self.removed_quantity = removed_quantity
        self.new_quantity = new_quantity
        self.new_state = new_state
        self.new_total_price = new_total_price
        self.new_taxed_price = new_taxed_price
        self.new_price = new_price
        self.new_shipping_detail = new_shipping_detail

        super().__init__(type="OrderLineItemRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderLineItemRemovedMessagePayload":
        from ._schemas.message import OrderLineItemRemovedMessagePayloadSchema

        return OrderLineItemRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderLineItemRemovedMessagePayloadSchema

        return OrderLineItemRemovedMessagePayloadSchema().dump(self)


class OrderPaymentAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Payment](ctp:api:type:OrderAddPaymentAction) update action or when a [Payment](ctp:api:type:Payment) is added via [Order Edits](ctp:api:type:StagedOrderAddPaymentAction)."""

    #: [Payment](ctp:api:type:Payment) that was added to the [Order](ctp:api:type:Order).
    payment: "PaymentReference"

    def __init__(self, *, payment: "PaymentReference"):
        self.payment = payment

        super().__init__(type="OrderPaymentAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderPaymentAddedMessagePayload":
        from ._schemas.message import OrderPaymentAddedMessagePayloadSchema

        return OrderPaymentAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderPaymentAddedMessagePayloadSchema

        return OrderPaymentAddedMessagePayloadSchema().dump(self)


class OrderPaymentStateChangedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Change Payment State](ctp:api:type:OrderChangePaymentStateAction) update action."""

    #: [PaymentState](ctp:api:type:PaymentState) after the [Change Payment State](ctp:api:type:OrderChangePaymentStateAction) update action.
    payment_state: "PaymentState"
    #: [PaymentState](ctp:api:type:PaymentState) before the [Change Payment State](ctp:api:type:OrderChangePaymentStateAction) update action.
    old_payment_state: typing.Optional["PaymentState"]

    def __init__(
        self,
        *,
        payment_state: "PaymentState",
        old_payment_state: typing.Optional["PaymentState"] = None
    ):
        self.payment_state = payment_state
        self.old_payment_state = old_payment_state

        super().__init__(type="OrderPaymentStateChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderPaymentStateChangedMessagePayload":
        from ._schemas.message import OrderPaymentStateChangedMessagePayloadSchema

        return OrderPaymentStateChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderPaymentStateChangedMessagePayloadSchema

        return OrderPaymentStateChangedMessagePayloadSchema().dump(self)


class OrderPurchaseOrderNumberSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set PurchaseOrderNumber](/../api/projects/orders#set-purchase-order-number) update action."""

    #: Purchase order number on the [Order](ctp:api:type:Order) after the [Set PurchaseOrderNumber](/../api/projects/orders#set-purchase-order-number) update action.
    purchase_order_number: typing.Optional[str]
    #: Purchase order number on the [Order](ctp:api:type:Order) before the [Set PurchaseOrderNumber](/../api/projects/orders#set-purchase-order-number) update action.
    old_purchase_order_number: typing.Optional[str]

    def __init__(
        self,
        *,
        purchase_order_number: typing.Optional[str] = None,
        old_purchase_order_number: typing.Optional[str] = None
    ):
        self.purchase_order_number = purchase_order_number
        self.old_purchase_order_number = old_purchase_order_number

        super().__init__(type="OrderPurchaseOrderNumberSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderPurchaseOrderNumberSetMessagePayload":
        from ._schemas.message import OrderPurchaseOrderNumberSetMessagePayloadSchema

        return OrderPurchaseOrderNumberSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderPurchaseOrderNumberSetMessagePayloadSchema

        return OrderPurchaseOrderNumberSetMessagePayloadSchema().dump(self)


class OrderReturnShipmentStateChangedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Return Shipment State](ctp:api:type:OrderSetReturnShipmentStateAction) update action."""

    #: Unique identifier of the [ReturnItem](ctp:api:type:ReturnItem).
    return_item_id: str
    #: State of the [ReturnItem](ctp:api:type:ReturnItem) after the [Set Return Shipment State](ctp:api:type:OrderSetReturnShipmentStateAction) update action.
    return_shipment_state: "ReturnShipmentState"

    def __init__(
        self, *, return_item_id: str, return_shipment_state: "ReturnShipmentState"
    ):
        self.return_item_id = return_item_id
        self.return_shipment_state = return_shipment_state

        super().__init__(type="OrderReturnShipmentStateChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderReturnShipmentStateChangedMessagePayload":
        from ._schemas.message import (
            OrderReturnShipmentStateChangedMessagePayloadSchema,
        )

        return OrderReturnShipmentStateChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            OrderReturnShipmentStateChangedMessagePayloadSchema,
        )

        return OrderReturnShipmentStateChangedMessagePayloadSchema().dump(self)


class OrderShipmentStateChangedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Change Shipment State](ctp:api:type:OrderChangeShipmentStateAction) update action."""

    #: [ShipmentState](ctp:api:type:ShipmentState) after the [Change Shipment State](ctp:api:type:OrderChangeShipmentStateAction) update action.
    shipment_state: "ShipmentState"
    #: [ShipmentState](ctp:api:type:ShipmentState) before the [Change Shipment State](ctp:api:type:OrderChangeShipmentStateAction) update action.
    old_shipment_state: "ShipmentState"

    def __init__(
        self, *, shipment_state: "ShipmentState", old_shipment_state: "ShipmentState"
    ):
        self.shipment_state = shipment_state
        self.old_shipment_state = old_shipment_state

        super().__init__(type="OrderShipmentStateChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderShipmentStateChangedMessagePayload":
        from ._schemas.message import OrderShipmentStateChangedMessagePayloadSchema

        return OrderShipmentStateChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderShipmentStateChangedMessagePayloadSchema

        return OrderShipmentStateChangedMessagePayloadSchema().dump(self)


class OrderShippingAddressSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Shipping Address](ctp:api:type:OrderSetShippingAddressAction) update action."""

    #: Shipping address on the Order after the [Set Shipping Address](ctp:api:type:OrderSetShippingAddressAction) update action.
    address: typing.Optional["Address"]
    #: Shipping address on the Order before the [Set Shipping Address](ctp:api:type:OrderSetShippingAddressAction) update action.
    old_address: typing.Optional["Address"]

    def __init__(
        self,
        *,
        address: typing.Optional["Address"] = None,
        old_address: typing.Optional["Address"] = None
    ):
        self.address = address
        self.old_address = old_address

        super().__init__(type="OrderShippingAddressSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderShippingAddressSetMessagePayload":
        from ._schemas.message import OrderShippingAddressSetMessagePayloadSchema

        return OrderShippingAddressSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderShippingAddressSetMessagePayloadSchema

        return OrderShippingAddressSetMessagePayloadSchema().dump(self)


class OrderShippingInfoSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Shipping Method](ctp:api:type:StagedOrderSetShippingMethodAction) and [Set Custom Shipping Method](ctp:api:type:StagedOrderSetCustomShippingMethodAction) update actions."""

    #: [ShippingInfo](ctp:api:type:ShippingInfo) after the [Set Shipping Method](ctp:api:type:StagedOrderSetShippingMethodAction) or [Set Custom Shipping Method](ctp:api:type:StagedOrderSetCustomShippingMethodAction) update action.
    shipping_info: typing.Optional["ShippingInfo"]
    #: [ShippingInfo](ctp:api:type:ShippingInfo) before the [Set Shipping Method](ctp:api:type:StagedOrderSetShippingMethodAction) or [Set Custom Shipping Method](ctp:api:type:StagedOrderSetCustomShippingMethodAction) update action.
    old_shipping_info: typing.Optional["ShippingInfo"]

    def __init__(
        self,
        *,
        shipping_info: typing.Optional["ShippingInfo"] = None,
        old_shipping_info: typing.Optional["ShippingInfo"] = None
    ):
        self.shipping_info = shipping_info
        self.old_shipping_info = old_shipping_info

        super().__init__(type="OrderShippingInfoSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderShippingInfoSetMessagePayload":
        from ._schemas.message import OrderShippingInfoSetMessagePayloadSchema

        return OrderShippingInfoSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderShippingInfoSetMessagePayloadSchema

        return OrderShippingInfoSetMessagePayloadSchema().dump(self)


class OrderShippingRateInputSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set ShippingRateInput](ctp:api:type:StagedOrderSetShippingRateInputAction) update action."""

    #: [ShippingRateInput](ctp:api:type:ShippingRateInput) after the [Set ShippingRateInput](ctp:api:type:StagedOrderSetShippingRateInputAction) update action.
    shipping_rate_input: typing.Optional["ShippingRateInput"]
    #: [ShippingRateInput](ctp:api:type:ShippingRateInput) before the [Set ShippingRateInput](ctp:api:type:StagedOrderSetShippingRateInputAction) update action.
    old_shipping_rate_input: typing.Optional["ShippingRateInput"]

    def __init__(
        self,
        *,
        shipping_rate_input: typing.Optional["ShippingRateInput"] = None,
        old_shipping_rate_input: typing.Optional["ShippingRateInput"] = None
    ):
        self.shipping_rate_input = shipping_rate_input
        self.old_shipping_rate_input = old_shipping_rate_input

        super().__init__(type="OrderShippingRateInputSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderShippingRateInputSetMessagePayload":
        from ._schemas.message import OrderShippingRateInputSetMessagePayloadSchema

        return OrderShippingRateInputSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderShippingRateInputSetMessagePayloadSchema

        return OrderShippingRateInputSetMessagePayloadSchema().dump(self)


class OrderStateChangedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Change Order State](ctp:api:type:OrderChangeOrderStateAction) update action."""

    #: [OrderState](ctp:api:type:OrderState) after the [Change Order State](ctp:api:type:OrderChangeOrderStateAction) update action.
    order_state: "OrderState"
    #: [OrderState](ctp:api:type:OrderState) before the [Change Order State](ctp:api:type:OrderChangeOrderStateAction) update action.
    old_order_state: "OrderState"

    def __init__(self, *, order_state: "OrderState", old_order_state: "OrderState"):
        self.order_state = order_state
        self.old_order_state = old_order_state

        super().__init__(type="OrderStateChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderStateChangedMessagePayload":
        from ._schemas.message import OrderStateChangedMessagePayloadSchema

        return OrderStateChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderStateChangedMessagePayloadSchema

        return OrderStateChangedMessagePayloadSchema().dump(self)


class OrderStateTransitionMessagePayload(OrderMessagePayload):
    """Generated after a successful [Transition State](ctp:api:type:OrderTransitionStateAction) update action."""

    #: [OrderState](ctp:api:type:OrderState) after the [Transition State](ctp:api:type:OrderTransitionStateAction) update action.
    state: "StateReference"
    #: [OrderState](ctp:api:type:OrderState) before the [Transition State](ctp:api:type:OrderTransitionStateAction) update action.
    old_state: typing.Optional["StateReference"]
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:OrderTransitionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        state: "StateReference",
        old_state: typing.Optional["StateReference"] = None,
        force: bool
    ):
        self.state = state
        self.old_state = old_state
        self.force = force

        super().__init__(type="OrderStateTransition")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderStateTransitionMessagePayload":
        from ._schemas.message import OrderStateTransitionMessagePayloadSchema

        return OrderStateTransitionMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderStateTransitionMessagePayloadSchema

        return OrderStateTransitionMessagePayloadSchema().dump(self)


class OrderStoreSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Store](ctp:api:type:OrderSetStoreAction) update action."""

    #: [Store](ctp:api:type:Store) that was set.
    store: typing.Optional["StoreKeyReference"]

    def __init__(self, *, store: typing.Optional["StoreKeyReference"] = None):
        self.store = store

        super().__init__(type="OrderStoreSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "OrderStoreSetMessagePayload":
        from ._schemas.message import OrderStoreSetMessagePayloadSchema

        return OrderStoreSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import OrderStoreSetMessagePayloadSchema

        return OrderStoreSetMessagePayloadSchema().dump(self)


class ParcelAddedToDeliveryMessagePayload(OrderMessagePayload):
    """Generated after a successful [Add Parcel To Delivery](ctp:api:type:OrderAddParcelToDeliveryAction) update action."""

    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery: "Delivery"
    #: [Parcel](ctp:api:type:Parcel) that was added to the [Delivery](ctp:api:type:Delivery).
    parcel: "Parcel"
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        delivery: "Delivery",
        parcel: "Parcel",
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery = delivery
        self.parcel = parcel
        self.shipping_key = shipping_key

        super().__init__(type="ParcelAddedToDelivery")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ParcelAddedToDeliveryMessagePayload":
        from ._schemas.message import ParcelAddedToDeliveryMessagePayloadSchema

        return ParcelAddedToDeliveryMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ParcelAddedToDeliveryMessagePayloadSchema

        return ParcelAddedToDeliveryMessagePayloadSchema().dump(self)


class ParcelItemsUpdatedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Parcel Items](ctp:api:type:OrderSetParcelItemsAction) update action."""

    #: Unique identifier of the [Parcel](ctp:api:type:Parcel).
    parcel_id: str
    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery_id: str
    #: [Delivery Items](ctp:api:type:DeliveryItem) after the [Set Parcel Items](ctp:api:type:OrderSetParcelItemsAction) update action.
    items: typing.List["DeliveryItem"]
    #: [Delivery Items](ctp:api:type:DeliveryItem) before the [Set Parcel Items](ctp:api:type:OrderSetParcelItemsAction) update action.
    old_items: typing.List["DeliveryItem"]
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        parcel_id: str,
        delivery_id: str,
        items: typing.List["DeliveryItem"],
        old_items: typing.List["DeliveryItem"],
        shipping_key: typing.Optional[str] = None
    ):
        self.parcel_id = parcel_id
        self.delivery_id = delivery_id
        self.items = items
        self.old_items = old_items
        self.shipping_key = shipping_key

        super().__init__(type="ParcelItemsUpdated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ParcelItemsUpdatedMessagePayload":
        from ._schemas.message import ParcelItemsUpdatedMessagePayloadSchema

        return ParcelItemsUpdatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ParcelItemsUpdatedMessagePayloadSchema

        return ParcelItemsUpdatedMessagePayloadSchema().dump(self)


class ParcelMeasurementsUpdatedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Parcel Measurements](ctp:api:type:OrderSetParcelMeasurementsAction) update action."""

    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery_id: str
    #: Unique identifier of the [Parcel](ctp:api:type:Parcel).
    parcel_id: str
    #: The [Parcel Measurements](ctp:api:type:ParcelMeasurements) that were set on the [Parcel](ctp:api:type:Parcel).
    measurements: typing.Optional["ParcelMeasurements"]
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        delivery_id: str,
        parcel_id: str,
        measurements: typing.Optional["ParcelMeasurements"] = None,
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery_id = delivery_id
        self.parcel_id = parcel_id
        self.measurements = measurements
        self.shipping_key = shipping_key

        super().__init__(type="ParcelMeasurementsUpdated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ParcelMeasurementsUpdatedMessagePayload":
        from ._schemas.message import ParcelMeasurementsUpdatedMessagePayloadSchema

        return ParcelMeasurementsUpdatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ParcelMeasurementsUpdatedMessagePayloadSchema

        return ParcelMeasurementsUpdatedMessagePayloadSchema().dump(self)


class ParcelRemovedFromDeliveryMessagePayload(OrderMessagePayload):
    """Generated after a successful [Remove Parcel From Delivery](ctp:api:type:OrderRemoveParcelFromDeliveryAction) update action."""

    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery_id: str
    #: [Parcel](ctp:api:type:Parcel) that was removed from the [Delivery](ctp:api:type:Delivery).
    parcel: "Parcel"
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        delivery_id: str,
        parcel: "Parcel",
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery_id = delivery_id
        self.parcel = parcel
        self.shipping_key = shipping_key

        super().__init__(type="ParcelRemovedFromDelivery")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ParcelRemovedFromDeliveryMessagePayload":
        from ._schemas.message import ParcelRemovedFromDeliveryMessagePayloadSchema

        return ParcelRemovedFromDeliveryMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ParcelRemovedFromDeliveryMessagePayloadSchema

        return ParcelRemovedFromDeliveryMessagePayloadSchema().dump(self)


class ParcelTrackingDataUpdatedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Parcel TrackingData](ctp:api:type:OrderSetParcelTrackingDataAction) update action."""

    #: Unique identifier of the [Delivery](ctp:api:type:Delivery).
    delivery_id: str
    #: Unique identifier of the [Parcel](ctp:api:type:Parcel).
    parcel_id: str
    #: The [Tracking Data](ctp:api:type:TrackingData) that was added to the [Parcel](ctp:api:type:Parcel).
    tracking_data: typing.Optional["TrackingData"]
    #: User-defined unique identifier of the Shipping Method in a Cart with `Multi` [ShippingMode](ctp:api:type:ShippingMode).
    shipping_key: typing.Optional[str]

    def __init__(
        self,
        *,
        delivery_id: str,
        parcel_id: str,
        tracking_data: typing.Optional["TrackingData"] = None,
        shipping_key: typing.Optional[str] = None
    ):
        self.delivery_id = delivery_id
        self.parcel_id = parcel_id
        self.tracking_data = tracking_data
        self.shipping_key = shipping_key

        super().__init__(type="ParcelTrackingDataUpdated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ParcelTrackingDataUpdatedMessagePayload":
        from ._schemas.message import ParcelTrackingDataUpdatedMessagePayloadSchema

        return ParcelTrackingDataUpdatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ParcelTrackingDataUpdatedMessagePayloadSchema

        return ParcelTrackingDataUpdatedMessagePayloadSchema().dump(self)


class PaymentCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create Payment](/../api/projects/payments#create-payment) request."""

    #: [Payment](ctp:api:type:Payment) that was created.
    payment: "Payment"

    def __init__(self, *, payment: "Payment"):
        self.payment = payment

        super().__init__(type="PaymentCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentCreatedMessagePayload":
        from ._schemas.message import PaymentCreatedMessagePayloadSchema

        return PaymentCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentCreatedMessagePayloadSchema

        return PaymentCreatedMessagePayloadSchema().dump(self)


class PaymentInteractionAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add InterfaceInteraction](ctp:api:type:PaymentAddInterfaceInteractionAction) update action."""

    #: The interface interaction that was added to the [Payment](ctp:api:type:Payment).
    interaction: "CustomFields"

    def __init__(self, *, interaction: "CustomFields"):
        self.interaction = interaction

        super().__init__(type="PaymentInteractionAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentInteractionAddedMessagePayload":
        from ._schemas.message import PaymentInteractionAddedMessagePayloadSchema

        return PaymentInteractionAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentInteractionAddedMessagePayloadSchema

        return PaymentInteractionAddedMessagePayloadSchema().dump(self)


class PaymentStatusInterfaceCodeSetMessagePayload(MessagePayload):
    """Generated after a successful [Set StatusInterfaceCode](ctp:api:type:PaymentSetStatusInterfaceCodeAction) update action."""

    #: Unique identifier for the [Payment](ctp:api:type:Payment) for which the [Set StatusInterfaceCode](ctp:api:type:PaymentSetStatusInterfaceCodeAction) update action was applied.
    payment_id: str
    #: The `interfaceCode` that was set during the [Set StatusInterfaceCode](ctp:api:type:PaymentSetStatusInterfaceCodeAction) update action.
    interface_code: typing.Optional[str]

    def __init__(self, *, payment_id: str, interface_code: typing.Optional[str] = None):
        self.payment_id = payment_id
        self.interface_code = interface_code

        super().__init__(type="PaymentStatusInterfaceCodeSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentStatusInterfaceCodeSetMessagePayload":
        from ._schemas.message import PaymentStatusInterfaceCodeSetMessagePayloadSchema

        return PaymentStatusInterfaceCodeSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentStatusInterfaceCodeSetMessagePayloadSchema

        return PaymentStatusInterfaceCodeSetMessagePayloadSchema().dump(self)


class PaymentStatusStateTransitionMessagePayload(MessagePayload):
    """Generated after a successful [Transition State](ctp:api:type:PaymentTransitionStateAction) update action."""

    #: [State](ctp:api:type:State) of the [Payment](ctp:api:type:Payment) after the [Transition State](ctp:api:type:PaymentTransitionStateAction) update action.
    state: "StateReference"
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Change Transaction State](ctp:api:type:PaymentChangeTransactionStateAction) update action.
    force: bool

    def __init__(self, *, state: "StateReference", force: bool):
        self.state = state
        self.force = force

        super().__init__(type="PaymentStatusStateTransition")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentStatusStateTransitionMessagePayload":
        from ._schemas.message import PaymentStatusStateTransitionMessagePayloadSchema

        return PaymentStatusStateTransitionMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentStatusStateTransitionMessagePayloadSchema

        return PaymentStatusStateTransitionMessagePayloadSchema().dump(self)


class PaymentTransactionAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Transaction](ctp:api:type:PaymentAddTransactionAction) update action."""

    #: [Transaction](ctp:api:type:Transaction) that was added to the [Payment](ctp:api:type:Payment).
    transaction: "Transaction"

    def __init__(self, *, transaction: "Transaction"):
        self.transaction = transaction

        super().__init__(type="PaymentTransactionAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentTransactionAddedMessagePayload":
        from ._schemas.message import PaymentTransactionAddedMessagePayloadSchema

        return PaymentTransactionAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentTransactionAddedMessagePayloadSchema

        return PaymentTransactionAddedMessagePayloadSchema().dump(self)


class PaymentTransactionStateChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Transaction State](ctp:api:type:PaymentChangeTransactionStateAction) update action."""

    #: Unique identifier for the [Transaction](ctp:api:type:Transaction) for which the [Transaction State](ctp:api:type:TransactionState) changed.
    transaction_id: str
    #: [Transaction State](ctp:api:type:TransactionState) after the [Change Transaction State](ctp:api:type:PaymentChangeTransactionStateAction) update action.
    state: "TransactionState"

    def __init__(self, *, transaction_id: str, state: "TransactionState"):
        self.transaction_id = transaction_id
        self.state = state

        super().__init__(type="PaymentTransactionStateChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentTransactionStateChangedMessagePayload":
        from ._schemas.message import PaymentTransactionStateChangedMessagePayloadSchema

        return PaymentTransactionStateChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import PaymentTransactionStateChangedMessagePayloadSchema

        return PaymentTransactionStateChangedMessagePayloadSchema().dump(self)


class ProductAddedToCategoryMessagePayload(MessagePayload):
    """Generated after a successful [Add To Category](ctp:api:type:ProductAddToCategoryAction) update action."""

    #: [Category](ctp:api:type:Category) the [Product](ctp:api:type:Product) was added to.
    category: "CategoryReference"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(self, *, category: "CategoryReference", staged: bool):
        self.category = category
        self.staged = staged

        super().__init__(type="ProductAddedToCategory")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductAddedToCategoryMessagePayload":
        from ._schemas.message import ProductAddedToCategoryMessagePayloadSchema

        return ProductAddedToCategoryMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductAddedToCategoryMessagePayloadSchema

        return ProductAddedToCategoryMessagePayloadSchema().dump(self)


class ProductCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create Product](/../api/projects/products#create-product) request."""

    #: The staged [Product Projection](ctp:api:type:ProductProjection) of the [Product](ctp:api:type:Product) at the time of creation.
    product_projection: "ProductProjection"

    def __init__(self, *, product_projection: "ProductProjection"):
        self.product_projection = product_projection

        super().__init__(type="ProductCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductCreatedMessagePayload":
        from ._schemas.message import ProductCreatedMessagePayloadSchema

        return ProductCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductCreatedMessagePayloadSchema

        return ProductCreatedMessagePayloadSchema().dump(self)


class ProductDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Delete Product](/../api/projects/products#delete-product) request."""

    #: List of image URLs that were removed during the [Delete Product](ctp:api:type:Product) request.
    removed_image_urls: typing.List["str"]
    #: Current [Product Projection](ctp:api:type:ProductProjection) of the deleted [Product](ctp:api:type:Product).
    current_projection: typing.Optional["ProductProjection"]

    def __init__(
        self,
        *,
        removed_image_urls: typing.List["str"],
        current_projection: typing.Optional["ProductProjection"] = None
    ):
        self.removed_image_urls = removed_image_urls
        self.current_projection = current_projection

        super().__init__(type="ProductDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductDeletedMessagePayload":
        from ._schemas.message import ProductDeletedMessagePayloadSchema

        return ProductDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductDeletedMessagePayloadSchema

        return ProductDeletedMessagePayloadSchema().dump(self)


class ProductImageAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add External Image](ctp:api:type:ProductAddExternalImageAction) update action or after the successful [upload of an image](/../api/projects/products#upload-product-image)."""

    #: Unique identifier of the [Product Variant](ctp:api:type:ProductVariant) to which the [Image](ctp:api:type:Image) was added.
    variant_id: int
    #: [Image](ctp:api:type:Image) that was added.
    image: "Image"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(self, *, variant_id: int, image: "Image", staged: bool):
        self.variant_id = variant_id
        self.image = image
        self.staged = staged

        super().__init__(type="ProductImageAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductImageAddedMessagePayload":
        from ._schemas.message import ProductImageAddedMessagePayloadSchema

        return ProductImageAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductImageAddedMessagePayloadSchema

        return ProductImageAddedMessagePayloadSchema().dump(self)


class ProductPriceAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Embedded Price](ctp:api:type:ProductAddPriceAction) update action."""

    #: Unique identifier of the [ProductVariant](ctp:api:type:ProductVariant) for which the Price was added.
    variant_id: int
    #: The [Embedded Price](/projects/products#embedded-price) that was added to the [ProductVariant](ctp:api:type:ProductVariant).
    price: "Price"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(self, *, variant_id: int, price: "Price", staged: bool):
        self.variant_id = variant_id
        self.price = price
        self.staged = staged

        super().__init__(type="ProductPriceAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceAddedMessagePayload":
        from ._schemas.message import ProductPriceAddedMessagePayloadSchema

        return ProductPriceAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceAddedMessagePayloadSchema

        return ProductPriceAddedMessagePayloadSchema().dump(self)


class ProductPriceChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Embedded Price](ctp:api:type:ProductChangePriceAction) update action."""

    #: Unique identifier of the [ProductVariant](ctp:api:type:ProductVariant) for which the Price was changed.
    variant_id: int
    #: The current [Embedded Price](/projects/products#embedded-price) before the [Change Embedded Price](ctp:api:type:ProductChangePriceAction) update action.
    old_price: "Price"
    #: The [Embedded Price](/projects/products#embedded-price) after the [Change Embedded Price](ctp:api:type:ProductChangePriceAction) update action.
    new_price: "Price"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool
    #: The staged [Embedded Price](/projects/products#embedded-price) before the [Change Embedded Price](ctp:api:type:ProductChangePriceAction) update action.
    old_staged_price: typing.Optional["Price"]

    def __init__(
        self,
        *,
        variant_id: int,
        old_price: "Price",
        new_price: "Price",
        staged: bool,
        old_staged_price: typing.Optional["Price"] = None
    ):
        self.variant_id = variant_id
        self.old_price = old_price
        self.new_price = new_price
        self.staged = staged
        self.old_staged_price = old_staged_price

        super().__init__(type="ProductPriceChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceChangedMessagePayload":
        from ._schemas.message import ProductPriceChangedMessagePayloadSchema

        return ProductPriceChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceChangedMessagePayloadSchema

        return ProductPriceChangedMessagePayloadSchema().dump(self)


class ProductPriceDiscountsSetMessagePayload(MessagePayload):
    """Generated after a Price is updated due to a [Product Discount](ctp:api:type:ProductDiscount)."""

    #: Array containing details about the [Embedded Prices](ctp:api:type:Price) that were updated.
    updated_prices: typing.List["ProductPriceDiscountsSetUpdatedPrice"]

    def __init__(
        self, *, updated_prices: typing.List["ProductPriceDiscountsSetUpdatedPrice"]
    ):
        self.updated_prices = updated_prices

        super().__init__(type="ProductPriceDiscountsSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceDiscountsSetMessagePayload":
        from ._schemas.message import ProductPriceDiscountsSetMessagePayloadSchema

        return ProductPriceDiscountsSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceDiscountsSetMessagePayloadSchema

        return ProductPriceDiscountsSetMessagePayloadSchema().dump(self)


class ProductPriceExternalDiscountSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Discounted Embedded Price](ctp:api:type:ProductSetDiscountedPriceAction) update action."""

    #: Unique identifier of the [Product Variant](ctp:api:type:ProductVariant) for which the Discount was set.
    variant_id: int
    #: Key of the [Product Variant](ctp:api:type:ProductVariant) for which the Discount was set.
    variant_key: typing.Optional[str]
    #: SKU of the [Product Variant](ctp:api:type:ProductVariant) for which Discount was set.
    sku: typing.Optional[str]
    #: Unique identifier of the [Price](ctp:api:type:Price).
    price_id: str
    #: Discounted Price for the [Product Variant](ctp:api:type:ProductVariant) for which Discount was set.
    discounted: typing.Optional["DiscountedPrice"]
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        variant_id: int,
        variant_key: typing.Optional[str] = None,
        sku: typing.Optional[str] = None,
        price_id: str,
        discounted: typing.Optional["DiscountedPrice"] = None,
        staged: bool
    ):
        self.variant_id = variant_id
        self.variant_key = variant_key
        self.sku = sku
        self.price_id = price_id
        self.discounted = discounted
        self.staged = staged

        super().__init__(type="ProductPriceExternalDiscountSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceExternalDiscountSetMessagePayload":
        from ._schemas.message import (
            ProductPriceExternalDiscountSetMessagePayloadSchema,
        )

        return ProductPriceExternalDiscountSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            ProductPriceExternalDiscountSetMessagePayloadSchema,
        )

        return ProductPriceExternalDiscountSetMessagePayloadSchema().dump(self)


class ProductPriceKeySetMessagePayload(MessagePayload):
    """Generated after a successful [Set Price Key](ctp:api:type:ProductSetPriceKeyAction) update action."""

    variant_id: int
    #: Unique identifier of the [Price](ctp:api:type:Price).
    price_id: typing.Optional[str]
    #: `key` value of the [Price](ctp:api:type:Price) before the [Set Price Key](ctp:api:type:ProductSetPriceKeyAction) update action.
    old_key: typing.Optional[str]
    #: `key` value of the [Price](ctp:api:type:Price) after the [Set Price Key](ctp:api:type:ProductSetPriceKeyAction) update action.
    key: typing.Optional[str]
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(
        self,
        *,
        variant_id: int,
        price_id: typing.Optional[str] = None,
        old_key: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        staged: bool
    ):
        self.variant_id = variant_id
        self.price_id = price_id
        self.old_key = old_key
        self.key = key
        self.staged = staged

        super().__init__(type="ProductPriceKeySet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceKeySetMessagePayload":
        from ._schemas.message import ProductPriceKeySetMessagePayloadSchema

        return ProductPriceKeySetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceKeySetMessagePayloadSchema

        return ProductPriceKeySetMessagePayloadSchema().dump(self)


class ProductPriceModeSetMessagePayload(MessagePayload):
    """Generated after a successful [Set PriceMode](ctp:api:type:ProductSetPriceModeAction) update action."""

    #: The [PriceMode](ctp:api:type:ProductPriceModeEnum) that was set.
    to: "ProductPriceModeEnum"

    def __init__(self, *, to: "ProductPriceModeEnum"):
        self.to = to

        super().__init__(type="ProductPriceModeSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceModeSetMessagePayload":
        from ._schemas.message import ProductPriceModeSetMessagePayloadSchema

        return ProductPriceModeSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceModeSetMessagePayloadSchema

        return ProductPriceModeSetMessagePayloadSchema().dump(self)


class ProductPriceRemovedMessagePayload(MessagePayload):
    """Generated after a successful [Remove Embedded Price](ctp:api:type:ProductRemovePriceAction) update action."""

    #: Unique identifier of the [ProductVariant](ctp:api:type:ProductVariant) for which the Price was removed.
    variant_id: int
    #: The [Embedded Price](/projects/products#embedded-price) that was removed from the [ProductVariant](ctp:api:type:ProductVariant).
    price: "Price"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(self, *, variant_id: int, price: "Price", staged: bool):
        self.variant_id = variant_id
        self.price = price
        self.staged = staged

        super().__init__(type="ProductPriceRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPriceRemovedMessagePayload":
        from ._schemas.message import ProductPriceRemovedMessagePayloadSchema

        return ProductPriceRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPriceRemovedMessagePayloadSchema

        return ProductPriceRemovedMessagePayloadSchema().dump(self)


class ProductPricesSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Embedded Prices](ctp:api:type:ProductSetPricesAction) update action."""

    #: Unique identifier of the [ProductVariant](ctp:api:type:ProductVariant) for which the Price was set.
    variant_id: int
    #: The [Embedded Prices](ctp:api:type:Price) that were set on the [ProductVariant](ctp:api:type:ProductVariant).
    prices: typing.List["Price"]
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(self, *, variant_id: int, prices: typing.List["Price"], staged: bool):
        self.variant_id = variant_id
        self.prices = prices
        self.staged = staged

        super().__init__(type="ProductPricesSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPricesSetMessagePayload":
        from ._schemas.message import ProductPricesSetMessagePayloadSchema

        return ProductPricesSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPricesSetMessagePayloadSchema

        return ProductPricesSetMessagePayloadSchema().dump(self)


class ProductPublishedMessagePayload(MessagePayload):
    """Generated after a successful [Publish](ctp:api:type:ProductPublishAction) update action."""

    #: List of image URLs which were removed during the [Publish](ctp:api:type:ProductPublishAction) update action.
    removed_image_urls: typing.List["str"]
    #: Current [Product Projection](ctp:api:type:ProductProjection) of the [Product](ctp:api:type:Product) at the time of creation.
    product_projection: "ProductProjection"
    #: [Publishing Scope](ctp:api:type:ProductPublishScope) that was used during the [Publish](ctp:api:type:ProductPublishAction) update action.
    scope: "ProductPublishScope"

    def __init__(
        self,
        *,
        removed_image_urls: typing.List["str"],
        product_projection: "ProductProjection",
        scope: "ProductPublishScope"
    ):
        self.removed_image_urls = removed_image_urls
        self.product_projection = product_projection
        self.scope = scope

        super().__init__(type="ProductPublished")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductPublishedMessagePayload":
        from ._schemas.message import ProductPublishedMessagePayloadSchema

        return ProductPublishedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductPublishedMessagePayloadSchema

        return ProductPublishedMessagePayloadSchema().dump(self)


class ProductRemovedFromCategoryMessagePayload(MessagePayload):
    """Generated after a successful [Remove From Category](ctp:api:type:ProductRemoveFromCategoryAction) update action."""

    #: [Category](ctp:api:type:Category) the [Product](ctp:api:type:Product) was removed from.
    category: "CategoryReference"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(self, *, category: "CategoryReference", staged: bool):
        self.category = category
        self.staged = staged

        super().__init__(type="ProductRemovedFromCategory")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductRemovedFromCategoryMessagePayload":
        from ._schemas.message import ProductRemovedFromCategoryMessagePayloadSchema

        return ProductRemovedFromCategoryMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductRemovedFromCategoryMessagePayloadSchema

        return ProductRemovedFromCategoryMessagePayloadSchema().dump(self)


class ProductRevertedStagedChangesMessagePayload(MessagePayload):
    """Generated after a successful [Revert Staged Changes](ctp:api:type:ProductRevertStagedChangesAction) update action."""

    #: List of image URLs that were removed during the [Revert Staged Changes](ctp:api:type:ProductRevertStagedChangesAction) update action.
    removed_image_urls: typing.List["str"]

    def __init__(self, *, removed_image_urls: typing.List["str"]):
        self.removed_image_urls = removed_image_urls

        super().__init__(type="ProductRevertedStagedChanges")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductRevertedStagedChangesMessagePayload":
        from ._schemas.message import ProductRevertedStagedChangesMessagePayloadSchema

        return ProductRevertedStagedChangesMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductRevertedStagedChangesMessagePayloadSchema

        return ProductRevertedStagedChangesMessagePayloadSchema().dump(self)


class ProductSelectionCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create Product Selection](/../api/projects/product-selections#create-product-selection) request."""

    #: [Product Selection](ctp:api:type:ProductSelection) that was created.
    product_selection: "ProductSelection"

    def __init__(self, *, product_selection: "ProductSelection"):
        self.product_selection = product_selection

        super().__init__(type="ProductSelectionCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionCreatedMessagePayload":
        from ._schemas.message import ProductSelectionCreatedMessagePayloadSchema

        return ProductSelectionCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductSelectionCreatedMessagePayloadSchema

        return ProductSelectionCreatedMessagePayloadSchema().dump(self)


class ProductSelectionDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Delete Product Selection](/../api/projects/product-selections#create-product-selection) request."""

    def __init__(self):
        super().__init__(type="ProductSelectionDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionDeletedMessagePayload":
        from ._schemas.message import ProductSelectionDeletedMessagePayloadSchema

        return ProductSelectionDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductSelectionDeletedMessagePayloadSchema

        return ProductSelectionDeletedMessagePayloadSchema().dump(self)


class ProductSelectionProductAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Product](ctp:api:type:ProductSelectionAddProductAction) update action."""

    #: [Product](ctp:api:type:Product) that was added to the [Product Selection](ctp:api:type:ProductSelection).
    product: "ProductReference"
    #: Product Variant Selection after the [Add Product](ctp:api:type:ProductSelectionAddProductAction) update action.
    variant_selection: "ProductVariantSelection"

    def __init__(
        self,
        *,
        product: "ProductReference",
        variant_selection: "ProductVariantSelection"
    ):
        self.product = product
        self.variant_selection = variant_selection

        super().__init__(type="ProductSelectionProductAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionProductAddedMessagePayload":
        from ._schemas.message import ProductSelectionProductAddedMessagePayloadSchema

        return ProductSelectionProductAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductSelectionProductAddedMessagePayloadSchema

        return ProductSelectionProductAddedMessagePayloadSchema().dump(self)


class ProductSelectionProductExcludedMessagePayload(MessagePayload):
    """Generated after a successful [Exclude Product](ctp:api:type:ProductSelectionExcludeProductAction) update action."""

    #: [Product](ctp:api:type:Product) that was excluded from the [Product Selection](ctp:api:type:ProductSelection).
    product: "ProductReference"
    #: Product Variant Exclusion after the [Exclude Product](ctp:api:type:ProductSelectionExcludeProductAction) update action.
    variant_exclusion: "ProductVariantExclusion"

    def __init__(
        self,
        *,
        product: "ProductReference",
        variant_exclusion: "ProductVariantExclusion"
    ):
        self.product = product
        self.variant_exclusion = variant_exclusion

        super().__init__(type="ProductSelectionProductExcluded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionProductExcludedMessagePayload":
        from ._schemas.message import (
            ProductSelectionProductExcludedMessagePayloadSchema,
        )

        return ProductSelectionProductExcludedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            ProductSelectionProductExcludedMessagePayloadSchema,
        )

        return ProductSelectionProductExcludedMessagePayloadSchema().dump(self)


class ProductSelectionProductRemovedMessagePayload(MessagePayload):
    """Generated after a successful [Remove Product](ctp:api:type:ProductSelectionRemoveProductAction) update action."""

    #: [Product](ctp:api:type:Product) that was removed from the Product Selection.
    product: "ProductReference"

    def __init__(self, *, product: "ProductReference"):
        self.product = product

        super().__init__(type="ProductSelectionProductRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionProductRemovedMessagePayload":
        from ._schemas.message import ProductSelectionProductRemovedMessagePayloadSchema

        return ProductSelectionProductRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductSelectionProductRemovedMessagePayloadSchema

        return ProductSelectionProductRemovedMessagePayloadSchema().dump(self)


class ProductSelectionVariantExclusionChangedMessagePayload(MessagePayload):
    """Generated after a successful [Set Variant Exclusion](ctp:api:type:ProductSelectionSetVariantExclusionAction) update action."""

    #: [Product](ctp:api:type:Product) for which the Product Variant Exclusion changed.
    product: "ProductReference"
    #: Product Variant Exclusion before the [Set Variant Exclusion](ctp:api:type:ProductSelectionSetVariantExclusionAction) update action.
    old_variant_exclusion: "ProductVariantExclusion"
    #: Product Variant Exclusion after the [Set Variant Exclusion](ctp:api:type:ProductSelectionSetVariantExclusionAction) update action.
    new_variant_exclusion: "ProductVariantExclusion"

    def __init__(
        self,
        *,
        product: "ProductReference",
        old_variant_exclusion: "ProductVariantExclusion",
        new_variant_exclusion: "ProductVariantExclusion"
    ):
        self.product = product
        self.old_variant_exclusion = old_variant_exclusion
        self.new_variant_exclusion = new_variant_exclusion

        super().__init__(type="ProductSelectionVariantExclusionChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionVariantExclusionChangedMessagePayload":
        from ._schemas.message import (
            ProductSelectionVariantExclusionChangedMessagePayloadSchema,
        )

        return ProductSelectionVariantExclusionChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            ProductSelectionVariantExclusionChangedMessagePayloadSchema,
        )

        return ProductSelectionVariantExclusionChangedMessagePayloadSchema().dump(self)


class ProductSelectionVariantSelectionChangedMessagePayload(MessagePayload):
    """Generated after a successful [Set Variant Selection](ctp:api:type:ProductSelectionSetVariantSelectionAction) update action."""

    #: [Product](ctp:api:type:Product) for which the Product Variant Selection changed.
    product: "ProductReference"
    #: Product Variant Selection before the [Set Variant Selection](ctp:api:type:ProductSelectionSetVariantSelectionAction) update action.
    old_variant_selection: "ProductVariantSelection"
    #: Product Variant Selection after the [Set Variant Selection](ctp:api:type:ProductSelectionSetVariantSelectionAction) update action.
    new_variant_selection: "ProductVariantSelection"

    def __init__(
        self,
        *,
        product: "ProductReference",
        old_variant_selection: "ProductVariantSelection",
        new_variant_selection: "ProductVariantSelection"
    ):
        self.product = product
        self.old_variant_selection = old_variant_selection
        self.new_variant_selection = new_variant_selection

        super().__init__(type="ProductSelectionVariantSelectionChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSelectionVariantSelectionChangedMessagePayload":
        from ._schemas.message import (
            ProductSelectionVariantSelectionChangedMessagePayloadSchema,
        )

        return ProductSelectionVariantSelectionChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            ProductSelectionVariantSelectionChangedMessagePayloadSchema,
        )

        return ProductSelectionVariantSelectionChangedMessagePayloadSchema().dump(self)


class ProductSlugChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Slug](ctp:api:type:ProductChangeSlugAction) update action."""

    #: The slug of the [Product](ctp:api:type:Product) after the [Change Slug](ctp:api:type:ProductChangeSlugAction) update action.
    slug: "LocalizedString"
    #: The slug of the [Product](ctp:api:type:Product) before the [Change Slug](ctp:api:type:ProductChangeSlugAction) update action.
    old_slug: typing.Optional["LocalizedString"]

    def __init__(
        self,
        *,
        slug: "LocalizedString",
        old_slug: typing.Optional["LocalizedString"] = None
    ):
        self.slug = slug
        self.old_slug = old_slug

        super().__init__(type="ProductSlugChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductSlugChangedMessagePayload":
        from ._schemas.message import ProductSlugChangedMessagePayloadSchema

        return ProductSlugChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductSlugChangedMessagePayloadSchema

        return ProductSlugChangedMessagePayloadSchema().dump(self)


class ProductStateTransitionMessagePayload(MessagePayload):
    """Generated after a successful [Transition State](ctp:api:type:ProductTransitionStateAction) update action."""

    #: Product [State](ctp:api:type:State) after the [Transition State](ctp:api:type:ProductTransitionStateAction) update action.
    state: "StateReference"
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:ProductTransitionStateAction) update action.
    force: bool

    def __init__(self, *, state: "StateReference", force: bool):
        self.state = state
        self.force = force

        super().__init__(type="ProductStateTransition")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductStateTransitionMessagePayload":
        from ._schemas.message import ProductStateTransitionMessagePayloadSchema

        return ProductStateTransitionMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductStateTransitionMessagePayloadSchema

        return ProductStateTransitionMessagePayloadSchema().dump(self)


class ProductUnpublishedMessagePayload(MessagePayload):
    """Generated after a successful [Unpublish Product](ctp:api:type:ProductUnpublishAction) update action."""

    def __init__(self):
        super().__init__(type="ProductUnpublished")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductUnpublishedMessagePayload":
        from ._schemas.message import ProductUnpublishedMessagePayloadSchema

        return ProductUnpublishedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductUnpublishedMessagePayloadSchema

        return ProductUnpublishedMessagePayloadSchema().dump(self)


class ProductVariantAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Product Variant](ctp:api:type:ProductAddVariantAction) update action."""

    #: Unique identifier of the [Product Variant](ctp:api:type:ProductVariant) that was added.
    variant: "ProductVariant"
    #: Whether the update was only applied to the staged [Product Projection](ctp:api:type:ProductProjection).
    staged: bool

    def __init__(self, *, variant: "ProductVariant", staged: bool):
        self.variant = variant
        self.staged = staged

        super().__init__(type="ProductVariantAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductVariantAddedMessagePayload":
        from ._schemas.message import ProductVariantAddedMessagePayloadSchema

        return ProductVariantAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductVariantAddedMessagePayloadSchema

        return ProductVariantAddedMessagePayloadSchema().dump(self)


class ProductVariantDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Remove Product Variant](ctp:api:type:ProductRemoveVariantAction) update action."""

    #: Unique identifier of the [Product Variant](ctp:api:type:ProductVariant) that was added.
    variant: typing.Optional["ProductVariant"]
    #: List of image URLs that were removed with the [Remove Product Variant](ctp:api:type:ProductRemoveVariantAction) update action.
    removed_image_urls: typing.List["str"]

    def __init__(
        self,
        *,
        variant: typing.Optional["ProductVariant"] = None,
        removed_image_urls: typing.List["str"]
    ):
        self.variant = variant
        self.removed_image_urls = removed_image_urls

        super().__init__(type="ProductVariantDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ProductVariantDeletedMessagePayload":
        from ._schemas.message import ProductVariantDeletedMessagePayloadSchema

        return ProductVariantDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ProductVariantDeletedMessagePayloadSchema

        return ProductVariantDeletedMessagePayloadSchema().dump(self)


class QuoteCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create Quote](/../api/projects/quotes#create-quote) request."""

    #: [Quote](/../api/projects/quotes) that was created.
    quote: "Quote"

    def __init__(self, *, quote: "Quote"):
        self.quote = quote

        super().__init__(type="QuoteCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteCreatedMessagePayload":
        from ._schemas.message import QuoteCreatedMessagePayloadSchema

        return QuoteCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteCreatedMessagePayloadSchema

        return QuoteCreatedMessagePayloadSchema().dump(self)


class QuoteCustomerChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Customer](ctp:api:type:QuoteChangeCustomerAction) update action."""

    #: The [Buyer](/../api/quotes-overview#buyer) who now owns the Quote.
    customer: "CustomerReference"
    #: The previous [Buyer](/../api/quotes-overview#buyer).
    previous_customer: "CustomerReference"

    def __init__(
        self, *, customer: "CustomerReference", previous_customer: "CustomerReference"
    ):
        self.customer = customer
        self.previous_customer = previous_customer

        super().__init__(type="QuoteCustomerChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteCustomerChangedMessagePayload":
        from ._schemas.message import QuoteCustomerChangedMessagePayloadSchema

        return QuoteCustomerChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteCustomerChangedMessagePayloadSchema

        return QuoteCustomerChangedMessagePayloadSchema().dump(self)


class QuoteDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Delete Quote](/../api/projects/quotes#delete-quote) request."""

    def __init__(self):
        super().__init__(type="QuoteDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteDeletedMessagePayload":
        from ._schemas.message import QuoteDeletedMessagePayloadSchema

        return QuoteDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteDeletedMessagePayloadSchema

        return QuoteDeletedMessagePayloadSchema().dump(self)


class QuoteRequestCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create Quote Request](/../api/projects/quote-requests#create-quoterequest) request."""

    #: [Quote Request](/../api/projects/quote-requests) that was created.
    quote_request: "QuoteRequest"

    def __init__(self, *, quote_request: "QuoteRequest"):
        self.quote_request = quote_request

        super().__init__(type="QuoteRequestCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteRequestCreatedMessagePayload":
        from ._schemas.message import QuoteRequestCreatedMessagePayloadSchema

        return QuoteRequestCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteRequestCreatedMessagePayloadSchema

        return QuoteRequestCreatedMessagePayloadSchema().dump(self)


class QuoteRequestCustomerChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Customer](ctp:api:type:QuoteRequestChangeCustomerAction) update action."""

    #: The [Buyer](/../api/quotes-overview#buyer) who now owns the Quote Request.
    customer: "CustomerReference"
    #: The previous [Buyer](/../api/quotes-overview#buyer).
    previous_customer: "CustomerReference"

    def __init__(
        self, *, customer: "CustomerReference", previous_customer: "CustomerReference"
    ):
        self.customer = customer
        self.previous_customer = previous_customer

        super().__init__(type="QuoteRequestCustomerChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteRequestCustomerChangedMessagePayload":
        from ._schemas.message import QuoteRequestCustomerChangedMessagePayloadSchema

        return QuoteRequestCustomerChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteRequestCustomerChangedMessagePayloadSchema

        return QuoteRequestCustomerChangedMessagePayloadSchema().dump(self)


class QuoteRequestDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Delete Quote Request](/../api/projects/quote-requests#delete-quoterequest) request."""

    def __init__(self):
        super().__init__(type="QuoteRequestDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteRequestDeletedMessagePayload":
        from ._schemas.message import QuoteRequestDeletedMessagePayloadSchema

        return QuoteRequestDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteRequestDeletedMessagePayloadSchema

        return QuoteRequestDeletedMessagePayloadSchema().dump(self)


class QuoteRequestStateChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Quote Request State](ctp:api:type:QuoteRequestChangeQuoteRequestStateAction) update action."""

    #: State of the Quote Request after the [Change Quote Request State](ctp:api:type:QuoteRequestChangeQuoteRequestStateAction) update action.
    quote_request_state: "QuoteRequestState"
    #: State of the Quote Request before the [Change Quote Request State](ctp:api:type:QuoteRequestChangeQuoteRequestStateAction) update action.
    old_quote_request_state: "QuoteRequestState"

    def __init__(
        self,
        *,
        quote_request_state: "QuoteRequestState",
        old_quote_request_state: "QuoteRequestState"
    ):
        self.quote_request_state = quote_request_state
        self.old_quote_request_state = old_quote_request_state

        super().__init__(type="QuoteRequestStateChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteRequestStateChangedMessagePayload":
        from ._schemas.message import QuoteRequestStateChangedMessagePayloadSchema

        return QuoteRequestStateChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteRequestStateChangedMessagePayloadSchema

        return QuoteRequestStateChangedMessagePayloadSchema().dump(self)


class QuoteRequestStateTransitionMessagePayload(MessagePayload):
    """Generated after a successful [Transition State](ctp:api:type:QuoteRequestTransitionStateAction) update action."""

    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) after the [Transition State](ctp:api:type:QuoteRequestTransitionStateAction) update action.
    state: "StateReference"
    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) before the [Transition State](ctp:api:type:QuoteRequestTransitionStateAction) update action.
    old_state: typing.Optional["StateReference"]
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:QuoteRequestTransitionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        state: "StateReference",
        old_state: typing.Optional["StateReference"] = None,
        force: bool
    ):
        self.state = state
        self.old_state = old_state
        self.force = force

        super().__init__(type="QuoteRequestStateTransition")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteRequestStateTransitionMessagePayload":
        from ._schemas.message import QuoteRequestStateTransitionMessagePayloadSchema

        return QuoteRequestStateTransitionMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteRequestStateTransitionMessagePayloadSchema

        return QuoteRequestStateTransitionMessagePayloadSchema().dump(self)


class QuoteStateChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Quote State](ctp:api:type:QuoteChangeQuoteStateAction) update action."""

    #: State of the Quote after the [Change Quote State](ctp:api:type:QuoteChangeQuoteStateAction) update action.
    quote_state: "QuoteState"
    #: State of the Quote before the [Change Quote State](ctp:api:type:QuoteChangeQuoteStateAction) update action.
    old_quote_state: "QuoteState"

    def __init__(self, *, quote_state: "QuoteState", old_quote_state: "QuoteState"):
        self.quote_state = quote_state
        self.old_quote_state = old_quote_state

        super().__init__(type="QuoteStateChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteStateChangedMessagePayload":
        from ._schemas.message import QuoteStateChangedMessagePayloadSchema

        return QuoteStateChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteStateChangedMessagePayloadSchema

        return QuoteStateChangedMessagePayloadSchema().dump(self)


class QuoteStateTransitionMessagePayload(MessagePayload):
    """Generated after a successful [Transition State](ctp:api:type:QuoteTransitionStateAction) update action."""

    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) after the [Transition State](ctp:api:type:QuoteTransitionStateAction) update action.
    state: "StateReference"
    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) before the [Transition State](ctp:api:type:QuoteTransitionStateAction) update action.
    old_state: typing.Optional["StateReference"]
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:QuoteTransitionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        state: "StateReference",
        old_state: typing.Optional["StateReference"] = None,
        force: bool
    ):
        self.state = state
        self.old_state = old_state
        self.force = force

        super().__init__(type="QuoteStateTransition")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "QuoteStateTransitionMessagePayload":
        from ._schemas.message import QuoteStateTransitionMessagePayloadSchema

        return QuoteStateTransitionMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import QuoteStateTransitionMessagePayloadSchema

        return QuoteStateTransitionMessagePayloadSchema().dump(self)


class ReturnInfoAddedMessagePayload(OrderMessagePayload):
    """Generated after a successful [Add Return Info](ctp:api:type:OrderAddReturnInfoAction) update action."""

    #: The [ReturnInfo](ctp:api:type:ReturnInfo) that was added to the [Order](ctp:api:type:Order).
    return_info: "ReturnInfo"

    def __init__(self, *, return_info: "ReturnInfo"):
        self.return_info = return_info

        super().__init__(type="ReturnInfoAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ReturnInfoAddedMessagePayload":
        from ._schemas.message import ReturnInfoAddedMessagePayloadSchema

        return ReturnInfoAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ReturnInfoAddedMessagePayloadSchema

        return ReturnInfoAddedMessagePayloadSchema().dump(self)


class ReturnInfoSetMessagePayload(OrderMessagePayload):
    """Generated after a successful [Set Return Info](ctp:api:type:OrderSetReturnInfoAction) update action on [Orders](ctp:api:type:Order) and [Order Edits](ctp:api:type:OrderEdit)."""

    #: The [ReturnInfo](ctp:api:type:ReturnInfo) that was set on the [Order](ctp:api:type:Order) or [Order Edit](ctp:api:type:OrderEdit).
    return_info: typing.Optional[typing.List["ReturnInfo"]]

    def __init__(
        self, *, return_info: typing.Optional[typing.List["ReturnInfo"]] = None
    ):
        self.return_info = return_info

        super().__init__(type="ReturnInfoSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ReturnInfoSetMessagePayload":
        from ._schemas.message import ReturnInfoSetMessagePayloadSchema

        return ReturnInfoSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ReturnInfoSetMessagePayloadSchema

        return ReturnInfoSetMessagePayloadSchema().dump(self)


class ReviewCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create Review](/../api/projects/reviews#create-a-review) request."""

    #: [Review](ctp:api:type:Review) that was created.
    review: "Review"

    def __init__(self, *, review: "Review"):
        self.review = review

        super().__init__(type="ReviewCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ReviewCreatedMessagePayload":
        from ._schemas.message import ReviewCreatedMessagePayloadSchema

        return ReviewCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ReviewCreatedMessagePayloadSchema

        return ReviewCreatedMessagePayloadSchema().dump(self)


class ReviewRatingSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Rating](ctp:api:type:ReviewSetRatingAction) update action."""

    #: The `rating` of the [Review](ctp:api:type:Review) before the [Set Rating](ctp:api:type:ReviewSetRatingAction) update action.
    old_rating: typing.Optional[float]
    #: The `rating` of the [Review](ctp:api:type:Review) after the [Set Rating](ctp:api:type:ReviewSetRatingAction) update action.
    new_rating: typing.Optional[float]
    #: Whether the [Review](ctp:api:type:Review) was taken into account in the ratings statistics of the target.
    included_in_statistics: bool
    #: [Reference](ctp:api:type:Reference) to the resource that the [Review](ctp:api:type:Review) belongs to.
    target: typing.Optional["Reference"]

    def __init__(
        self,
        *,
        old_rating: typing.Optional[float] = None,
        new_rating: typing.Optional[float] = None,
        included_in_statistics: bool,
        target: typing.Optional["Reference"] = None
    ):
        self.old_rating = old_rating
        self.new_rating = new_rating
        self.included_in_statistics = included_in_statistics
        self.target = target

        super().__init__(type="ReviewRatingSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ReviewRatingSetMessagePayload":
        from ._schemas.message import ReviewRatingSetMessagePayloadSchema

        return ReviewRatingSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ReviewRatingSetMessagePayloadSchema

        return ReviewRatingSetMessagePayloadSchema().dump(self)


class ReviewStateTransitionMessagePayload(MessagePayload):
    """Generated after a successful [Transition State](ctp:api:type:ReviewTransitionStateAction) update action."""

    #: [State](ctp:api:type:State) of the [Review](ctp:api:type:Review) before the [Transition State](ctp:api:type:ReviewTransitionStateAction) update action.
    old_state: typing.Optional["StateReference"]
    #: [State](ctp:api:type:State) of the [Review](ctp:api:type:Review) after the [Transition State](ctp:api:type:ReviewTransitionStateAction) update action.
    new_state: "StateReference"
    #: Whether the old [Review](ctp:api:type:Review) was taken into account in the rating statistics of the target before the state transition.
    old_included_in_statistics: bool
    #: Whether the new [Review](ctp:api:type:Review) was taken into account in the rating statistics of the target after the state transition.
    new_included_in_statistics: bool
    #: [Reference](ctp:api:type:Reference) to the resource that the [Review](ctp:api:type:Review) belongs to.
    target: typing.Optional["Reference"]
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:ReviewTransitionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        old_state: typing.Optional["StateReference"] = None,
        new_state: "StateReference",
        old_included_in_statistics: bool,
        new_included_in_statistics: bool,
        target: typing.Optional["Reference"] = None,
        force: bool
    ):
        self.old_state = old_state
        self.new_state = new_state
        self.old_included_in_statistics = old_included_in_statistics
        self.new_included_in_statistics = new_included_in_statistics
        self.target = target
        self.force = force

        super().__init__(type="ReviewStateTransition")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ReviewStateTransitionMessagePayload":
        from ._schemas.message import ReviewStateTransitionMessagePayloadSchema

        return ReviewStateTransitionMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ReviewStateTransitionMessagePayloadSchema

        return ReviewStateTransitionMessagePayloadSchema().dump(self)


class ShoppingListStoreSetMessagePayload(MessagePayload):
    #: [Reference](/../api/types#reference) to a [Store](ctp:api:type:Store) by its key.
    store: "StoreKeyReference"

    def __init__(self, *, store: "StoreKeyReference"):
        self.store = store

        super().__init__(type="ShoppingListStoreSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ShoppingListStoreSetMessagePayload":
        from ._schemas.message import ShoppingListStoreSetMessagePayloadSchema

        return ShoppingListStoreSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import ShoppingListStoreSetMessagePayloadSchema

        return ShoppingListStoreSetMessagePayloadSchema().dump(self)


class StagedQuoteCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create Staged Quote](/../api/projects/staged-quotes#create-stagedquote) request."""

    #: [Staged Quote](/../api/projects/staged-quotes) that was created.
    staged_quote: "StagedQuote"

    def __init__(self, *, staged_quote: "StagedQuote"):
        self.staged_quote = staged_quote

        super().__init__(type="StagedQuoteCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteCreatedMessagePayload":
        from ._schemas.message import StagedQuoteCreatedMessagePayloadSchema

        return StagedQuoteCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteCreatedMessagePayloadSchema

        return StagedQuoteCreatedMessagePayloadSchema().dump(self)


class StagedQuoteDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Delete Staged Quote](/../api/projects/staged-quotes#delete-stagedquote) request."""

    def __init__(self):
        super().__init__(type="StagedQuoteDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteDeletedMessagePayload":
        from ._schemas.message import StagedQuoteDeletedMessagePayloadSchema

        return StagedQuoteDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteDeletedMessagePayloadSchema

        return StagedQuoteDeletedMessagePayloadSchema().dump(self)


class StagedQuoteSellerCommentSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Seller Comment](ctp:api:type:StagedQuoteSetSellerCommentAction) update action."""

    #: `sellerComment` on the [StagedQuote](ctp:api:type:StagedQuote) after a successful [Set Seller Comment](ctp:api:type:StagedQuoteSetSellerCommentAction) update action.
    seller_comment: str

    def __init__(self, *, seller_comment: str):
        self.seller_comment = seller_comment

        super().__init__(type="StagedQuoteSellerCommentSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteSellerCommentSetMessagePayload":
        from ._schemas.message import StagedQuoteSellerCommentSetMessagePayloadSchema

        return StagedQuoteSellerCommentSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteSellerCommentSetMessagePayloadSchema

        return StagedQuoteSellerCommentSetMessagePayloadSchema().dump(self)


class StagedQuoteStateChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Staged Quote State](ctp:api:type:StagedQuoteChangeStagedQuoteStateAction) update action."""

    #: State of the Staged Quote after the [Change Staged Quote State](ctp:api:type:StagedQuoteChangeStagedQuoteStateAction) update action.
    staged_quote_state: "StagedQuoteState"
    #: State of the Staged Quote before the [Change Staged Quote State](ctp:api:type:StagedQuoteChangeStagedQuoteStateAction) update action.
    old_staged_quote_state: "StagedQuoteState"

    def __init__(
        self,
        *,
        staged_quote_state: "StagedQuoteState",
        old_staged_quote_state: "StagedQuoteState"
    ):
        self.staged_quote_state = staged_quote_state
        self.old_staged_quote_state = old_staged_quote_state

        super().__init__(type="StagedQuoteStateChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteStateChangedMessagePayload":
        from ._schemas.message import StagedQuoteStateChangedMessagePayloadSchema

        return StagedQuoteStateChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteStateChangedMessagePayloadSchema

        return StagedQuoteStateChangedMessagePayloadSchema().dump(self)


class StagedQuoteStateTransitionMessagePayload(MessagePayload):
    """Generated after a successful [Transition State](ctp:api:type:StagedQuoteTransitionStateAction) update action."""

    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) after the [Transition State](ctp:api:type:StagedQuoteTransitionStateAction) update action.
    state: "StateReference"
    #: [State](ctp:api:type:State) of the [Quote](ctp:api:type:Quote) before the [Transition State](ctp:api:type:StagedQuoteTransitionStateAction) update action.
    old_state: typing.Optional["StateReference"]
    #: Whether [State](ctp:api:type:State) transition validations were turned off during the [Transition State](ctp:api:type:StagedQuoteTransitionStateAction) update action.
    force: bool

    def __init__(
        self,
        *,
        state: "StateReference",
        old_state: typing.Optional["StateReference"] = None,
        force: bool
    ):
        self.state = state
        self.old_state = old_state
        self.force = force

        super().__init__(type="StagedQuoteStateTransition")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteStateTransitionMessagePayload":
        from ._schemas.message import StagedQuoteStateTransitionMessagePayloadSchema

        return StagedQuoteStateTransitionMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteStateTransitionMessagePayloadSchema

        return StagedQuoteStateTransitionMessagePayloadSchema().dump(self)


class StagedQuoteValidToSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Valid To](ctp:api:type:StagedQuoteSetValidToAction) update action."""

    #: Expiration date for the Staged Quote after the [Set Valid To](ctp:api:type:StagedQuoteSetValidToAction) update action.
    valid_to: datetime.datetime

    def __init__(self, *, valid_to: datetime.datetime):
        self.valid_to = valid_to

        super().__init__(type="StagedQuoteValidToSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StagedQuoteValidToSetMessagePayload":
        from ._schemas.message import StagedQuoteValidToSetMessagePayloadSchema

        return StagedQuoteValidToSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StagedQuoteValidToSetMessagePayloadSchema

        return StagedQuoteValidToSetMessagePayloadSchema().dump(self)


class StandalonePriceActiveChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Active](ctp:api:types:StandalonePriceChangeActiveAction) update action."""

    #: Value of the `active` field of the StandalonePrice after the [Change Active](ctp:api:types:StandalonePriceChangeActiveAction) update action.
    active: bool
    #: Value of the `active` field of the StandalonePrice before the [Change Active](ctp:api:types:StandalonePriceChangeActiveAction) update action.
    old_active: bool

    def __init__(self, *, active: bool, old_active: bool):
        self.active = active
        self.old_active = old_active

        super().__init__(type="StandalonePriceActiveChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceActiveChangedMessagePayload":
        from ._schemas.message import StandalonePriceActiveChangedMessagePayloadSchema

        return StandalonePriceActiveChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceActiveChangedMessagePayloadSchema

        return StandalonePriceActiveChangedMessagePayloadSchema().dump(self)


class StandalonePriceCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create StandalonePrice](/../api/projects/standalone-prices#create-standaloneprice) request."""

    #: [Standalone Price](ctp:api:type:StandalonePrice) that was created.
    standalone_price: "StandalonePrice"

    def __init__(self, *, standalone_price: "StandalonePrice"):
        self.standalone_price = standalone_price

        super().__init__(type="StandalonePriceCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceCreatedMessagePayload":
        from ._schemas.message import StandalonePriceCreatedMessagePayloadSchema

        return StandalonePriceCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceCreatedMessagePayloadSchema

        return StandalonePriceCreatedMessagePayloadSchema().dump(self)


class StandalonePriceDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Delete StandalonePrice](/../api/projects/standalone-prices#delete-standaloneprice) request."""

    #: SKU of the [ProductVariant](ctp:api:type:ProductVariant) to which the deleted Standalone Price was associated.
    sku: str

    def __init__(self, *, sku: str):
        self.sku = sku

        super().__init__(type="StandalonePriceDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceDeletedMessagePayload":
        from ._schemas.message import StandalonePriceDeletedMessagePayloadSchema

        return StandalonePriceDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceDeletedMessagePayloadSchema

        return StandalonePriceDeletedMessagePayloadSchema().dump(self)


class StandalonePriceDiscountSetMessagePayload(MessagePayload):
    """Generated after a [Product Discount](ctp:api:type:ProductDiscount) is successfully applied to a StandalonePrice."""

    #: The new `discounted` value of the updated [StandalonePrice](ctp:api:type:StandalonePrice).
    discounted: typing.Optional["DiscountedPrice"]

    def __init__(self, *, discounted: typing.Optional["DiscountedPrice"] = None):
        self.discounted = discounted

        super().__init__(type="StandalonePriceDiscountSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceDiscountSetMessagePayload":
        from ._schemas.message import StandalonePriceDiscountSetMessagePayloadSchema

        return StandalonePriceDiscountSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceDiscountSetMessagePayloadSchema

        return StandalonePriceDiscountSetMessagePayloadSchema().dump(self)


class StandalonePriceExternalDiscountSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Discounted Price](ctp:api:type:StandalonePriceSetDiscountedPriceAction) update action."""

    #: The `discounted` value of the [StandalonePrice](ctp:api:type:StandalonePrice) after the [Set Discounted Price](ctp:api:type:StandalonePriceSetDiscountedPriceAction) update action.
    discounted: typing.Optional["DiscountedPrice"]

    def __init__(self, *, discounted: typing.Optional["DiscountedPrice"] = None):
        self.discounted = discounted

        super().__init__(type="StandalonePriceExternalDiscountSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceExternalDiscountSetMessagePayload":
        from ._schemas.message import (
            StandalonePriceExternalDiscountSetMessagePayloadSchema,
        )

        return StandalonePriceExternalDiscountSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            StandalonePriceExternalDiscountSetMessagePayloadSchema,
        )

        return StandalonePriceExternalDiscountSetMessagePayloadSchema().dump(self)


class StandalonePriceKeySetMessagePayload(MessagePayload):
    """Generated after a successful [Set Key](ctp:api:type:StandalonePriceSetKeyAction) update action."""

    #: `key` value of the [StandalonePrice](ctp:api:type:StandalonePrice) after the [Set Key](ctp:api:type:StandalonePriceSetKeyAction) update action.
    key: typing.Optional[str]
    #: `key` value of the [StandalonePrice](ctp:api:type:StandalonePrice) before the [Set Key](ctp:api:type:StandalonePriceSetKeyAction) update action.
    old_key: typing.Optional[str]

    def __init__(
        self, *, key: typing.Optional[str] = None, old_key: typing.Optional[str] = None
    ):
        self.key = key
        self.old_key = old_key

        super().__init__(type="StandalonePriceKeySet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceKeySetMessagePayload":
        from ._schemas.message import StandalonePriceKeySetMessagePayloadSchema

        return StandalonePriceKeySetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceKeySetMessagePayloadSchema

        return StandalonePriceKeySetMessagePayloadSchema().dump(self)


class StandalonePriceStagedChangesAppliedMessagePayload(MessagePayload):
    """Generated after a successful [Apply Staged Changes](ctp:api:types:StandalonePriceApplyStagedChangesAction) update action."""

    #: Applied changes of the [StandalonePrice](/../api/projects/standalone-prices) after the [Apply Staged Changes](ctp:api:types:StandalonePriceApplyStagedChangesAction) update action.
    staged_changes: "StagedStandalonePrice"

    def __init__(self, *, staged_changes: "StagedStandalonePrice"):
        self.staged_changes = staged_changes

        super().__init__(type="StandalonePriceStagedChangesApplied")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceStagedChangesAppliedMessagePayload":
        from ._schemas.message import (
            StandalonePriceStagedChangesAppliedMessagePayloadSchema,
        )

        return StandalonePriceStagedChangesAppliedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            StandalonePriceStagedChangesAppliedMessagePayloadSchema,
        )

        return StandalonePriceStagedChangesAppliedMessagePayloadSchema().dump(self)


class StandalonePriceTierAddedMessagePayload(MessagePayload):
    """Generated after a successful [Add Price Tier](ctp:api:type:StandalonePriceAddPriceTierAction) update action"""

    #: The [Price Tier](ctp:api:type:PriceTier) that has been added to the array field `tiers` for the [StandalonePrice](ctp:api:type:StandalonePrice).
    tier: "PriceTier"

    def __init__(self, *, tier: "PriceTier"):
        self.tier = tier

        super().__init__(type="StandalonePriceTierAdded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceTierAddedMessagePayload":
        from ._schemas.message import StandalonePriceTierAddedMessagePayloadSchema

        return StandalonePriceTierAddedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceTierAddedMessagePayloadSchema

        return StandalonePriceTierAddedMessagePayloadSchema().dump(self)


class StandalonePriceTierRemovedMessagePayload(MessagePayload):
    """Generated after a successful [Remove Price Tier](ctp:api:type:StandalonePriceRemovePriceTierAction) update action"""

    #: The [Price Tier](ctp:api:type:PriceTier) that has been removed from the array field `tiers` for the [StandalonePrice](ctp:api:type:StandalonePrice).
    removed_tier: "PriceTier"

    def __init__(self, *, removed_tier: "PriceTier"):
        self.removed_tier = removed_tier

        super().__init__(type="StandalonePriceTierRemoved")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceTierRemovedMessagePayload":
        from ._schemas.message import StandalonePriceTierRemovedMessagePayloadSchema

        return StandalonePriceTierRemovedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceTierRemovedMessagePayloadSchema

        return StandalonePriceTierRemovedMessagePayloadSchema().dump(self)


class StandalonePriceTiersSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Price Tier](ctp:api:type:StandalonePriceSetPriceTiersAction) update action"""

    #: The updated content of the field `tiers` of the affected [StandalonePrice](ctp:api:type:StandalonePrice).
    tiers: typing.List["PriceTier"]
    #: The previous content of the field `tiers` of the affected [StandalonePrice](ctp:api:type:StandalonePrice).
    previous_tiers: typing.List["PriceTier"]

    def __init__(
        self,
        *,
        tiers: typing.List["PriceTier"],
        previous_tiers: typing.List["PriceTier"]
    ):
        self.tiers = tiers
        self.previous_tiers = previous_tiers

        super().__init__(type="StandalonePriceTiersSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceTiersSetMessagePayload":
        from ._schemas.message import StandalonePriceTiersSetMessagePayloadSchema

        return StandalonePriceTiersSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceTiersSetMessagePayloadSchema

        return StandalonePriceTiersSetMessagePayloadSchema().dump(self)


class StandalonePriceValidFromAndUntilSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Valid From and Until](ctp:api:type:StandalonePriceSetValidFromAndUntilAction) update action."""

    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validFrom` after the [Set Valid From and Until](ctp:api:type:StandalonePriceSetValidFromAndUntilAction) update action.
    valid_from: typing.Optional[datetime.datetime]
    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validFrom` before the [Set Valid From and Until](ctp:api:type:StandalonePriceSetValidFromAndUntilAction) update action.
    previous_valid_from: typing.Optional[datetime.datetime]
    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validUntil` after the [Set Valid From and Until](ctp:api:type:StandalonePriceSetValidFromAndUntilAction) update action.
    valid_until: typing.Optional[datetime.datetime]
    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validUntil` before the [Set Valid From and Until](ctp:api:type:StandalonePriceSetValidFromAndUntilAction) update action.
    previous_valid_until: typing.Optional[datetime.datetime]

    def __init__(
        self,
        *,
        valid_from: typing.Optional[datetime.datetime] = None,
        previous_valid_from: typing.Optional[datetime.datetime] = None,
        valid_until: typing.Optional[datetime.datetime] = None,
        previous_valid_until: typing.Optional[datetime.datetime] = None
    ):
        self.valid_from = valid_from
        self.previous_valid_from = previous_valid_from
        self.valid_until = valid_until
        self.previous_valid_until = previous_valid_until

        super().__init__(type="StandalonePriceValidFromAndUntilSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceValidFromAndUntilSetMessagePayload":
        from ._schemas.message import (
            StandalonePriceValidFromAndUntilSetMessagePayloadSchema,
        )

        return StandalonePriceValidFromAndUntilSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            StandalonePriceValidFromAndUntilSetMessagePayloadSchema,
        )

        return StandalonePriceValidFromAndUntilSetMessagePayloadSchema().dump(self)


class StandalonePriceValidFromSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Valid From](ctp:api:type:StandalonePriceSetValidFromAction) update action."""

    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validFrom` after the [Set Valid From](ctp:api:type:StandalonePriceSetValidFromAction) update action.
    valid_from: typing.Optional[datetime.datetime]
    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validFrom` before the [Set Valid From](ctp:api:type:StandalonePriceSetValidFromAction) update action.
    previous_valid_from: typing.Optional[datetime.datetime]

    def __init__(
        self,
        *,
        valid_from: typing.Optional[datetime.datetime] = None,
        previous_valid_from: typing.Optional[datetime.datetime] = None
    ):
        self.valid_from = valid_from
        self.previous_valid_from = previous_valid_from

        super().__init__(type="StandalonePriceValidFromSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceValidFromSetMessagePayload":
        from ._schemas.message import StandalonePriceValidFromSetMessagePayloadSchema

        return StandalonePriceValidFromSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceValidFromSetMessagePayloadSchema

        return StandalonePriceValidFromSetMessagePayloadSchema().dump(self)


class StandalonePriceValidUntilSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Valid Until](ctp:api:type:StandalonePriceSetValidUntilAction) update action."""

    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validUntil` after the [Set Valid Until](ctp:api:type:StandalonePriceSetValidUntilAction) update action.
    valid_until: typing.Optional[datetime.datetime]
    #: Value of [StandalonePrice](ctp:api:type:StandalonePrice) `validUntil` before the [Set Valid Until](ctp:api:type:StandalonePriceSetValidUntilAction) update action.
    previous_valid_until: typing.Optional[datetime.datetime]

    def __init__(
        self,
        *,
        valid_until: typing.Optional[datetime.datetime] = None,
        previous_valid_until: typing.Optional[datetime.datetime] = None
    ):
        self.valid_until = valid_until
        self.previous_valid_until = previous_valid_until

        super().__init__(type="StandalonePriceValidUntilSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceValidUntilSetMessagePayload":
        from ._schemas.message import StandalonePriceValidUntilSetMessagePayloadSchema

        return StandalonePriceValidUntilSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceValidUntilSetMessagePayloadSchema

        return StandalonePriceValidUntilSetMessagePayloadSchema().dump(self)


class StandalonePriceValueChangedMessagePayload(MessagePayload):
    """Generated after a successful [Change Value](ctp:api:type:StandalonePriceChangeValueAction) update action."""

    #: The new value of the updated [StandalonePrice](ctp:api:type:StandalonePrice).
    value: "Money"
    #: Whether the new value was applied to the current or the staged representation of the StandalonePrice. Staged changes are stored on the [StagedStandalonePrice](ctp:api:type:StagedStandalonePrice).
    staged: bool
    #: The old value of the updated [StandalonePrice](ctp:api:type:StandalonePrice).
    #: Present on Messages created after 3 February 2023. Optional for backwards compatibility.
    old_value: typing.Optional["Money"]

    def __init__(
        self,
        *,
        value: "Money",
        staged: bool,
        old_value: typing.Optional["Money"] = None
    ):
        self.value = value
        self.staged = staged
        self.old_value = old_value

        super().__init__(type="StandalonePriceValueChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StandalonePriceValueChangedMessagePayload":
        from ._schemas.message import StandalonePriceValueChangedMessagePayloadSchema

        return StandalonePriceValueChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StandalonePriceValueChangedMessagePayloadSchema

        return StandalonePriceValueChangedMessagePayloadSchema().dump(self)


class StoreCountriesChangedMessagePayload(MessagePayload):
    """Generated after a successful [Add Country](ctp:api:type:StoreAddCountryAction),
    [Remove Country](ctp:api:type:StoreRemoveCountryAction), or
    [Set Countries](ctp:api:type:StoreSetCountriesAction) update action.

    """

    #: [Countries](ctp:api:type:StoreCountry) added to the [Store](ctp:api:type:Store).
    added_countries: typing.Optional[typing.List["StoreCountry"]]
    #: [Countries](ctp:api:type:StoreCountry) removed from the [Store](ctp:api:type:Store).
    removed_countries: typing.Optional[typing.List["StoreCountry"]]

    def __init__(
        self,
        *,
        added_countries: typing.Optional[typing.List["StoreCountry"]] = None,
        removed_countries: typing.Optional[typing.List["StoreCountry"]] = None
    ):
        self.added_countries = added_countries
        self.removed_countries = removed_countries

        super().__init__(type="StoreCountriesChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreCountriesChangedMessagePayload":
        from ._schemas.message import StoreCountriesChangedMessagePayloadSchema

        return StoreCountriesChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreCountriesChangedMessagePayloadSchema

        return StoreCountriesChangedMessagePayloadSchema().dump(self)


class StoreCreatedMessagePayload(MessagePayload):
    """Generated after a successful [Create Store](/../api/projects/stores#create-store) request."""

    #: The `name` of the [Store](ctp:api:type:Store) that was created.
    name: typing.Optional["LocalizedString"]
    #: Languages of the [Store](ctp:api:type:Store) that was created. Languages are represented as [IETF language tags](https://en.wikipedia.org/wiki/IETF_language_tag).
    languages: typing.Optional[typing.List["str"]]
    #: [Countries](ctp:api:type:StoreCountry) of the [Store](ctp:api:type:Store) that was created.
    countries: typing.Optional[typing.List["StoreCountry"]]
    #: [Distribution Channels](ctp:api:type:ChannelRoleEnum) of the [Store](ctp:api:type:Store) that was created.
    distribution_channels: typing.List["ChannelReference"]
    #: [Supply Channels](ctp:api:type:ChannelRoleEnum) of the [Store](ctp:api:type:Store) that was created.
    supply_channels: typing.List["ChannelReference"]
    #: [ProductSelectionSettings](ctp:api:type:ProductSelectionSetting) of the [Store](ctp:api:type:Store) that was created.
    product_selections: typing.List["ProductSelectionSetting"]
    #: [Custom Fields](ctp:api:type:CustomFields) on the [Store](ctp:api:type:Store) that was created.
    custom: typing.Optional["CustomFields"]

    def __init__(
        self,
        *,
        name: typing.Optional["LocalizedString"] = None,
        languages: typing.Optional[typing.List["str"]] = None,
        countries: typing.Optional[typing.List["StoreCountry"]] = None,
        distribution_channels: typing.List["ChannelReference"],
        supply_channels: typing.List["ChannelReference"],
        product_selections: typing.List["ProductSelectionSetting"],
        custom: typing.Optional["CustomFields"] = None
    ):
        self.name = name
        self.languages = languages
        self.countries = countries
        self.distribution_channels = distribution_channels
        self.supply_channels = supply_channels
        self.product_selections = product_selections
        self.custom = custom

        super().__init__(type="StoreCreated")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreCreatedMessagePayload":
        from ._schemas.message import StoreCreatedMessagePayloadSchema

        return StoreCreatedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreCreatedMessagePayloadSchema

        return StoreCreatedMessagePayloadSchema().dump(self)


class StoreDeletedMessagePayload(MessagePayload):
    """Generated after a successful [Delete Store](/../api/projects/quote-requests#delete-quoterequest) request."""

    def __init__(self):
        super().__init__(type="StoreDeleted")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreDeletedMessagePayload":
        from ._schemas.message import StoreDeletedMessagePayloadSchema

        return StoreDeletedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreDeletedMessagePayloadSchema

        return StoreDeletedMessagePayloadSchema().dump(self)


class StoreDistributionChannelsChangedMessagePayload(MessagePayload):
    """Generated after a successful [Add Distribution Channel](ctp:api:type:StoreAddDistributionChannelAction),
    [Remove Distribution Channel](ctp:api:type:StoreRemoveDistributionChannelAction), or
    [Set Distribution Channels](ctp:api:type:StoreSetDistributionChannelsAction) update action.

    """

    #: Product distribution Channels that have been added to the [Store](ctp:api:type:Store).
    added_distribution_channels: typing.Optional[typing.List["ChannelReference"]]
    #: Product distribution Channels that have been removed from the [Store](ctp:api:type:Store).
    removed_distribution_channels: typing.Optional[typing.List["ChannelReference"]]

    def __init__(
        self,
        *,
        added_distribution_channels: typing.Optional[
            typing.List["ChannelReference"]
        ] = None,
        removed_distribution_channels: typing.Optional[
            typing.List["ChannelReference"]
        ] = None
    ):
        self.added_distribution_channels = added_distribution_channels
        self.removed_distribution_channels = removed_distribution_channels

        super().__init__(type="StoreDistributionChannelsChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreDistributionChannelsChangedMessagePayload":
        from ._schemas.message import (
            StoreDistributionChannelsChangedMessagePayloadSchema,
        )

        return StoreDistributionChannelsChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import (
            StoreDistributionChannelsChangedMessagePayloadSchema,
        )

        return StoreDistributionChannelsChangedMessagePayloadSchema().dump(self)


class StoreLanguagesChangedMessagePayload(MessagePayload):
    """Generated after a successful [Set Languages](ctp:api:type:StoreSetLanguagesAction) update action."""

    #: [Locales](ctp:api:type:Locale) added to the [Store](ctp:api:type:Store) after the [Set Languages](ctp:api:type:StoreSetLanguagesAction) update action.
    added_languages: typing.Optional[typing.List["str"]]
    #: [Locales](ctp:api:type:Locale) removed from the [Store](ctp:api:type:Store) during the [Set Languages](ctp:api:type:StoreSetLanguagesAction) update action.
    removed_languages: typing.Optional[typing.List["str"]]

    def __init__(
        self,
        *,
        added_languages: typing.Optional[typing.List["str"]] = None,
        removed_languages: typing.Optional[typing.List["str"]] = None
    ):
        self.added_languages = added_languages
        self.removed_languages = removed_languages

        super().__init__(type="StoreLanguagesChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreLanguagesChangedMessagePayload":
        from ._schemas.message import StoreLanguagesChangedMessagePayloadSchema

        return StoreLanguagesChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreLanguagesChangedMessagePayloadSchema

        return StoreLanguagesChangedMessagePayloadSchema().dump(self)


class StoreNameSetMessagePayload(MessagePayload):
    """Generated after a successful [Set Name](ctp:api:type:StoreSetNameAction) update action."""

    #: Name of the [Store](ctp:api:type:Store) set during the [Set Name](ctp:api:type:StoreSetNameAction) update action.
    name: typing.Optional["LocalizedString"]
    #: Names set for the [Store](ctp:api:type:Store) in different locales.
    name_all_locales: typing.Optional[typing.List["LocalizedString"]]

    def __init__(
        self,
        *,
        name: typing.Optional["LocalizedString"] = None,
        name_all_locales: typing.Optional[typing.List["LocalizedString"]] = None
    ):
        self.name = name
        self.name_all_locales = name_all_locales

        super().__init__(type="StoreNameSet")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreNameSetMessagePayload":
        from ._schemas.message import StoreNameSetMessagePayloadSchema

        return StoreNameSetMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreNameSetMessagePayloadSchema

        return StoreNameSetMessagePayloadSchema().dump(self)


class StoreProductSelectionsChangedMessagePayload(MessagePayload):
    """Generated by a successful [Add Product Selection](ctp:api:type:StoreAddProductSelectionAction),
    [Remove Product Selection](ctp:api:type:StoreRemoveProductSelectionAction),
    [Set Product Selections](ctp:api:type:StoreSetProductSelectionsAction),
    or [Change Product Selections Active](ctp:api:type:StoreChangeProductSelectionAction) update action.

    """

    #: [ProductSelectionSettings](ctp:api:type:ProductSelectionSetting) that were added to the [Store](ctp:api:type:Store).
    added_product_selections: typing.Optional[typing.List["ProductSelectionSetting"]]
    #: [ProductSelectionSettings](ctp:api:type:ProductSelectionSetting) that were removed from the [Store](ctp:api:type:Store).
    removed_product_selections: typing.Optional[typing.List["ProductSelectionSetting"]]
    #: [ProductSelectionSettings](ctp:api:type:ProductSelectionSetting) that were updated in the [Store](ctp:api:type:Store).
    updated_product_selections: typing.Optional[typing.List["ProductSelectionSetting"]]

    def __init__(
        self,
        *,
        added_product_selections: typing.Optional[
            typing.List["ProductSelectionSetting"]
        ] = None,
        removed_product_selections: typing.Optional[
            typing.List["ProductSelectionSetting"]
        ] = None,
        updated_product_selections: typing.Optional[
            typing.List["ProductSelectionSetting"]
        ] = None
    ):
        self.added_product_selections = added_product_selections
        self.removed_product_selections = removed_product_selections
        self.updated_product_selections = updated_product_selections

        super().__init__(type="StoreProductSelectionsChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreProductSelectionsChangedMessagePayload":
        from ._schemas.message import StoreProductSelectionsChangedMessagePayloadSchema

        return StoreProductSelectionsChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreProductSelectionsChangedMessagePayloadSchema

        return StoreProductSelectionsChangedMessagePayloadSchema().dump(self)


class StoreSupplyChannelsChangedMessagePayload(MessagePayload):
    """Generated after a successful [Add Supply Channel](ctp:api:type:StoreAddSupplyChannelAction),
    [Remove Supply Channel](ctp:api:type:StoreRemoveSupplyChannelAction), or
    [Set Supply Channels](ctp:api:type:StoreSetSupplyChannelsAction) update action.

    """

    #: Inventory supply Channels that have been added to the [Store](ctp:api:type:Store).
    added_supply_channels: typing.Optional[typing.List["ChannelReference"]]
    #: Inventory supply Channels that have been removed from the [Store](ctp:api:type:Store).
    removed_supply_channels: typing.Optional[typing.List["ChannelReference"]]

    def __init__(
        self,
        *,
        added_supply_channels: typing.Optional[typing.List["ChannelReference"]] = None,
        removed_supply_channels: typing.Optional[typing.List["ChannelReference"]] = None
    ):
        self.added_supply_channels = added_supply_channels
        self.removed_supply_channels = removed_supply_channels

        super().__init__(type="StoreSupplyChannelsChanged")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "StoreSupplyChannelsChangedMessagePayload":
        from ._schemas.message import StoreSupplyChannelsChangedMessagePayloadSchema

        return StoreSupplyChannelsChangedMessagePayloadSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.message import StoreSupplyChannelsChangedMessagePayloadSchema

        return StoreSupplyChannelsChangedMessagePayloadSchema().dump(self)
