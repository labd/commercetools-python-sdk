# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType
from .common import BaseResource, Reference, ReferenceTypeId, ResourceIdentifier

if typing.TYPE_CHECKING:
    from .common import (
        CentPrecisionMoney,
        CreatedBy,
        LastModifiedBy,
        LocalizedString,
        Money,
        ReferenceTypeId,
        TypedMoney,
    )
    from .customer import CustomerReference, CustomerResourceIdentifier
    from .state import StateReference, StateResourceIdentifier
    from .type import (
        CustomFields,
        CustomFieldsDraft,
        FieldContainer,
        TypeResourceIdentifier,
    )

__all__ = [
    "Payment",
    "PaymentAddInterfaceInteractionAction",
    "PaymentAddTransactionAction",
    "PaymentChangeAmountPlannedAction",
    "PaymentChangeTransactionInteractionIdAction",
    "PaymentChangeTransactionStateAction",
    "PaymentChangeTransactionTimestampAction",
    "PaymentDraft",
    "PaymentMethodInfo",
    "PaymentPagedQueryResponse",
    "PaymentReference",
    "PaymentResourceIdentifier",
    "PaymentSetAmountPaidAction",
    "PaymentSetAmountRefundedAction",
    "PaymentSetAnonymousIdAction",
    "PaymentSetAuthorizationAction",
    "PaymentSetCustomFieldAction",
    "PaymentSetCustomTypeAction",
    "PaymentSetCustomerAction",
    "PaymentSetExternalIdAction",
    "PaymentSetInterfaceIdAction",
    "PaymentSetKeyAction",
    "PaymentSetMethodInfoInterfaceAction",
    "PaymentSetMethodInfoMethodAction",
    "PaymentSetMethodInfoNameAction",
    "PaymentSetStatusInterfaceCodeAction",
    "PaymentSetStatusInterfaceTextAction",
    "PaymentSetTransactionCustomFieldAction",
    "PaymentSetTransactionCustomTypeAction",
    "PaymentStatus",
    "PaymentStatusDraft",
    "PaymentTransitionStateAction",
    "PaymentUpdate",
    "PaymentUpdateAction",
    "Transaction",
    "TransactionDraft",
    "TransactionState",
    "TransactionType",
]


class Payment(BaseResource):
    #: Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
    last_modified_by: typing.Optional["LastModifiedBy"]
    #: Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
    created_by: typing.Optional["CreatedBy"]
    #: Reference to a [Customer](ctp:api:type:Customer) associated with the Payment.
    customer: typing.Optional["CustomerReference"]
    #: [Anonymous session](ctp:api:type:AnonymousSession) associated with the Payment.
    anonymous_id: typing.Optional[str]
    #: Additional identifier for external systems like Customer Relationship Management (CRM) or Enterprise Resource Planning (ERP).
    external_id: typing.Optional[str]
    #: Identifier used by the payment service that processes the Payment (for example, a PSP).
    #: The combination of `interfaceId` and the `paymentInterface` field on [PaymentMethodInfo](ctp:api:type:PaymentMethodInfo) must be unique.
    interface_id: typing.Optional[str]
    #: Money value the Payment intends to receive from the customer.
    #: The value typically matches the [Cart](ctp:api:type:Cart) or [Order](ctp:api:type:Order) gross total.
    amount_planned: "CentPrecisionMoney"
    #: Deprecated because its value can be calculated from the total amounts saved in the [Transactions](ctp:api:type:Transaction).
    amount_authorized: typing.Optional["TypedMoney"]
    #: Deprecated because this field is of little practical value, as it is either not reliably known, or the authorization time is fixed for a PSP.
    authorized_until: typing.Optional[str]
    #: Deprecated because its value can be calculated from the total amounts saved in the [Transactions](ctp:api:type:Transaction).
    amount_paid: typing.Optional["TypedMoney"]
    #: Deprecated because its value can be calculated from the total amounts saved in the [Transactions](ctp:api:type:Transaction).
    amount_refunded: typing.Optional["TypedMoney"]
    #: Information regarding the payment interface (for example, a PSP), and the specific payment method used.
    payment_method_info: "PaymentMethodInfo"
    #: Current status of the Payment.
    payment_status: "PaymentStatus"
    #: Financial transactions of the Payment. Each Transaction has a [TransactionType](ctp:api:type:TransactionType) and a [TransactionState](ctp:api:type:TransactionState).
    transactions: typing.List["Transaction"]
    #: Represents information exchange with the payment service, for example, a PSP. An interaction may be a request sent, or a response or notification received from the payment service.
    interface_interactions: typing.List["CustomFields"]
    #: Custom Fields for the Payment.
    custom: typing.Optional["CustomFields"]
    #: User-defined unique identifier of the Payment.
    key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        customer: typing.Optional["CustomerReference"] = None,
        anonymous_id: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        interface_id: typing.Optional[str] = None,
        amount_planned: "CentPrecisionMoney",
        amount_authorized: typing.Optional["TypedMoney"] = None,
        authorized_until: typing.Optional[str] = None,
        amount_paid: typing.Optional["TypedMoney"] = None,
        amount_refunded: typing.Optional["TypedMoney"] = None,
        payment_method_info: "PaymentMethodInfo",
        payment_status: "PaymentStatus",
        transactions: typing.List["Transaction"],
        interface_interactions: typing.List["CustomFields"],
        custom: typing.Optional["CustomFields"] = None,
        key: typing.Optional[str] = None
    ):
        self.last_modified_by = last_modified_by
        self.created_by = created_by
        self.customer = customer
        self.anonymous_id = anonymous_id
        self.external_id = external_id
        self.interface_id = interface_id
        self.amount_planned = amount_planned
        self.amount_authorized = amount_authorized
        self.authorized_until = authorized_until
        self.amount_paid = amount_paid
        self.amount_refunded = amount_refunded
        self.payment_method_info = payment_method_info
        self.payment_status = payment_status
        self.transactions = transactions
        self.interface_interactions = interface_interactions
        self.custom = custom
        self.key = key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "Payment":
        from ._schemas.payment import PaymentSchema

        return PaymentSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSchema

        return PaymentSchema().dump(self)


class PaymentDraft(_BaseType):
    #: Reference to a [Customer](ctp:api:type:Customer) associated with the Payment.
    customer: typing.Optional["CustomerResourceIdentifier"]
    #: [Anonymous session](ctp:api:type:AnonymousSession) associated with the Payment.
    anonymous_id: typing.Optional[str]
    #: Additional identifier for external systems like Customer Relationship Management (CRM) or Enterprise Resource Planning (ERP).
    external_id: typing.Optional[str]
    #: Identifier used by the payment service that processes the Payment (for example, a PSP).
    #: The combination of `interfaceId` and the `paymentInterface` field on [PaymentMethodInfo](ctp:api:type:PaymentMethodInfo) must be unique.
    #: Once set, it cannot be changed.
    interface_id: typing.Optional[str]
    #: Money value the Payment intends to receive from the customer.
    #: The value typically matches the [Cart](ctp:api:type:Cart) or [Order](ctp:api:type:Order) gross total.
    amount_planned: "Money"
    #: Deprecated because the value can be calculated from the total amounts saved in the [Transactions](ctp:api:type:Transaction).
    amount_authorized: typing.Optional["Money"]
    #: Deprecated because this field is of little practical value, as it is either not reliably known, or the authorization time is fixed for a PSP.
    authorized_until: typing.Optional[str]
    #: Deprecated because the value can be calculated from the total amounts saved in the [Transactions](ctp:api:type:Transaction).
    amount_paid: typing.Optional["Money"]
    #: Deprecated because the value can be calculated from the total amounts saved in the [Transactions](ctp:api:type:Transaction).
    amount_refunded: typing.Optional["Money"]
    #: Information regarding the payment interface (for example, a PSP), and the specific payment method used.
    payment_method_info: typing.Optional["PaymentMethodInfo"]
    #: Current status of the Payment.
    payment_status: typing.Optional["PaymentStatusDraft"]
    #: Financial transactions of the Payment. Each Transaction has a [TransactionType](ctp:api:type:TransactionType) and a [TransactionState](ctp:api:type:TransactionState).
    transactions: typing.Optional[typing.List["TransactionDraft"]]
    #: Represents information exchange with the payment service, for example, a PSP. An interaction may be a request sent, or a response or notification received from the payment service.
    interface_interactions: typing.Optional[typing.List["CustomFieldsDraft"]]
    #: Custom Fields for the Payment.
    custom: typing.Optional["CustomFieldsDraft"]
    #: User-defined unique identifier for the Payment.
    key: typing.Optional[str]

    def __init__(
        self,
        *,
        customer: typing.Optional["CustomerResourceIdentifier"] = None,
        anonymous_id: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        interface_id: typing.Optional[str] = None,
        amount_planned: "Money",
        amount_authorized: typing.Optional["Money"] = None,
        authorized_until: typing.Optional[str] = None,
        amount_paid: typing.Optional["Money"] = None,
        amount_refunded: typing.Optional["Money"] = None,
        payment_method_info: typing.Optional["PaymentMethodInfo"] = None,
        payment_status: typing.Optional["PaymentStatusDraft"] = None,
        transactions: typing.Optional[typing.List["TransactionDraft"]] = None,
        interface_interactions: typing.Optional[
            typing.List["CustomFieldsDraft"]
        ] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None,
        key: typing.Optional[str] = None
    ):
        self.customer = customer
        self.anonymous_id = anonymous_id
        self.external_id = external_id
        self.interface_id = interface_id
        self.amount_planned = amount_planned
        self.amount_authorized = amount_authorized
        self.authorized_until = authorized_until
        self.amount_paid = amount_paid
        self.amount_refunded = amount_refunded
        self.payment_method_info = payment_method_info
        self.payment_status = payment_status
        self.transactions = transactions
        self.interface_interactions = interface_interactions
        self.custom = custom
        self.key = key

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "PaymentDraft":
        from ._schemas.payment import PaymentDraftSchema

        return PaymentDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentDraftSchema

        return PaymentDraftSchema().dump(self)


class PaymentMethodInfo(_BaseType):
    #: Payment service that processes the Payment (for example, a PSP).
    #: Once set, it cannot be changed.
    #: The combination of `paymentInterface` and the `interfaceId` of a [Payment](ctp:api:type:Payment) must be unique.
    payment_interface: typing.Optional[str]
    #: Payment method used, for example, credit card, or cash advance.
    method: typing.Optional[str]
    #: Localizable name of the payment method.
    name: typing.Optional["LocalizedString"]

    def __init__(
        self,
        *,
        payment_interface: typing.Optional[str] = None,
        method: typing.Optional[str] = None,
        name: typing.Optional["LocalizedString"] = None
    ):
        self.payment_interface = payment_interface
        self.method = method
        self.name = name

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "PaymentMethodInfo":
        from ._schemas.payment import PaymentMethodInfoSchema

        return PaymentMethodInfoSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentMethodInfoSchema

        return PaymentMethodInfoSchema().dump(self)


class PaymentPagedQueryResponse(_BaseType):
    """[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [Payment](ctp:api:type:Payment)."""

    #: Number of [results requested](/../api/general-concepts#limit).
    limit: int
    #: Actual number of results returned.
    count: int
    #: Total number of results matching the query.
    #: This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
    #: This field is returned by default.
    #: For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
    #: When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
    total: typing.Optional[int]
    #: Number of [elements skipped](/../api/general-concepts#offset).
    offset: int
    #: [Payments](ctp:api:type:Payment) matching the query.
    results: typing.List["Payment"]

    def __init__(
        self,
        *,
        limit: int,
        count: int,
        total: typing.Optional[int] = None,
        offset: int,
        results: typing.List["Payment"]
    ):
        self.limit = limit
        self.count = count
        self.total = total
        self.offset = offset
        self.results = results

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentPagedQueryResponse":
        from ._schemas.payment import PaymentPagedQueryResponseSchema

        return PaymentPagedQueryResponseSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentPagedQueryResponseSchema

        return PaymentPagedQueryResponseSchema().dump(self)


class PaymentReference(Reference):
    """[Reference](ctp:api:type:Reference) to a [Payment](ctp:api:type:Payment)."""

    #: Contains the representation of the expanded Payment. Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for Payments.
    obj: typing.Optional["Payment"]

    def __init__(self, *, id: str, obj: typing.Optional["Payment"] = None):
        self.obj = obj

        super().__init__(id=id, type_id=ReferenceTypeId.PAYMENT)

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "PaymentReference":
        from ._schemas.payment import PaymentReferenceSchema

        return PaymentReferenceSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentReferenceSchema

        return PaymentReferenceSchema().dump(self)


class PaymentResourceIdentifier(ResourceIdentifier):
    """[ResourceIdentifier](ctp:api:type:ResourceIdentifier) of a [Payment](ctp:api:type:Payment)."""

    def __init__(
        self, *, id: typing.Optional[str] = None, key: typing.Optional[str] = None
    ):
        super().__init__(id=id, key=key, type_id=ReferenceTypeId.PAYMENT)

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentResourceIdentifier":
        from ._schemas.payment import PaymentResourceIdentifierSchema

        return PaymentResourceIdentifierSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentResourceIdentifierSchema

        return PaymentResourceIdentifierSchema().dump(self)


class PaymentStatus(_BaseType):
    #: External reference that identifies the current status of the Payment.
    interface_code: typing.Optional[str]
    #: Text describing the current status of the Payment.
    interface_text: typing.Optional[str]
    #: [Reference](ctp:api:type:Reference) to a [State](ctp:api:type:State).
    state: typing.Optional["StateReference"]

    def __init__(
        self,
        *,
        interface_code: typing.Optional[str] = None,
        interface_text: typing.Optional[str] = None,
        state: typing.Optional["StateReference"] = None
    ):
        self.interface_code = interface_code
        self.interface_text = interface_text
        self.state = state

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "PaymentStatus":
        from ._schemas.payment import PaymentStatusSchema

        return PaymentStatusSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentStatusSchema

        return PaymentStatusSchema().dump(self)


class PaymentStatusDraft(_BaseType):
    #: External reference that identifies the current status of the Payment.
    interface_code: typing.Optional[str]
    #: Text describing the current status of the Payment.
    interface_text: typing.Optional[str]
    #: [ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [State](ctp:api:type:State).
    state: typing.Optional["StateResourceIdentifier"]

    def __init__(
        self,
        *,
        interface_code: typing.Optional[str] = None,
        interface_text: typing.Optional[str] = None,
        state: typing.Optional["StateResourceIdentifier"] = None
    ):
        self.interface_code = interface_code
        self.interface_text = interface_text
        self.state = state

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "PaymentStatusDraft":
        from ._schemas.payment import PaymentStatusDraftSchema

        return PaymentStatusDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentStatusDraftSchema

        return PaymentStatusDraftSchema().dump(self)


class PaymentUpdate(_BaseType):
    #: Expected version of the Payment on which the changes should be applied. If the expected version does not match the actual version, a [409 Conflict](/../api/errors#409-conflict) error will be returned.
    version: int
    #: Update actions to be performed on the Payment.
    actions: typing.List["PaymentUpdateAction"]

    def __init__(self, *, version: int, actions: typing.List["PaymentUpdateAction"]):
        self.version = version
        self.actions = actions

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "PaymentUpdate":
        from ._schemas.payment import PaymentUpdateSchema

        return PaymentUpdateSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentUpdateSchema

        return PaymentUpdateSchema().dump(self)


class PaymentUpdateAction(_BaseType):
    action: str

    def __init__(self, *, action: str):
        self.action = action

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "PaymentUpdateAction":
        if data["action"] == "addInterfaceInteraction":
            from ._schemas.payment import PaymentAddInterfaceInteractionActionSchema

            return PaymentAddInterfaceInteractionActionSchema().load(data)
        if data["action"] == "addTransaction":
            from ._schemas.payment import PaymentAddTransactionActionSchema

            return PaymentAddTransactionActionSchema().load(data)
        if data["action"] == "changeAmountPlanned":
            from ._schemas.payment import PaymentChangeAmountPlannedActionSchema

            return PaymentChangeAmountPlannedActionSchema().load(data)
        if data["action"] == "changeTransactionInteractionId":
            from ._schemas.payment import (
                PaymentChangeTransactionInteractionIdActionSchema,
            )

            return PaymentChangeTransactionInteractionIdActionSchema().load(data)
        if data["action"] == "changeTransactionState":
            from ._schemas.payment import PaymentChangeTransactionStateActionSchema

            return PaymentChangeTransactionStateActionSchema().load(data)
        if data["action"] == "changeTransactionTimestamp":
            from ._schemas.payment import PaymentChangeTransactionTimestampActionSchema

            return PaymentChangeTransactionTimestampActionSchema().load(data)
        if data["action"] == "setAmountPaid":
            from ._schemas.payment import PaymentSetAmountPaidActionSchema

            return PaymentSetAmountPaidActionSchema().load(data)
        if data["action"] == "setAmountRefunded":
            from ._schemas.payment import PaymentSetAmountRefundedActionSchema

            return PaymentSetAmountRefundedActionSchema().load(data)
        if data["action"] == "setAnonymousId":
            from ._schemas.payment import PaymentSetAnonymousIdActionSchema

            return PaymentSetAnonymousIdActionSchema().load(data)
        if data["action"] == "setAuthorization":
            from ._schemas.payment import PaymentSetAuthorizationActionSchema

            return PaymentSetAuthorizationActionSchema().load(data)
        if data["action"] == "setCustomField":
            from ._schemas.payment import PaymentSetCustomFieldActionSchema

            return PaymentSetCustomFieldActionSchema().load(data)
        if data["action"] == "setCustomType":
            from ._schemas.payment import PaymentSetCustomTypeActionSchema

            return PaymentSetCustomTypeActionSchema().load(data)
        if data["action"] == "setCustomer":
            from ._schemas.payment import PaymentSetCustomerActionSchema

            return PaymentSetCustomerActionSchema().load(data)
        if data["action"] == "setExternalId":
            from ._schemas.payment import PaymentSetExternalIdActionSchema

            return PaymentSetExternalIdActionSchema().load(data)
        if data["action"] == "setInterfaceId":
            from ._schemas.payment import PaymentSetInterfaceIdActionSchema

            return PaymentSetInterfaceIdActionSchema().load(data)
        if data["action"] == "setKey":
            from ._schemas.payment import PaymentSetKeyActionSchema

            return PaymentSetKeyActionSchema().load(data)
        if data["action"] == "setMethodInfoInterface":
            from ._schemas.payment import PaymentSetMethodInfoInterfaceActionSchema

            return PaymentSetMethodInfoInterfaceActionSchema().load(data)
        if data["action"] == "setMethodInfoMethod":
            from ._schemas.payment import PaymentSetMethodInfoMethodActionSchema

            return PaymentSetMethodInfoMethodActionSchema().load(data)
        if data["action"] == "setMethodInfoName":
            from ._schemas.payment import PaymentSetMethodInfoNameActionSchema

            return PaymentSetMethodInfoNameActionSchema().load(data)
        if data["action"] == "setStatusInterfaceCode":
            from ._schemas.payment import PaymentSetStatusInterfaceCodeActionSchema

            return PaymentSetStatusInterfaceCodeActionSchema().load(data)
        if data["action"] == "setStatusInterfaceText":
            from ._schemas.payment import PaymentSetStatusInterfaceTextActionSchema

            return PaymentSetStatusInterfaceTextActionSchema().load(data)
        if data["action"] == "setTransactionCustomField":
            from ._schemas.payment import PaymentSetTransactionCustomFieldActionSchema

            return PaymentSetTransactionCustomFieldActionSchema().load(data)
        if data["action"] == "setTransactionCustomType":
            from ._schemas.payment import PaymentSetTransactionCustomTypeActionSchema

            return PaymentSetTransactionCustomTypeActionSchema().load(data)
        if data["action"] == "transitionState":
            from ._schemas.payment import PaymentTransitionStateActionSchema

            return PaymentTransitionStateActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentUpdateActionSchema

        return PaymentUpdateActionSchema().dump(self)


class Transaction(_BaseType):
    """Represents a financial transaction typically created as a result of a notification from the payment service."""

    #: Unique identifier of the Transaction.
    id: str
    #: Date and time (UTC) the Transaction took place.
    timestamp: typing.Optional[datetime.datetime]
    #: Type of the Transaction. For example, `Authorization`.
    type: "TransactionType"
    #: Money value of the Transaction.
    amount: "CentPrecisionMoney"
    #: Identifier used by the interface that manages the Transaction (usually the PSP).
    #: If a matching interaction was logged in the `interfaceInteractions` array, the corresponding interaction can be found with this ID.
    interaction_id: typing.Optional[str]
    #: State of the Transaction.
    state: "TransactionState"
    #: Custom Fields defined for the Transaction.
    custom: typing.Optional["CustomFields"]

    def __init__(
        self,
        *,
        id: str,
        timestamp: typing.Optional[datetime.datetime] = None,
        type: "TransactionType",
        amount: "CentPrecisionMoney",
        interaction_id: typing.Optional[str] = None,
        state: "TransactionState",
        custom: typing.Optional["CustomFields"] = None
    ):
        self.id = id
        self.timestamp = timestamp
        self.type = type
        self.amount = amount
        self.interaction_id = interaction_id
        self.state = state
        self.custom = custom

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "Transaction":
        from ._schemas.payment import TransactionSchema

        return TransactionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import TransactionSchema

        return TransactionSchema().dump(self)


class TransactionDraft(_BaseType):
    #: Date and time (UTC) the Transaction took place.
    timestamp: typing.Optional[datetime.datetime]
    #: Type of the Transaction.
    type: "TransactionType"
    #: Money value for the Transaction.
    amount: "Money"
    #: Identifier used by the payment service that manages the Transaction.
    #: Can be used to correlate the Transaction to an interface interaction.
    interaction_id: typing.Optional[str]
    #: State of the Transaction.
    state: typing.Optional["TransactionState"]
    #: Custom Fields of the Transaction.
    custom: typing.Optional["CustomFieldsDraft"]

    def __init__(
        self,
        *,
        timestamp: typing.Optional[datetime.datetime] = None,
        type: "TransactionType",
        amount: "Money",
        interaction_id: typing.Optional[str] = None,
        state: typing.Optional["TransactionState"] = None,
        custom: typing.Optional["CustomFieldsDraft"] = None
    ):
        self.timestamp = timestamp
        self.type = type
        self.amount = amount
        self.interaction_id = interaction_id
        self.state = state
        self.custom = custom

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "TransactionDraft":
        from ._schemas.payment import TransactionDraftSchema

        return TransactionDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import TransactionDraftSchema

        return TransactionDraftSchema().dump(self)


class TransactionState(enum.Enum):
    """Transactions can be in one of the following States:"""

    INITIAL = "Initial"
    PENDING = "Pending"
    SUCCESS = "Success"
    FAILURE = "Failure"


class TransactionType(enum.Enum):
    AUTHORIZATION = "Authorization"
    CANCEL_AUTHORIZATION = "CancelAuthorization"
    CHARGE = "Charge"
    REFUND = "Refund"
    CHARGEBACK = "Chargeback"


class PaymentAddInterfaceInteractionAction(PaymentUpdateAction):
    """Adding a Payment interaction generates the [PaymentInteractionAdded](ctp:api:type:PaymentInteractionAddedMessage) Message."""

    #: [ResourceIdentifier](ctp:api:type:ResourceIdentifier) of a [Type](ctp:api:type:Type).
    type: "TypeResourceIdentifier"
    #: [Custom Fields](/../api/projects/custom-fields) as per [FieldDefinitions](ctp:api:type:FieldDefinition) of the [Type](ctp:api:type:Type).
    fields: typing.Optional["FieldContainer"]

    def __init__(
        self,
        *,
        type: "TypeResourceIdentifier",
        fields: typing.Optional["FieldContainer"] = None
    ):
        self.type = type
        self.fields = fields

        super().__init__(action="addInterfaceInteraction")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentAddInterfaceInteractionAction":
        from ._schemas.payment import PaymentAddInterfaceInteractionActionSchema

        return PaymentAddInterfaceInteractionActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentAddInterfaceInteractionActionSchema

        return PaymentAddInterfaceInteractionActionSchema().dump(self)


class PaymentAddTransactionAction(PaymentUpdateAction):
    """Adding a Transaction to a Payment generates the [PaymentTransactionAdded](ctp:api:type:PaymentTransactionAddedMessage) Message."""

    #: Value to append to the `transactions` array.
    transaction: "TransactionDraft"

    def __init__(self, *, transaction: "TransactionDraft"):
        self.transaction = transaction

        super().__init__(action="addTransaction")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentAddTransactionAction":
        from ._schemas.payment import PaymentAddTransactionActionSchema

        return PaymentAddTransactionActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentAddTransactionActionSchema

        return PaymentAddTransactionActionSchema().dump(self)


class PaymentChangeAmountPlannedAction(PaymentUpdateAction):
    """Can be used to update the Payment if a customer changes the [Cart](ctp:api:type:Cart), or adds or removes a [CartDiscount](ctp:api:type:CartDiscount) during checkout."""

    #: New value to set.
    amount: "Money"

    def __init__(self, *, amount: "Money"):
        self.amount = amount

        super().__init__(action="changeAmountPlanned")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentChangeAmountPlannedAction":
        from ._schemas.payment import PaymentChangeAmountPlannedActionSchema

        return PaymentChangeAmountPlannedActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentChangeAmountPlannedActionSchema

        return PaymentChangeAmountPlannedActionSchema().dump(self)


class PaymentChangeTransactionInteractionIdAction(PaymentUpdateAction):
    #: Unique identifier of the [Transaction](ctp:api:type:Transaction).
    transaction_id: str
    #: New value to set.
    interaction_id: str

    def __init__(self, *, transaction_id: str, interaction_id: str):
        self.transaction_id = transaction_id
        self.interaction_id = interaction_id

        super().__init__(action="changeTransactionInteractionId")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentChangeTransactionInteractionIdAction":
        from ._schemas.payment import PaymentChangeTransactionInteractionIdActionSchema

        return PaymentChangeTransactionInteractionIdActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentChangeTransactionInteractionIdActionSchema

        return PaymentChangeTransactionInteractionIdActionSchema().dump(self)


class PaymentChangeTransactionStateAction(PaymentUpdateAction):
    """Changing the [TransactionState](ctp:api:type:TransactionState) generates the [PaymentTransactionStateChanged](ctp:api:type:PaymentTransactionStateChangedMessage) Message."""

    #: Unique identifier of the [Transaction](ctp:api:type:Transaction).
    transaction_id: str
    #: New TransactionState.
    state: "TransactionState"

    def __init__(self, *, transaction_id: str, state: "TransactionState"):
        self.transaction_id = transaction_id
        self.state = state

        super().__init__(action="changeTransactionState")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentChangeTransactionStateAction":
        from ._schemas.payment import PaymentChangeTransactionStateActionSchema

        return PaymentChangeTransactionStateActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentChangeTransactionStateActionSchema

        return PaymentChangeTransactionStateActionSchema().dump(self)


class PaymentChangeTransactionTimestampAction(PaymentUpdateAction):
    #: Unique identifier of the [Transaction](ctp:api:type:Transaction).
    transaction_id: str
    #: Timestamp of the Transaction as reported by the payment service.
    timestamp: datetime.datetime

    def __init__(self, *, transaction_id: str, timestamp: datetime.datetime):
        self.transaction_id = transaction_id
        self.timestamp = timestamp

        super().__init__(action="changeTransactionTimestamp")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentChangeTransactionTimestampAction":
        from ._schemas.payment import PaymentChangeTransactionTimestampActionSchema

        return PaymentChangeTransactionTimestampActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentChangeTransactionTimestampActionSchema

        return PaymentChangeTransactionTimestampActionSchema().dump(self)


class PaymentSetAmountPaidAction(PaymentUpdateAction):
    #: Draft type that stores amounts only in cent precision for the specified currency.
    amount: typing.Optional["Money"]

    def __init__(self, *, amount: typing.Optional["Money"] = None):
        self.amount = amount

        super().__init__(action="setAmountPaid")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetAmountPaidAction":
        from ._schemas.payment import PaymentSetAmountPaidActionSchema

        return PaymentSetAmountPaidActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetAmountPaidActionSchema

        return PaymentSetAmountPaidActionSchema().dump(self)


class PaymentSetAmountRefundedAction(PaymentUpdateAction):
    #: Draft type that stores amounts only in cent precision for the specified currency.
    amount: typing.Optional["Money"]

    def __init__(self, *, amount: typing.Optional["Money"] = None):
        self.amount = amount

        super().__init__(action="setAmountRefunded")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetAmountRefundedAction":
        from ._schemas.payment import PaymentSetAmountRefundedActionSchema

        return PaymentSetAmountRefundedActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetAmountRefundedActionSchema

        return PaymentSetAmountRefundedActionSchema().dump(self)


class PaymentSetAnonymousIdAction(PaymentUpdateAction):
    #: Value to set.
    #: If empty, any existing value will be removed.
    anonymous_id: typing.Optional[str]

    def __init__(self, *, anonymous_id: typing.Optional[str] = None):
        self.anonymous_id = anonymous_id

        super().__init__(action="setAnonymousId")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetAnonymousIdAction":
        from ._schemas.payment import PaymentSetAnonymousIdActionSchema

        return PaymentSetAnonymousIdActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetAnonymousIdActionSchema

        return PaymentSetAnonymousIdActionSchema().dump(self)


class PaymentSetAuthorizationAction(PaymentUpdateAction):
    #: Draft type that stores amounts only in cent precision for the specified currency.
    amount: typing.Optional["Money"]
    until: typing.Optional[datetime.datetime]

    def __init__(
        self,
        *,
        amount: typing.Optional["Money"] = None,
        until: typing.Optional[datetime.datetime] = None
    ):
        self.amount = amount
        self.until = until

        super().__init__(action="setAuthorization")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetAuthorizationAction":
        from ._schemas.payment import PaymentSetAuthorizationActionSchema

        return PaymentSetAuthorizationActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetAuthorizationActionSchema

        return PaymentSetAuthorizationActionSchema().dump(self)


class PaymentSetCustomFieldAction(PaymentUpdateAction):
    #: Name of the [Custom Field](/../api/projects/custom-fields).
    name: str
    #: If `value` is absent or `null`, this field will be removed if it exists.
    #: Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
    #: If `value` is provided, it is set for the field defined by `name`.
    value: typing.Optional[typing.Any]

    def __init__(self, *, name: str, value: typing.Optional[typing.Any] = None):
        self.name = name
        self.value = value

        super().__init__(action="setCustomField")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetCustomFieldAction":
        from ._schemas.payment import PaymentSetCustomFieldActionSchema

        return PaymentSetCustomFieldActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetCustomFieldActionSchema

        return PaymentSetCustomFieldActionSchema().dump(self)


class PaymentSetCustomTypeAction(PaymentUpdateAction):
    #: Defines the [Type](ctp:api:type:Type) that extends the Payment with [Custom Fields](/../api/projects/custom-fields).
    #: If absent, any existing Type and Custom Fields are removed from the Payment.
    type: typing.Optional["TypeResourceIdentifier"]
    #: Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Payment.
    fields: typing.Optional["FieldContainer"]

    def __init__(
        self,
        *,
        type: typing.Optional["TypeResourceIdentifier"] = None,
        fields: typing.Optional["FieldContainer"] = None
    ):
        self.type = type
        self.fields = fields

        super().__init__(action="setCustomType")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetCustomTypeAction":
        from ._schemas.payment import PaymentSetCustomTypeActionSchema

        return PaymentSetCustomTypeActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetCustomTypeActionSchema

        return PaymentSetCustomTypeActionSchema().dump(self)


class PaymentSetCustomerAction(PaymentUpdateAction):
    #: Value to set.
    #: If empty, any existing reference is removed.
    customer: typing.Optional["CustomerResourceIdentifier"]

    def __init__(
        self, *, customer: typing.Optional["CustomerResourceIdentifier"] = None
    ):
        self.customer = customer

        super().__init__(action="setCustomer")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetCustomerAction":
        from ._schemas.payment import PaymentSetCustomerActionSchema

        return PaymentSetCustomerActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetCustomerActionSchema

        return PaymentSetCustomerActionSchema().dump(self)


class PaymentSetExternalIdAction(PaymentUpdateAction):
    external_id: typing.Optional[str]

    def __init__(self, *, external_id: typing.Optional[str] = None):
        self.external_id = external_id

        super().__init__(action="setExternalId")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetExternalIdAction":
        from ._schemas.payment import PaymentSetExternalIdActionSchema

        return PaymentSetExternalIdActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetExternalIdActionSchema

        return PaymentSetExternalIdActionSchema().dump(self)


class PaymentSetInterfaceIdAction(PaymentUpdateAction):
    #: Value to set.
    #: Once set, the `interfaceId` cannot be changed.
    interface_id: str

    def __init__(self, *, interface_id: str):
        self.interface_id = interface_id

        super().__init__(action="setInterfaceId")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetInterfaceIdAction":
        from ._schemas.payment import PaymentSetInterfaceIdActionSchema

        return PaymentSetInterfaceIdActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetInterfaceIdActionSchema

        return PaymentSetInterfaceIdActionSchema().dump(self)


class PaymentSetKeyAction(PaymentUpdateAction):
    #: Value to set.
    #: If `key` is absent or `null`, the existing key, if any, will be removed.
    key: typing.Optional[str]

    def __init__(self, *, key: typing.Optional[str] = None):
        self.key = key

        super().__init__(action="setKey")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "PaymentSetKeyAction":
        from ._schemas.payment import PaymentSetKeyActionSchema

        return PaymentSetKeyActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetKeyActionSchema

        return PaymentSetKeyActionSchema().dump(self)


class PaymentSetMethodInfoInterfaceAction(PaymentUpdateAction):
    #: Value to set.
    #: Once set, the `paymentInterface` of the `paymentMethodInfo` cannot be changed.
    interface: str

    def __init__(self, *, interface: str):
        self.interface = interface

        super().__init__(action="setMethodInfoInterface")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetMethodInfoInterfaceAction":
        from ._schemas.payment import PaymentSetMethodInfoInterfaceActionSchema

        return PaymentSetMethodInfoInterfaceActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetMethodInfoInterfaceActionSchema

        return PaymentSetMethodInfoInterfaceActionSchema().dump(self)


class PaymentSetMethodInfoMethodAction(PaymentUpdateAction):
    #: Value to set.
    #: If empty, any existing value will be removed.
    method: typing.Optional[str]

    def __init__(self, *, method: typing.Optional[str] = None):
        self.method = method

        super().__init__(action="setMethodInfoMethod")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetMethodInfoMethodAction":
        from ._schemas.payment import PaymentSetMethodInfoMethodActionSchema

        return PaymentSetMethodInfoMethodActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetMethodInfoMethodActionSchema

        return PaymentSetMethodInfoMethodActionSchema().dump(self)


class PaymentSetMethodInfoNameAction(PaymentUpdateAction):
    #: Value to set.
    #: If empty, any existing value will be removed.
    name: typing.Optional["LocalizedString"]

    def __init__(self, *, name: typing.Optional["LocalizedString"] = None):
        self.name = name

        super().__init__(action="setMethodInfoName")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetMethodInfoNameAction":
        from ._schemas.payment import PaymentSetMethodInfoNameActionSchema

        return PaymentSetMethodInfoNameActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetMethodInfoNameActionSchema

        return PaymentSetMethodInfoNameActionSchema().dump(self)


class PaymentSetStatusInterfaceCodeAction(PaymentUpdateAction):
    """Produces the [PaymentStatusInterfaceCodeSet](ctp:api:type:PaymentStatusInterfaceCodeSetMessage) Message."""

    #: Value to set. If empty, any existing value will be removed.
    interface_code: typing.Optional[str]

    def __init__(self, *, interface_code: typing.Optional[str] = None):
        self.interface_code = interface_code

        super().__init__(action="setStatusInterfaceCode")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetStatusInterfaceCodeAction":
        from ._schemas.payment import PaymentSetStatusInterfaceCodeActionSchema

        return PaymentSetStatusInterfaceCodeActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetStatusInterfaceCodeActionSchema

        return PaymentSetStatusInterfaceCodeActionSchema().dump(self)


class PaymentSetStatusInterfaceTextAction(PaymentUpdateAction):
    #: Value to set. If empty, any existing value will be removed.
    interface_text: str

    def __init__(self, *, interface_text: str):
        self.interface_text = interface_text

        super().__init__(action="setStatusInterfaceText")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetStatusInterfaceTextAction":
        from ._schemas.payment import PaymentSetStatusInterfaceTextActionSchema

        return PaymentSetStatusInterfaceTextActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetStatusInterfaceTextActionSchema

        return PaymentSetStatusInterfaceTextActionSchema().dump(self)


class PaymentSetTransactionCustomFieldAction(PaymentUpdateAction):
    #: Unique identifier of the [Transaction](ctp:api:type:Transaction).
    transaction_id: str
    #: Name of the [Custom Field](/../api/projects/custom-fields).
    name: str
    #: If `value` is absent or `null`, this field will be removed if it exists.
    #: Removing a field that does not exist returns an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
    #: If `value` is provided, it is set for the field defined by `name`.
    value: typing.Optional[typing.Any]

    def __init__(
        self,
        *,
        transaction_id: str,
        name: str,
        value: typing.Optional[typing.Any] = None
    ):
        self.transaction_id = transaction_id
        self.name = name
        self.value = value

        super().__init__(action="setTransactionCustomField")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetTransactionCustomFieldAction":
        from ._schemas.payment import PaymentSetTransactionCustomFieldActionSchema

        return PaymentSetTransactionCustomFieldActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetTransactionCustomFieldActionSchema

        return PaymentSetTransactionCustomFieldActionSchema().dump(self)


class PaymentSetTransactionCustomTypeAction(PaymentUpdateAction):
    #: Unique identifier of the [Transaction](ctp:api:type:Transaction). If the specified `transactionId` does not exist, the request will fail with an [InvalidOperation](ctp:api:type:InvalidOperationError) error.
    transaction_id: str
    #: Defines the [Type](ctp:api:type:Type) that extends the Transaction with [Custom Fields](/../api/projects/custom-fields).
    #: If absent, any existing Type and Custom Fields are removed from the Transaction.
    type: typing.Optional["TypeResourceIdentifier"]
    #: Sets the [Custom Fields](/../api/projects/custom-fields) fields for the Transaction.
    fields: typing.Optional["FieldContainer"]

    def __init__(
        self,
        *,
        transaction_id: str,
        type: typing.Optional["TypeResourceIdentifier"] = None,
        fields: typing.Optional["FieldContainer"] = None
    ):
        self.transaction_id = transaction_id
        self.type = type
        self.fields = fields

        super().__init__(action="setTransactionCustomType")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentSetTransactionCustomTypeAction":
        from ._schemas.payment import PaymentSetTransactionCustomTypeActionSchema

        return PaymentSetTransactionCustomTypeActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentSetTransactionCustomTypeActionSchema

        return PaymentSetTransactionCustomTypeActionSchema().dump(self)


class PaymentTransitionStateAction(PaymentUpdateAction):
    """If the Payment has no current [State](ctp:api:type:State), `initial` must be `true` for the new State.
    If the existing State has transitions set, the new State must be a valid transition.
    If the existing State has no transitions set, no validations are performed when transitioning to the new State.

    Transitioning the State of a Payment produces the [PaymentStatusStateTransition](ctp:api:type:PaymentStatusStateTransitionMessage) Message.

    """

    #: [ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [State](ctp:api:type:State).
    state: "StateResourceIdentifier"
    #: Set to `true` to skip validations when transitioning to the new State.
    force: typing.Optional[bool]

    def __init__(
        self, *, state: "StateResourceIdentifier", force: typing.Optional[bool] = None
    ):
        self.state = state
        self.force = force

        super().__init__(action="transitionState")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "PaymentTransitionStateAction":
        from ._schemas.payment import PaymentTransitionStateActionSchema

        return PaymentTransitionStateActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.payment import PaymentTransitionStateActionSchema

        return PaymentTransitionStateActionSchema().dump(self)
