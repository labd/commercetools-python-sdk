# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType
from .common import BaseResource, Reference, ReferenceTypeId, ResourceIdentifier

if typing.TYPE_CHECKING:
    from .common import CreatedBy, LastModifiedBy, ReferenceTypeId

__all__ = [
    "SubRate",
    "TaxCategory",
    "TaxCategoryAddTaxRateAction",
    "TaxCategoryChangeNameAction",
    "TaxCategoryDraft",
    "TaxCategoryPagedQueryResponse",
    "TaxCategoryReference",
    "TaxCategoryRemoveTaxRateAction",
    "TaxCategoryReplaceTaxRateAction",
    "TaxCategoryResourceIdentifier",
    "TaxCategorySetDescriptionAction",
    "TaxCategorySetKeyAction",
    "TaxCategoryUpdate",
    "TaxCategoryUpdateAction",
    "TaxRate",
    "TaxRateDraft",
]


class SubRate(_BaseType):
    """It is used to calculate the [taxPortions](/../api/projects/carts#taxedprice) field in a Cart or Order."""

    #: Name of the SubRate.
    name: str
    amount: float

    def __init__(self, *, name: str, amount: float):
        self.name = name
        self.amount = amount

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SubRate":
        from ._schemas.tax_category import SubRateSchema

        return SubRateSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import SubRateSchema

        return SubRateSchema().dump(self)


class TaxCategory(BaseResource):
    #: Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
    last_modified_by: typing.Optional["LastModifiedBy"]
    #: Present on resources created after 1 February 2019 except for [events not tracked](/../api/client-logging#events-tracked).
    created_by: typing.Optional["CreatedBy"]
    #: Name of the TaxCategory.
    name: str
    #: Description of the TaxCategory.
    description: typing.Optional[str]
    #: Tax rates and subrates of states and countries. Each TaxRate in the array has a unique ID.
    rates: typing.List["TaxRate"]
    #: User-defined unique identifier of the TaxCategory.
    key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: str,
        version: int,
        created_at: datetime.datetime,
        last_modified_at: datetime.datetime,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        name: str,
        description: typing.Optional[str] = None,
        rates: typing.List["TaxRate"],
        key: typing.Optional[str] = None
    ):
        self.last_modified_by = last_modified_by
        self.created_by = created_by
        self.name = name
        self.description = description
        self.rates = rates
        self.key = key

        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
        )

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "TaxCategory":
        from ._schemas.tax_category import TaxCategorySchema

        return TaxCategorySchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategorySchema

        return TaxCategorySchema().dump(self)


class TaxCategoryDraft(_BaseType):
    #: Name of the TaxCategory.
    name: str
    #: Description of the TaxCategory.
    description: typing.Optional[str]
    #: Tax rates and subrates of states and countries.
    rates: typing.Optional[typing.List["TaxRateDraft"]]
    #: User-defined unique identifier for the TaxCategory.
    key: typing.Optional[str]

    def __init__(
        self,
        *,
        name: str,
        description: typing.Optional[str] = None,
        rates: typing.Optional[typing.List["TaxRateDraft"]] = None,
        key: typing.Optional[str] = None
    ):
        self.name = name
        self.description = description
        self.rates = rates
        self.key = key

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "TaxCategoryDraft":
        from ._schemas.tax_category import TaxCategoryDraftSchema

        return TaxCategoryDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategoryDraftSchema

        return TaxCategoryDraftSchema().dump(self)


class TaxCategoryPagedQueryResponse(_BaseType):
    """[PagedQueryResult](/../api/general-concepts#pagedqueryresult) with `results` containing an array of [TaxCategory](ctp:api:type:TaxCategory)."""

    #: Number of [results requested](/../api/general-concepts#limit).
    limit: int
    #: Number of [elements skipped](/../api/general-concepts#offset).
    offset: int
    #: Actual number of results returned.
    count: int
    #: Total number of results matching the query.
    #: This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
    #: This field is returned by default.
    #: For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
    #: When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
    total: typing.Optional[int]
    #: [TaxCategories](ctp:api:type:TaxCategory) matching the query.
    results: typing.List["TaxCategory"]

    def __init__(
        self,
        *,
        limit: int,
        offset: int,
        count: int,
        total: typing.Optional[int] = None,
        results: typing.List["TaxCategory"]
    ):
        self.limit = limit
        self.offset = offset
        self.count = count
        self.total = total
        self.results = results

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TaxCategoryPagedQueryResponse":
        from ._schemas.tax_category import TaxCategoryPagedQueryResponseSchema

        return TaxCategoryPagedQueryResponseSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategoryPagedQueryResponseSchema

        return TaxCategoryPagedQueryResponseSchema().dump(self)


class TaxCategoryReference(Reference):
    """[Reference](ctp:api:type:Reference) to a [TaxCategory](ctp:api:type:TaxCategory)."""

    #: Contains the representation of the expanded TaxCategory. Only present in responses to requests with [Reference Expansion](/../api/general-concepts#reference-expansion) for TaxCategories.
    obj: typing.Optional["TaxCategory"]

    def __init__(self, *, id: str, obj: typing.Optional["TaxCategory"] = None):
        self.obj = obj

        super().__init__(id=id, type_id=ReferenceTypeId.TAX_CATEGORY)

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "TaxCategoryReference":
        from ._schemas.tax_category import TaxCategoryReferenceSchema

        return TaxCategoryReferenceSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategoryReferenceSchema

        return TaxCategoryReferenceSchema().dump(self)


class TaxCategoryResourceIdentifier(ResourceIdentifier):
    """[ResourceIdentifier](ctp:api:type:ResourceIdentifier) to a [TaxCategory](ctp:api:type:TaxCategory)."""

    def __init__(
        self, *, id: typing.Optional[str] = None, key: typing.Optional[str] = None
    ):
        super().__init__(id=id, key=key, type_id=ReferenceTypeId.TAX_CATEGORY)

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TaxCategoryResourceIdentifier":
        from ._schemas.tax_category import TaxCategoryResourceIdentifierSchema

        return TaxCategoryResourceIdentifierSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategoryResourceIdentifierSchema

        return TaxCategoryResourceIdentifierSchema().dump(self)


class TaxCategoryUpdate(_BaseType):
    #: Expected version of the TaxCategory on which the changes should be applied. If the expected version does not match the actual version, a [ConcurrentModification](ctp:api:type:ConcurrentModificationError) error is returned.
    version: int
    #: Update actions to be performed on the TaxCategory.
    actions: typing.List["TaxCategoryUpdateAction"]

    def __init__(
        self, *, version: int, actions: typing.List["TaxCategoryUpdateAction"]
    ):
        self.version = version
        self.actions = actions

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "TaxCategoryUpdate":
        from ._schemas.tax_category import TaxCategoryUpdateSchema

        return TaxCategoryUpdateSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategoryUpdateSchema

        return TaxCategoryUpdateSchema().dump(self)


class TaxCategoryUpdateAction(_BaseType):
    action: str

    def __init__(self, *, action: str):
        self.action = action

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TaxCategoryUpdateAction":
        if data["action"] == "addTaxRate":
            from ._schemas.tax_category import TaxCategoryAddTaxRateActionSchema

            return TaxCategoryAddTaxRateActionSchema().load(data)
        if data["action"] == "changeName":
            from ._schemas.tax_category import TaxCategoryChangeNameActionSchema

            return TaxCategoryChangeNameActionSchema().load(data)
        if data["action"] == "removeTaxRate":
            from ._schemas.tax_category import TaxCategoryRemoveTaxRateActionSchema

            return TaxCategoryRemoveTaxRateActionSchema().load(data)
        if data["action"] == "replaceTaxRate":
            from ._schemas.tax_category import TaxCategoryReplaceTaxRateActionSchema

            return TaxCategoryReplaceTaxRateActionSchema().load(data)
        if data["action"] == "setDescription":
            from ._schemas.tax_category import TaxCategorySetDescriptionActionSchema

            return TaxCategorySetDescriptionActionSchema().load(data)
        if data["action"] == "setKey":
            from ._schemas.tax_category import TaxCategorySetKeyActionSchema

            return TaxCategorySetKeyActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategoryUpdateActionSchema

        return TaxCategoryUpdateActionSchema().dump(self)


class TaxRate(_BaseType):
    #: Present if the TaxRate is part of a [TaxCategory](ctp:api:type:TaxCategory).
    #: Absent for external TaxRates in [LineItem](ctp:api:type:LineItem), [CustomLineItem](ctp:api:type:CustomLineItem), and [ShippingInfo](ctp:api:type:ShippingInfo).
    id: typing.Optional[str]
    #: User-defined unique identifier of the TaxRate.
    #: Present when set using [TaxRateDraft](ctp:api:type:TaxRateDraft). Not available for external TaxRates created using [ExternalTaxRateDraft](ctp:api:type:ExternalTaxRateDraft).
    key: typing.Optional[str]
    #: Name of the TaxRate.
    name: str
    #: Tax rate. If subrates are used, the amount must be the sum of all subrates.
    amount: float
    #: If `true`, tax is included in [Embedded Prices](ctp:api:type:Price) or [Standalone Prices](ctp:api:type:StandalonePrice), and the `taxedPrice` is present on [LineItems](ctp:api:type:LineItem). In this case, the `totalNet` price on [TaxedPrice](ctp:api:type:TaxedPrice) includes the TaxRate.
    included_in_price: bool
    #: Country in which the tax rate is applied in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
    country: str
    #: State within the country, such as Texas in the United States.
    state: typing.Optional[str]
    #: Used to calculate the [taxPortions](/../api/projects/carts#taxedprice) field in a Cart or Order. It is useful if the total tax of a country (such as the US) is a combination of multiple taxes (such as state and local taxes).
    sub_rates: typing.Optional[typing.List["SubRate"]]

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        name: str,
        amount: float,
        included_in_price: bool,
        country: str,
        state: typing.Optional[str] = None,
        sub_rates: typing.Optional[typing.List["SubRate"]] = None
    ):
        self.id = id
        self.key = key
        self.name = name
        self.amount = amount
        self.included_in_price = included_in_price
        self.country = country
        self.state = state
        self.sub_rates = sub_rates

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "TaxRate":
        from ._schemas.tax_category import TaxRateSchema

        return TaxRateSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxRateSchema

        return TaxRateSchema().dump(self)


class TaxRateDraft(_BaseType):
    #: Name of the TaxRate.
    name: str
    #: Tax rate.
    #: Must be supplied if no `subRates` are specified.
    #: If `subRates` are specified, this field can be omitted or it must be the sum of amounts of all `subRates`.
    amount: typing.Optional[float]
    #: If `true`, tax is included in [Embedded Prices](ctp:api:type:Price) or [Standalone Prices](ctp:api:type:StandalonePrice), and the `taxedPrice` is present on [LineItems](ctp:api:type:LineItem). In this case, the `totalNet` price on [TaxedPrice](ctp:api:type:TaxedPrice) includes the TaxRate.
    included_in_price: bool
    #: Country in which the tax rate is applied in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
    country: str
    #: State within the country, such as Texas in the United States.
    state: typing.Optional[str]
    #: Used to calculate the [taxPortions](/../api/projects/carts#taxedprice) field in a Cart or Order. It is useful if the total tax of a country (such as the US) is a combination of multiple taxes (such as state and local taxes).
    sub_rates: typing.Optional[typing.List["SubRate"]]
    #: User-defined unique identifier of the TaxRate.
    key: typing.Optional[str]

    def __init__(
        self,
        *,
        name: str,
        amount: typing.Optional[float] = None,
        included_in_price: bool,
        country: str,
        state: typing.Optional[str] = None,
        sub_rates: typing.Optional[typing.List["SubRate"]] = None,
        key: typing.Optional[str] = None
    ):
        self.name = name
        self.amount = amount
        self.included_in_price = included_in_price
        self.country = country
        self.state = state
        self.sub_rates = sub_rates
        self.key = key

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "TaxRateDraft":
        from ._schemas.tax_category import TaxRateDraftSchema

        return TaxRateDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxRateDraftSchema

        return TaxRateDraftSchema().dump(self)


class TaxCategoryAddTaxRateAction(TaxCategoryUpdateAction):
    #: Value to append to the `rates` array.
    tax_rate: "TaxRateDraft"

    def __init__(self, *, tax_rate: "TaxRateDraft"):
        self.tax_rate = tax_rate

        super().__init__(action="addTaxRate")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TaxCategoryAddTaxRateAction":
        from ._schemas.tax_category import TaxCategoryAddTaxRateActionSchema

        return TaxCategoryAddTaxRateActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategoryAddTaxRateActionSchema

        return TaxCategoryAddTaxRateActionSchema().dump(self)


class TaxCategoryChangeNameAction(TaxCategoryUpdateAction):
    #: New value to set. Must not be empty.
    name: str

    def __init__(self, *, name: str):
        self.name = name

        super().__init__(action="changeName")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TaxCategoryChangeNameAction":
        from ._schemas.tax_category import TaxCategoryChangeNameActionSchema

        return TaxCategoryChangeNameActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategoryChangeNameActionSchema

        return TaxCategoryChangeNameActionSchema().dump(self)


class TaxCategoryRemoveTaxRateAction(TaxCategoryUpdateAction):
    #: ID of the TaxRate to remove.
    #: Either `taxRateId` or `taxRateKey` is required for this update action.
    tax_rate_id: typing.Optional[str]
    #: Key of the TaxRate to remove.
    #: Either `taxRateId` or `taxRateKey` is required for this update action.
    tax_rate_key: typing.Optional[str]

    def __init__(
        self,
        *,
        tax_rate_id: typing.Optional[str] = None,
        tax_rate_key: typing.Optional[str] = None
    ):
        self.tax_rate_id = tax_rate_id
        self.tax_rate_key = tax_rate_key

        super().__init__(action="removeTaxRate")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TaxCategoryRemoveTaxRateAction":
        from ._schemas.tax_category import TaxCategoryRemoveTaxRateActionSchema

        return TaxCategoryRemoveTaxRateActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategoryRemoveTaxRateActionSchema

        return TaxCategoryRemoveTaxRateActionSchema().dump(self)


class TaxCategoryReplaceTaxRateAction(TaxCategoryUpdateAction):
    #: ID of the TaxRate to replace.
    #: Either `taxRateId` or `taxRateKey` is required for this update action.
    tax_rate_id: typing.Optional[str]
    #: Key of the TaxRate to replace.
    #: Either `taxRateId` or `taxRateKey` is required for this update action.
    tax_rate_key: typing.Optional[str]
    #: New TaxRate to replace with.
    tax_rate: "TaxRateDraft"

    def __init__(
        self,
        *,
        tax_rate_id: typing.Optional[str] = None,
        tax_rate_key: typing.Optional[str] = None,
        tax_rate: "TaxRateDraft"
    ):
        self.tax_rate_id = tax_rate_id
        self.tax_rate_key = tax_rate_key
        self.tax_rate = tax_rate

        super().__init__(action="replaceTaxRate")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TaxCategoryReplaceTaxRateAction":
        from ._schemas.tax_category import TaxCategoryReplaceTaxRateActionSchema

        return TaxCategoryReplaceTaxRateActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategoryReplaceTaxRateActionSchema

        return TaxCategoryReplaceTaxRateActionSchema().dump(self)


class TaxCategorySetDescriptionAction(TaxCategoryUpdateAction):
    #: Value to set. If empty, any existing value will be removed.
    description: typing.Optional[str]

    def __init__(self, *, description: typing.Optional[str] = None):
        self.description = description

        super().__init__(action="setDescription")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TaxCategorySetDescriptionAction":
        from ._schemas.tax_category import TaxCategorySetDescriptionActionSchema

        return TaxCategorySetDescriptionActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategorySetDescriptionActionSchema

        return TaxCategorySetDescriptionActionSchema().dump(self)


class TaxCategorySetKeyAction(TaxCategoryUpdateAction):
    #: Value to set. If empty, any existing value will be removed.
    key: typing.Optional[str]

    def __init__(self, *, key: typing.Optional[str] = None):
        self.key = key

        super().__init__(action="setKey")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TaxCategorySetKeyAction":
        from ._schemas.tax_category import TaxCategorySetKeyActionSchema

        return TaxCategorySetKeyActionSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.tax_category import TaxCategorySetKeyActionSchema

        return TaxCategorySetKeyActionSchema().dump(self)
