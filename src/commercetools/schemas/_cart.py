# DO NOT EDIT! This file is automatically generated

import marshmallow
import marshmallow_enum

from commercetools import helpers, types
from commercetools.schemas._common import (
    LocalizedStringField,
    LoggedResourceSchema,
    ReferenceSchema,
    ResourceIdentifierSchema,
)
from commercetools.schemas._type import FieldContainerField

__all__ = [
    "CartAddCustomLineItemActionSchema",
    "CartAddDiscountCodeActionSchema",
    "CartAddItemShippingAddressActionSchema",
    "CartAddLineItemActionSchema",
    "CartAddPaymentActionSchema",
    "CartAddShoppingListActionSchema",
    "CartApplyDeltaToCustomLineItemShippingDetailsTargetsActionSchema",
    "CartApplyDeltaToLineItemShippingDetailsTargetsActionSchema",
    "CartChangeCustomLineItemMoneyActionSchema",
    "CartChangeCustomLineItemQuantityActionSchema",
    "CartChangeLineItemQuantityActionSchema",
    "CartChangeTaxCalculationModeActionSchema",
    "CartChangeTaxModeActionSchema",
    "CartChangeTaxRoundingModeActionSchema",
    "CartDraftSchema",
    "CartPagedQueryResponseSchema",
    "CartRecalculateActionSchema",
    "CartReferenceSchema",
    "CartRemoveCustomLineItemActionSchema",
    "CartRemoveDiscountCodeActionSchema",
    "CartRemoveItemShippingAddressActionSchema",
    "CartRemoveLineItemActionSchema",
    "CartRemovePaymentActionSchema",
    "CartResourceIdentifierSchema",
    "CartSchema",
    "CartSetAnonymousIdActionSchema",
    "CartSetBillingAddressActionSchema",
    "CartSetCartTotalTaxActionSchema",
    "CartSetCountryActionSchema",
    "CartSetCustomFieldActionSchema",
    "CartSetCustomLineItemCustomFieldActionSchema",
    "CartSetCustomLineItemCustomTypeActionSchema",
    "CartSetCustomLineItemShippingDetailsActionSchema",
    "CartSetCustomLineItemTaxAmountActionSchema",
    "CartSetCustomLineItemTaxRateActionSchema",
    "CartSetCustomShippingMethodActionSchema",
    "CartSetCustomTypeActionSchema",
    "CartSetCustomerEmailActionSchema",
    "CartSetCustomerGroupActionSchema",
    "CartSetCustomerIdActionSchema",
    "CartSetDeleteDaysAfterLastModificationActionSchema",
    "CartSetLineItemCustomFieldActionSchema",
    "CartSetLineItemCustomTypeActionSchema",
    "CartSetLineItemPriceActionSchema",
    "CartSetLineItemShippingDetailsActionSchema",
    "CartSetLineItemTaxAmountActionSchema",
    "CartSetLineItemTaxRateActionSchema",
    "CartSetLineItemTotalPriceActionSchema",
    "CartSetLocaleActionSchema",
    "CartSetShippingAddressActionSchema",
    "CartSetShippingMethodActionSchema",
    "CartSetShippingMethodTaxAmountActionSchema",
    "CartSetShippingMethodTaxRateActionSchema",
    "CartSetShippingRateInputActionSchema",
    "CartUpdateActionSchema",
    "CartUpdateItemShippingAddressActionSchema",
    "CartUpdateSchema",
    "ClassificationShippingRateInputDraftSchema",
    "ClassificationShippingRateInputSchema",
    "CustomLineItemDraftSchema",
    "CustomLineItemSchema",
    "DiscountCodeInfoSchema",
    "DiscountedLineItemPortionSchema",
    "DiscountedLineItemPriceForQuantitySchema",
    "DiscountedLineItemPriceSchema",
    "ExternalLineItemTotalPriceSchema",
    "ExternalTaxAmountDraftSchema",
    "ExternalTaxRateDraftSchema",
    "ItemShippingDetailsDraftSchema",
    "ItemShippingDetailsSchema",
    "ItemShippingTargetSchema",
    "LineItemDraftSchema",
    "LineItemSchema",
    "ReplicaCartDraftSchema",
    "ScoreShippingRateInputDraftSchema",
    "ScoreShippingRateInputSchema",
    "ShippingInfoSchema",
    "ShippingRateInputDraftSchema",
    "ShippingRateInputSchema",
    "TaxPortionSchema",
    "TaxedItemPriceSchema",
    "TaxedPriceSchema",
]


class CartDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.CartDraft`."
    currency = marshmallow.fields.String()
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId", attribute="customerId"
    )
    customer_email = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerEmail", attribute="customerEmail"
    )
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas._customer_group.CustomerGroupResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
        attribute="customerGroup",
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId", attribute="anonymousId"
    )
    store = marshmallow.fields.Nested(
        nested="commercetools.schemas._store.StoreResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    country = marshmallow.fields.String(allow_none=True, missing=None)
    inventory_mode = marshmallow_enum.EnumField(
        types.InventoryMode, by_value=True, missing=None, data_key="inventoryMode", attribute="inventoryMode"
    )
    tax_mode = marshmallow_enum.EnumField(
        types.TaxMode, by_value=True, missing=None, data_key="taxMode", attribute="taxMode"
    )
    tax_rounding_mode = marshmallow_enum.EnumField(
        types.RoundingMode, by_value=True, missing=None, data_key="taxRoundingMode", attribute="taxRoundingMode"
    )
    tax_calculation_mode = marshmallow_enum.EnumField(
        types.TaxCalculationMode,
        by_value=True,
        missing=None,
        data_key="taxCalculationMode",
        attribute="taxCalculationMode",
    )
    line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.LineItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="lineItems",
        attribute="lineItems",
    )
    custom_line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.CustomLineItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="customLineItems",
        attribute="customLineItems",
    )
    shipping_address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingAddress",
        attribute="shippingAddress",
    )
    billing_address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="billingAddress",
        attribute="billingAddress",
    )
    shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas._shipping_method.ShippingMethodResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingMethod",
        attribute="shippingMethod",
    )
    external_tax_rate_for_shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRateForShippingMethod",
        attribute="externalTaxRateForShippingMethod",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)
    delete_days_after_last_modification = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="deleteDaysAfterLastModification", attribute="deleteDaysAfterLastModification"
    )
    origin = marshmallow_enum.EnumField(types.CartOrigin, by_value=True, missing=None)
    shipping_rate_input = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": "commercetools.schemas._cart.ClassificationShippingRateInputDraftSchema",
            "Score": "commercetools.schemas._cart.ScoreShippingRateInputDraftSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingRateInput",
        attribute="shippingRateInput",
    )
    item_shipping_addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="itemShippingAddresses",
        attribute="itemShippingAddresses",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CartDraft(**data)


class CartPagedQueryResponseSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.CartPagedQueryResponse`."
    count = marshmallow.fields.Integer(allow_none=True)
    total = marshmallow.fields.Integer(allow_none=True, missing=None)
    offset = marshmallow.fields.Integer(allow_none=True)
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.CartSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CartPagedQueryResponse(**data)


class CartReferenceSchema(ReferenceSchema):
    "Marshmallow schema for :class:`commercetools.types.CartReference`."
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.CartSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.CartReference(**data)


class CartResourceIdentifierSchema(ResourceIdentifierSchema):
    "Marshmallow schema for :class:`commercetools.types.CartResourceIdentifier`."

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.CartResourceIdentifier(**data)


class CartSchema(LoggedResourceSchema):
    "Marshmallow schema for :class:`commercetools.types.Cart`."
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId", attribute="customerId"
    )
    customer_email = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerEmail", attribute="customerEmail"
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId", attribute="anonymousId"
    )
    store = marshmallow.fields.Nested(
        nested="commercetools.schemas._store.StoreKeyReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.LineItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="lineItems",
        attribute="lineItems",
    )
    custom_line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.CustomLineItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="customLineItems",
        attribute="customLineItems",
    )
    total_price = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas._common.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas._common.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
        attribute="totalPrice",
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.TaxedPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
        attribute="taxedPrice",
    )
    cart_state = marshmallow_enum.EnumField(
        types.CartState, by_value=True, data_key="cartState", attribute="cartState"
    )
    shipping_address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingAddress",
        attribute="shippingAddress",
    )
    billing_address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="billingAddress",
        attribute="billingAddress",
    )
    inventory_mode = marshmallow_enum.EnumField(
        types.InventoryMode, by_value=True, missing=None, data_key="inventoryMode", attribute="inventoryMode"
    )
    tax_mode = marshmallow_enum.EnumField(
        types.TaxMode, by_value=True, data_key="taxMode", attribute="taxMode"
    )
    tax_rounding_mode = marshmallow_enum.EnumField(
        types.RoundingMode, by_value=True, data_key="taxRoundingMode", attribute="taxRoundingMode"
    )
    tax_calculation_mode = marshmallow_enum.EnumField(
        types.TaxCalculationMode, by_value=True, data_key="taxCalculationMode", attribute="taxCalculationMode"
    )
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas._customer_group.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
        attribute="customerGroup",
    )
    country = marshmallow.fields.String(missing=None)
    shipping_info = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ShippingInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingInfo",
        attribute="shippingInfo",
    )
    discount_codes = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.DiscountCodeInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="discountCodes",
        attribute="discountCodes",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    payment_info = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.PaymentInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="paymentInfo",
        attribute="paymentInfo",
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)
    delete_days_after_last_modification = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="deleteDaysAfterLastModification", attribute="deleteDaysAfterLastModification"
    )
    refused_gifts = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart_discount.CartDiscountReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="refusedGifts",
        attribute="refusedGifts",
    )
    origin = marshmallow_enum.EnumField(types.CartOrigin, by_value=True)
    shipping_rate_input = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": "commercetools.schemas._cart.ClassificationShippingRateInputSchema",
            "Score": "commercetools.schemas._cart.ScoreShippingRateInputSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingRateInput",
        attribute="shippingRateInput",
    )
    item_shipping_addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="itemShippingAddresses",
        attribute="itemShippingAddresses",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Cart(**data)


class CartUpdateActionSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.CartUpdateAction`."
    action = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartUpdateAction(**data)


class CartUpdateSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.CartUpdate`."
    version = marshmallow.fields.Integer(allow_none=True)
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addCustomLineItem": "commercetools.schemas._cart.CartAddCustomLineItemActionSchema",
                "addDiscountCode": "commercetools.schemas._cart.CartAddDiscountCodeActionSchema",
                "addItemShippingAddress": "commercetools.schemas._cart.CartAddItemShippingAddressActionSchema",
                "addLineItem": "commercetools.schemas._cart.CartAddLineItemActionSchema",
                "addPayment": "commercetools.schemas._cart.CartAddPaymentActionSchema",
                "addShoppingList": "commercetools.schemas._cart.CartAddShoppingListActionSchema",
                "applyDeltaToCustomLineItemShippingDetailsTargets": "commercetools.schemas._cart.CartApplyDeltaToCustomLineItemShippingDetailsTargetsActionSchema",
                "applyDeltaToLineItemShippingDetailsTargets": "commercetools.schemas._cart.CartApplyDeltaToLineItemShippingDetailsTargetsActionSchema",
                "changeCustomLineItemMoney": "commercetools.schemas._cart.CartChangeCustomLineItemMoneyActionSchema",
                "changeCustomLineItemQuantity": "commercetools.schemas._cart.CartChangeCustomLineItemQuantityActionSchema",
                "changeLineItemQuantity": "commercetools.schemas._cart.CartChangeLineItemQuantityActionSchema",
                "changeTaxCalculationMode": "commercetools.schemas._cart.CartChangeTaxCalculationModeActionSchema",
                "changeTaxMode": "commercetools.schemas._cart.CartChangeTaxModeActionSchema",
                "changeTaxRoundingMode": "commercetools.schemas._cart.CartChangeTaxRoundingModeActionSchema",
                "recalculate": "commercetools.schemas._cart.CartRecalculateActionSchema",
                "removeCustomLineItem": "commercetools.schemas._cart.CartRemoveCustomLineItemActionSchema",
                "removeDiscountCode": "commercetools.schemas._cart.CartRemoveDiscountCodeActionSchema",
                "removeItemShippingAddress": "commercetools.schemas._cart.CartRemoveItemShippingAddressActionSchema",
                "removeLineItem": "commercetools.schemas._cart.CartRemoveLineItemActionSchema",
                "removePayment": "commercetools.schemas._cart.CartRemovePaymentActionSchema",
                "setAnonymousId": "commercetools.schemas._cart.CartSetAnonymousIdActionSchema",
                "setBillingAddress": "commercetools.schemas._cart.CartSetBillingAddressActionSchema",
                "setCartTotalTax": "commercetools.schemas._cart.CartSetCartTotalTaxActionSchema",
                "setCountry": "commercetools.schemas._cart.CartSetCountryActionSchema",
                "setCustomField": "commercetools.schemas._cart.CartSetCustomFieldActionSchema",
                "setCustomLineItemCustomField": "commercetools.schemas._cart.CartSetCustomLineItemCustomFieldActionSchema",
                "setCustomLineItemCustomType": "commercetools.schemas._cart.CartSetCustomLineItemCustomTypeActionSchema",
                "setCustomLineItemShippingDetails": "commercetools.schemas._cart.CartSetCustomLineItemShippingDetailsActionSchema",
                "setCustomLineItemTaxAmount": "commercetools.schemas._cart.CartSetCustomLineItemTaxAmountActionSchema",
                "setCustomLineItemTaxRate": "commercetools.schemas._cart.CartSetCustomLineItemTaxRateActionSchema",
                "setCustomShippingMethod": "commercetools.schemas._cart.CartSetCustomShippingMethodActionSchema",
                "setCustomType": "commercetools.schemas._cart.CartSetCustomTypeActionSchema",
                "setCustomerEmail": "commercetools.schemas._cart.CartSetCustomerEmailActionSchema",
                "setCustomerGroup": "commercetools.schemas._cart.CartSetCustomerGroupActionSchema",
                "setCustomerId": "commercetools.schemas._cart.CartSetCustomerIdActionSchema",
                "setDeleteDaysAfterLastModification": "commercetools.schemas._cart.CartSetDeleteDaysAfterLastModificationActionSchema",
                "setLineItemCustomField": "commercetools.schemas._cart.CartSetLineItemCustomFieldActionSchema",
                "setLineItemCustomType": "commercetools.schemas._cart.CartSetLineItemCustomTypeActionSchema",
                "setLineItemPrice": "commercetools.schemas._cart.CartSetLineItemPriceActionSchema",
                "setLineItemShippingDetails": "commercetools.schemas._cart.CartSetLineItemShippingDetailsActionSchema",
                "setLineItemTaxAmount": "commercetools.schemas._cart.CartSetLineItemTaxAmountActionSchema",
                "setLineItemTaxRate": "commercetools.schemas._cart.CartSetLineItemTaxRateActionSchema",
                "setLineItemTotalPrice": "commercetools.schemas._cart.CartSetLineItemTotalPriceActionSchema",
                "setLocale": "commercetools.schemas._cart.CartSetLocaleActionSchema",
                "setShippingAddress": "commercetools.schemas._cart.CartSetShippingAddressActionSchema",
                "setShippingMethod": "commercetools.schemas._cart.CartSetShippingMethodActionSchema",
                "setShippingMethodTaxAmount": "commercetools.schemas._cart.CartSetShippingMethodTaxAmountActionSchema",
                "setShippingMethodTaxRate": "commercetools.schemas._cart.CartSetShippingMethodTaxRateActionSchema",
                "setShippingRateInput": "commercetools.schemas._cart.CartSetShippingRateInputActionSchema",
                "updateItemShippingAddress": "commercetools.schemas._cart.CartUpdateItemShippingAddressActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CartUpdate(**data)


class CustomLineItemDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.CustomLineItemDraft`."
    name = LocalizedStringField(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)
    money = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    slug = marshmallow.fields.String(allow_none=True)
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.TaxCategoryResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
        attribute="taxCategory",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
        attribute="externalTaxRate",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
        attribute="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomLineItemDraft(**data)


class CustomLineItemSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.CustomLineItem`."
    id = marshmallow.fields.String(allow_none=True)
    name = LocalizedStringField(allow_none=True)
    money = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas._common.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas._common.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.TaxedItemPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
        attribute="taxedPrice",
    )
    total_price = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas._common.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas._common.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
        attribute="totalPrice",
    )
    slug = marshmallow.fields.String(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
        attribute="taxCategory",
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.TaxRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxRate",
        attribute="taxRate",
    )
    discounted_price_per_quantity = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.DiscountedLineItemPriceForQuantitySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="discountedPricePerQuantity",
        attribute="discountedPricePerQuantity",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingDetailsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
        attribute="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomLineItem(**data)


class DiscountCodeInfoSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.DiscountCodeInfo`."
    discount_code = marshmallow.fields.Nested(
        nested="commercetools.schemas._discount_code.DiscountCodeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="discountCode",
        attribute="discountCode",
    )
    state = marshmallow_enum.EnumField(types.DiscountCodeState, by_value=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountCodeInfo(**data)


class DiscountedLineItemPortionSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.DiscountedLineItemPortion`."
    discount = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart_discount.CartDiscountReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    discounted_amount = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="discountedAmount",
        attribute="discountedAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountedLineItemPortion(**data)


class DiscountedLineItemPriceForQuantitySchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.DiscountedLineItemPriceForQuantity`."
    quantity = marshmallow.fields.Integer(allow_none=True)
    discounted_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.DiscountedLineItemPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="discountedPrice",
        attribute="discountedPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountedLineItemPriceForQuantity(**data)


class DiscountedLineItemPriceSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.DiscountedLineItemPrice`."
    value = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas._common.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas._common.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    included_discounts = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.DiscountedLineItemPortionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="includedDiscounts",
        attribute="includedDiscounts",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountedLineItemPrice(**data)


class ExternalLineItemTotalPriceSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ExternalLineItemTotalPrice`."
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
        attribute="totalPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ExternalLineItemTotalPrice(**data)


class ExternalTaxAmountDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ExternalTaxAmountDraft`."
    total_gross = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalGross",
        attribute="totalGross",
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="taxRate",
        attribute="taxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ExternalTaxAmountDraft(**data)


class ExternalTaxRateDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ExternalTaxRateDraft`."
    name = marshmallow.fields.String(allow_none=True)
    amount = marshmallow.fields.Integer(allow_none=True, missing=None)
    country = marshmallow.fields.String(allow_none=True)
    state = marshmallow.fields.String(allow_none=True, missing=None)
    sub_rates = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.SubRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="subRates",
        attribute="subRates",
    )
    included_in_price = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="includedInPrice", attribute="includedInPrice"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ExternalTaxRateDraft(**data)


class ItemShippingDetailsDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ItemShippingDetailsDraft`."
    targets = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingTargetSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ItemShippingDetailsDraft(**data)


class ItemShippingDetailsSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ItemShippingDetails`."
    targets = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingTargetSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    valid = marshmallow.fields.Bool(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ItemShippingDetails(**data)


class ItemShippingTargetSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ItemShippingTarget`."
    address_key = marshmallow.fields.String(allow_none=True, data_key="addressKey", attribute="addressKey")
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ItemShippingTarget(**data)


class LineItemDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.LineItemDraft`."
    product_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="productId", attribute="productId"
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId", attribute="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
        attribute="supplyChannel",
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
        attribute="distributionChannel",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
        attribute="externalTaxRate",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
        attribute="externalPrice",
    )
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
        attribute="externalTotalPrice",
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
        attribute="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.LineItemDraft(**data)


class LineItemSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.LineItem`."
    id = marshmallow.fields.String(allow_none=True)
    product_id = marshmallow.fields.String(allow_none=True, data_key="productId", attribute="productId")
    name = LocalizedStringField(allow_none=True)
    product_slug = LocalizedStringField(
        allow_none=True, missing=None, data_key="productSlug", attribute="productSlug"
    )
    product_type = marshmallow.fields.Nested(
        nested="commercetools.schemas._product_type.ProductTypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="productType",
        attribute="productType",
    )
    variant = marshmallow.fields.Nested(
        nested="commercetools.schemas._product.ProductVariantSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.PriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.TaxedItemPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
        attribute="taxedPrice",
    )
    total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
        attribute="totalPrice",
    )
    quantity = marshmallow.fields.Integer(allow_none=True)
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.TaxRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxRate",
        attribute="taxRate",
    )
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
        attribute="supplyChannel",
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
        attribute="distributionChannel",
    )
    discounted_price_per_quantity = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.DiscountedLineItemPriceForQuantitySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="discountedPricePerQuantity",
        attribute="discountedPricePerQuantity",
    )
    price_mode = marshmallow_enum.EnumField(
        types.LineItemPriceMode, by_value=True, data_key="priceMode", attribute="priceMode"
    )
    line_item_mode = marshmallow_enum.EnumField(
        types.LineItemMode, by_value=True, data_key="lineItemMode", attribute="lineItemMode"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingDetailsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
        attribute="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.LineItem(**data)


class ReplicaCartDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ReplicaCartDraft`."
    reference = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.CartReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReplicaCartDraft(**data)


class ShippingInfoSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ShippingInfo`."
    shipping_method_name = marshmallow.fields.String(
        allow_none=True, data_key="shippingMethodName", attribute="shippingMethodName"
    )
    price = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas._common.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas._common.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    shipping_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._shipping_method.ShippingRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shippingRate",
        attribute="shippingRate",
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.TaxedItemPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
        attribute="taxedPrice",
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.TaxRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxRate",
        attribute="taxRate",
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
        attribute="taxCategory",
    )
    shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas._shipping_method.ShippingMethodReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingMethod",
        attribute="shippingMethod",
    )
    deliveries = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.DeliverySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    discounted_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.DiscountedLineItemPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="discountedPrice",
        attribute="discountedPrice",
    )
    shipping_method_state = marshmallow_enum.EnumField(
        types.ShippingMethodState, by_value=True, data_key="shippingMethodState", attribute="shippingMethodState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShippingInfo(**data)


class ShippingRateInputDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ShippingRateInputDraft`."
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ShippingRateInputDraft(**data)


class ShippingRateInputSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ShippingRateInput`."
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ShippingRateInput(**data)


class TaxPortionSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.TaxPortion`."
    name = marshmallow.fields.String(allow_none=True, missing=None)
    rate = marshmallow.fields.Float(allow_none=True)
    amount = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxPortion(**data)


class TaxedItemPriceSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.TaxedItemPrice`."
    total_net = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas._common.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas._common.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalNet",
        attribute="totalNet",
    )
    total_gross = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas._common.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas._common.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalGross",
        attribute="totalGross",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxedItemPrice(**data)


class TaxedPriceSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.TaxedPrice`."
    total_net = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalNet",
        attribute="totalNet",
    )
    total_gross = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalGross",
        attribute="totalGross",
    )
    tax_portions = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.TaxPortionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="taxPortions",
        attribute="taxPortions",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxedPrice(**data)


class CartAddCustomLineItemActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartAddCustomLineItemAction`."
    money = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    name = LocalizedStringField(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)
    slug = marshmallow.fields.String(allow_none=True)
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.TaxCategoryResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
        attribute="taxCategory",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
        attribute="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddCustomLineItemAction(**data)


class CartAddDiscountCodeActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartAddDiscountCodeAction`."
    code = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddDiscountCodeAction(**data)


class CartAddItemShippingAddressActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartAddItemShippingAddressAction`."
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddItemShippingAddressAction(**data)


class CartAddLineItemActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartAddLineItemAction`."
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
        attribute="distributionChannel",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate", attribute="externalTaxRate",
    )
    product_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="productId", attribute="productId"
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId", attribute="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
        attribute="supplyChannel",
    )
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
        attribute="externalPrice",
    )
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
        attribute="externalTotalPrice",
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
        attribute="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddLineItemAction(**data)


class CartAddPaymentActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartAddPaymentAction`."
    payment = marshmallow.fields.Nested(
        nested="commercetools.schemas._payment.PaymentResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddPaymentAction(**data)


class CartAddShoppingListActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartAddShoppingListAction`."
    shopping_list = marshmallow.fields.Nested(
        nested="commercetools.schemas._shopping_list.ShoppingListResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shoppingList",
        attribute="shoppingList",
    )
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
        attribute="supplyChannel",
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
        attribute="distributionChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddShoppingListAction(**data)


class CartApplyDeltaToCustomLineItemShippingDetailsTargetsActionSchema(
    CartUpdateActionSchema
):
    "Marshmallow schema for :class:`commercetools.types.CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId", attribute="customLineItemId"
    )
    targets_delta = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingTargetSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="targetsDelta",
        attribute="targetsDelta",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction(**data)


class CartApplyDeltaToLineItemShippingDetailsTargetsActionSchema(
    CartUpdateActionSchema
):
    "Marshmallow schema for :class:`commercetools.types.CartApplyDeltaToLineItemShippingDetailsTargetsAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId", attribute="lineItemId")
    targets_delta = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingTargetSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="targetsDelta",
        attribute="targetsDelta",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartApplyDeltaToLineItemShippingDetailsTargetsAction(**data)


class CartChangeCustomLineItemMoneyActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartChangeCustomLineItemMoneyAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId", attribute="customLineItemId"
    )
    money = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeCustomLineItemMoneyAction(**data)


class CartChangeCustomLineItemQuantityActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartChangeCustomLineItemQuantityAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId", attribute="customLineItemId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeCustomLineItemQuantityAction(**data)


class CartChangeLineItemQuantityActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartChangeLineItemQuantityAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId", attribute="lineItemId")
    quantity = marshmallow.fields.Integer(allow_none=True)
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
        attribute="externalPrice",
    )
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
        attribute="externalTotalPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeLineItemQuantityAction(**data)


class CartChangeTaxCalculationModeActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartChangeTaxCalculationModeAction`."
    tax_calculation_mode = marshmallow_enum.EnumField(
        types.TaxCalculationMode, by_value=True, data_key="taxCalculationMode", attribute="taxCalculationMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeTaxCalculationModeAction(**data)


class CartChangeTaxModeActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartChangeTaxModeAction`."
    tax_mode = marshmallow_enum.EnumField(
        types.TaxMode, by_value=True, data_key="taxMode", attribute="taxMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeTaxModeAction(**data)


class CartChangeTaxRoundingModeActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartChangeTaxRoundingModeAction`."
    tax_rounding_mode = marshmallow_enum.EnumField(
        types.RoundingMode, by_value=True, data_key="taxRoundingMode", attribute="taxRoundingMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeTaxRoundingModeAction(**data)


class CartRecalculateActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartRecalculateAction`."
    update_product_data = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="updateProductData", attribute="updateProductData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRecalculateAction(**data)


class CartRemoveCustomLineItemActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartRemoveCustomLineItemAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId", attribute="customLineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRemoveCustomLineItemAction(**data)


class CartRemoveDiscountCodeActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartRemoveDiscountCodeAction`."
    discount_code = marshmallow.fields.Nested(
        nested="commercetools.schemas._discount_code.DiscountCodeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="discountCode", attribute="discountCode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRemoveDiscountCodeAction(**data)


class CartRemoveItemShippingAddressActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartRemoveItemShippingAddressAction`."
    address_key = marshmallow.fields.String(allow_none=True, data_key="addressKey", attribute="addressKey")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRemoveItemShippingAddressAction(**data)


class CartRemoveLineItemActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartRemoveLineItemAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId", attribute="lineItemId")
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
        attribute="externalPrice",
    )
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
        attribute="externalTotalPrice",
    )
    shipping_details_to_remove = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetailsToRemove",
        attribute="shippingDetailsToRemove",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRemoveLineItemAction(**data)


class CartRemovePaymentActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartRemovePaymentAction`."
    payment = marshmallow.fields.Nested(
        nested="commercetools.schemas._payment.PaymentResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRemovePaymentAction(**data)


class CartSetAnonymousIdActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetAnonymousIdAction`."
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId", attribute="anonymousId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetAnonymousIdAction(**data)


class CartSetBillingAddressActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetBillingAddressAction`."
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetBillingAddressAction(**data)


class CartSetCartTotalTaxActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCartTotalTaxAction`."
    external_total_gross = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="externalTotalGross",
        attribute="externalTotalGross",
    )
    external_tax_portions = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.TaxPortionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="externalTaxPortions",
        attribute="externalTaxPortions",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCartTotalTaxAction(**data)


class CartSetCountryActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCountryAction`."
    country = marshmallow.fields.String(missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCountryAction(**data)


class CartSetCustomFieldActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCustomFieldAction`."
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomFieldAction(**data)


class CartSetCustomLineItemCustomFieldActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCustomLineItemCustomFieldAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId", attribute="customLineItemId"
    )
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomLineItemCustomFieldAction(**data)


class CartSetCustomLineItemCustomTypeActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCustomLineItemCustomTypeAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId", attribute="customLineItemId"
    )
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.TypeResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomLineItemCustomTypeAction(**data)


class CartSetCustomLineItemShippingDetailsActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCustomLineItemShippingDetailsAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId", attribute="customLineItemId"
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
        attribute="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomLineItemShippingDetailsAction(**data)


class CartSetCustomLineItemTaxAmountActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCustomLineItemTaxAmountAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId", attribute="customLineItemId"
    )
    external_tax_amount = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxAmountDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxAmount",
        attribute="externalTaxAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomLineItemTaxAmountAction(**data)


class CartSetCustomLineItemTaxRateActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCustomLineItemTaxRateAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId", attribute="customLineItemId"
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
        attribute="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomLineItemTaxRateAction(**data)


class CartSetCustomShippingMethodActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCustomShippingMethodAction`."
    shipping_method_name = marshmallow.fields.String(
        allow_none=True, data_key="shippingMethodName", attribute="shippingMethodName"
    )
    shipping_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._shipping_method.ShippingRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shippingRate",
        attribute="shippingRate",
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.TaxCategoryResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
        attribute="taxCategory",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
        attribute="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomShippingMethodAction(**data)


class CartSetCustomTypeActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCustomTypeAction`."
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.TypeResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomTypeAction(**data)


class CartSetCustomerEmailActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCustomerEmailAction`."
    email = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomerEmailAction(**data)


class CartSetCustomerGroupActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCustomerGroupAction`."
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas._customer_group.CustomerGroupResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
        attribute="customerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomerGroupAction(**data)


class CartSetCustomerIdActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetCustomerIdAction`."
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId", attribute="customerId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomerIdAction(**data)


class CartSetDeleteDaysAfterLastModificationActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetDeleteDaysAfterLastModificationAction`."
    delete_days_after_last_modification = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="deleteDaysAfterLastModification", attribute="deleteDaysAfterLastModification"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetDeleteDaysAfterLastModificationAction(**data)


class CartSetLineItemCustomFieldActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetLineItemCustomFieldAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId", attribute="lineItemId")
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemCustomFieldAction(**data)


class CartSetLineItemCustomTypeActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetLineItemCustomTypeAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId", attribute="lineItemId")
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.TypeResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemCustomTypeAction(**data)


class CartSetLineItemPriceActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetLineItemPriceAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId", attribute="lineItemId")
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
        attribute="externalPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemPriceAction(**data)


class CartSetLineItemShippingDetailsActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetLineItemShippingDetailsAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId", attribute="lineItemId")
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
        attribute="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemShippingDetailsAction(**data)


class CartSetLineItemTaxAmountActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetLineItemTaxAmountAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId", attribute="lineItemId")
    external_tax_amount = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxAmountDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxAmount",
        attribute="externalTaxAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemTaxAmountAction(**data)


class CartSetLineItemTaxRateActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetLineItemTaxRateAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId", attribute="lineItemId")
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
        attribute="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemTaxRateAction(**data)


class CartSetLineItemTotalPriceActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetLineItemTotalPriceAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId", attribute="lineItemId")
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
        attribute="externalTotalPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemTotalPriceAction(**data)


class CartSetLocaleActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetLocaleAction`."
    locale = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLocaleAction(**data)


class CartSetShippingAddressActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetShippingAddressAction`."
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetShippingAddressAction(**data)


class CartSetShippingMethodActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetShippingMethodAction`."
    shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas._shipping_method.ShippingMethodResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingMethod",
        attribute="shippingMethod",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
        attribute="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetShippingMethodAction(**data)


class CartSetShippingMethodTaxAmountActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetShippingMethodTaxAmountAction`."
    external_tax_amount = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxAmountDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxAmount",
        attribute="externalTaxAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetShippingMethodTaxAmountAction(**data)


class CartSetShippingMethodTaxRateActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetShippingMethodTaxRateAction`."
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
        attribute="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetShippingMethodTaxRateAction(**data)


class CartSetShippingRateInputActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartSetShippingRateInputAction`."
    shipping_rate_input = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": "commercetools.schemas._cart.ClassificationShippingRateInputDraftSchema",
            "Score": "commercetools.schemas._cart.ScoreShippingRateInputDraftSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingRateInput",
        attribute="shippingRateInput",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetShippingRateInputAction(**data)


class CartUpdateItemShippingAddressActionSchema(CartUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.CartUpdateItemShippingAddressAction`."
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartUpdateItemShippingAddressAction(**data)


class ClassificationShippingRateInputDraftSchema(ShippingRateInputDraftSchema):
    "Marshmallow schema for :class:`commercetools.types.ClassificationShippingRateInputDraft`."
    key = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ClassificationShippingRateInputDraft(**data)


class ClassificationShippingRateInputSchema(ShippingRateInputSchema):
    "Marshmallow schema for :class:`commercetools.types.ClassificationShippingRateInput`."
    key = marshmallow.fields.String(allow_none=True)
    label = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ClassificationShippingRateInput(**data)


class ScoreShippingRateInputDraftSchema(ShippingRateInputDraftSchema):
    "Marshmallow schema for :class:`commercetools.types.ScoreShippingRateInputDraft`."
    score = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ScoreShippingRateInputDraft(**data)


class ScoreShippingRateInputSchema(ShippingRateInputSchema):
    "Marshmallow schema for :class:`commercetools.types.ScoreShippingRateInput`."
    score = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ScoreShippingRateInput(**data)
