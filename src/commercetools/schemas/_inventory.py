# DO NOT EDIT! This file is automatically generated

import marshmallow

from commercetools import helpers, types
from commercetools.schemas._common import (
    LoggedResourceSchema,
    ReferenceSchema,
    ResourceIdentifierSchema,
)
from commercetools.schemas._type import FieldContainerField

__all__ = [
    "InventoryAddQuantityActionSchema",
    "InventoryChangeQuantityActionSchema",
    "InventoryEntryDraftSchema",
    "InventoryEntryReferenceSchema",
    "InventoryEntryResourceIdentifierSchema",
    "InventoryEntrySchema",
    "InventoryPagedQueryResponseSchema",
    "InventoryRemoveQuantityActionSchema",
    "InventorySetCustomFieldActionSchema",
    "InventorySetCustomTypeActionSchema",
    "InventorySetExpectedDeliveryActionSchema",
    "InventorySetRestockableInDaysActionSchema",
    "InventorySetSupplyChannelActionSchema",
    "InventoryUpdateActionSchema",
    "InventoryUpdateSchema",
]


class InventoryEntryDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.InventoryEntryDraft`."
    sku = marshmallow.fields.String(allow_none=True)
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
        attribute="supplyChannel",
    )
    quantity_on_stock = marshmallow.fields.Integer(
        allow_none=True, data_key="quantityOnStock", attribute="quantityOnStock"
    )
    restockable_in_days = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="restockableInDays", attribute="restockableInDays"
    )
    expected_delivery = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="expectedDelivery", attribute="expectedDelivery"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.InventoryEntryDraft(**data)


class InventoryEntryReferenceSchema(ReferenceSchema):
    "Marshmallow schema for :class:`commercetools.types.InventoryEntryReference`."
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas._inventory.InventoryEntrySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.InventoryEntryReference(**data)


class InventoryEntryResourceIdentifierSchema(ResourceIdentifierSchema):
    "Marshmallow schema for :class:`commercetools.types.InventoryEntryResourceIdentifier`."

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.InventoryEntryResourceIdentifier(**data)


class InventoryEntrySchema(LoggedResourceSchema):
    "Marshmallow schema for :class:`commercetools.types.InventoryEntry`."
    sku = marshmallow.fields.String(allow_none=True)
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
        attribute="supplyChannel",
    )
    quantity_on_stock = marshmallow.fields.Integer(
        allow_none=True, data_key="quantityOnStock", attribute="quantityOnStock"
    )
    available_quantity = marshmallow.fields.Integer(
        allow_none=True, data_key="availableQuantity", attribute="availableQuantity"
    )
    restockable_in_days = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="restockableInDays", attribute="restockableInDays"
    )
    expected_delivery = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="expectedDelivery", attribute="expectedDelivery"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.InventoryEntry(**data)


class InventoryPagedQueryResponseSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.InventoryPagedQueryResponse`."
    count = marshmallow.fields.Integer(allow_none=True)
    total = marshmallow.fields.Integer(allow_none=True, missing=None)
    offset = marshmallow.fields.Integer(allow_none=True)
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas._inventory.InventoryEntrySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.InventoryPagedQueryResponse(**data)


class InventoryUpdateActionSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.InventoryUpdateAction`."
    action = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventoryUpdateAction(**data)


class InventoryUpdateSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.InventoryUpdate`."
    version = marshmallow.fields.Integer(allow_none=True)
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addQuantity": "commercetools.schemas._inventory.InventoryAddQuantityActionSchema",
                "changeQuantity": "commercetools.schemas._inventory.InventoryChangeQuantityActionSchema",
                "removeQuantity": "commercetools.schemas._inventory.InventoryRemoveQuantityActionSchema",
                "setCustomField": "commercetools.schemas._inventory.InventorySetCustomFieldActionSchema",
                "setCustomType": "commercetools.schemas._inventory.InventorySetCustomTypeActionSchema",
                "setExpectedDelivery": "commercetools.schemas._inventory.InventorySetExpectedDeliveryActionSchema",
                "setRestockableInDays": "commercetools.schemas._inventory.InventorySetRestockableInDaysActionSchema",
                "setSupplyChannel": "commercetools.schemas._inventory.InventorySetSupplyChannelActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.InventoryUpdate(**data)


class InventoryAddQuantityActionSchema(InventoryUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.InventoryAddQuantityAction`."
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventoryAddQuantityAction(**data)


class InventoryChangeQuantityActionSchema(InventoryUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.InventoryChangeQuantityAction`."
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventoryChangeQuantityAction(**data)


class InventoryRemoveQuantityActionSchema(InventoryUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.InventoryRemoveQuantityAction`."
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventoryRemoveQuantityAction(**data)


class InventorySetCustomFieldActionSchema(InventoryUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.InventorySetCustomFieldAction`."
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventorySetCustomFieldAction(**data)


class InventorySetCustomTypeActionSchema(InventoryUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.InventorySetCustomTypeAction`."
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.TypeResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventorySetCustomTypeAction(**data)


class InventorySetExpectedDeliveryActionSchema(InventoryUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.InventorySetExpectedDeliveryAction`."
    expected_delivery = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="expectedDelivery", attribute="expectedDelivery"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventorySetExpectedDeliveryAction(**data)


class InventorySetRestockableInDaysActionSchema(InventoryUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.InventorySetRestockableInDaysAction`."
    restockable_in_days = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="restockableInDays", attribute="restockableInDays"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventorySetRestockableInDaysAction(**data)


class InventorySetSupplyChannelActionSchema(InventoryUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.InventorySetSupplyChannelAction`."
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
        attribute="supplyChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventorySetSupplyChannelAction(**data)
