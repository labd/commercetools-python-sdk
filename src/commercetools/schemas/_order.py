# DO NOT EDIT! This file is automatically generated

import marshmallow
import marshmallow_enum

from commercetools import helpers, types
from commercetools.schemas._base import (
    PagedQueryResponseSchema,
    UpdateActionSchema,
    UpdateSchema,
)
from commercetools.schemas._common import (
    LocalizedStringField,
    ReferenceSchema,
    ResourceSchema,
)
from commercetools.schemas._type import FieldContainerField

__all__ = [
    "CustomLineItemReturnItemSchema",
    "DeliveryItemSchema",
    "DeliverySchema",
    "DiscountedLineItemPriceDraftSchema",
    "ItemStateSchema",
    "LineItemImportDraftSchema",
    "LineItemReturnItemSchema",
    "OrderAddDeliveryActionSchema",
    "OrderAddItemShippingAddressActionSchema",
    "OrderAddParcelToDeliveryActionSchema",
    "OrderAddPaymentActionSchema",
    "OrderAddReturnInfoActionSchema",
    "OrderChangeOrderStateActionSchema",
    "OrderChangePaymentStateActionSchema",
    "OrderChangeShipmentStateActionSchema",
    "OrderFromCartDraftSchema",
    "OrderImportCustomLineItemStateActionSchema",
    "OrderImportDraftSchema",
    "OrderImportLineItemStateActionSchema",
    "OrderPagedQueryResponseSchema",
    "OrderReferenceSchema",
    "OrderRemoveDeliveryActionSchema",
    "OrderRemoveItemShippingAddressActionSchema",
    "OrderRemoveParcelFromDeliveryActionSchema",
    "OrderRemovePaymentActionSchema",
    "OrderSchema",
    "OrderSetBillingAddressActionSchema",
    "OrderSetCustomFieldActionSchema",
    "OrderSetCustomLineItemCustomFieldActionSchema",
    "OrderSetCustomLineItemCustomTypeActionSchema",
    "OrderSetCustomLineItemShippingDetailsActionSchema",
    "OrderSetCustomTypeActionSchema",
    "OrderSetCustomerEmailActionSchema",
    "OrderSetCustomerIdActionSchema",
    "OrderSetDeliveryAddressActionSchema",
    "OrderSetDeliveryItemsActionSchema",
    "OrderSetLineItemCustomFieldActionSchema",
    "OrderSetLineItemCustomTypeActionSchema",
    "OrderSetLineItemShippingDetailsActionSchema",
    "OrderSetLocaleActionSchema",
    "OrderSetOrderNumberActionSchema",
    "OrderSetParcelItemsActionSchema",
    "OrderSetParcelMeasurementsActionSchema",
    "OrderSetParcelTrackingDataActionSchema",
    "OrderSetReturnPaymentStateActionSchema",
    "OrderSetReturnShipmentStateActionSchema",
    "OrderSetShippingAddressActionSchema",
    "OrderTransitionCustomLineItemStateActionSchema",
    "OrderTransitionLineItemStateActionSchema",
    "OrderTransitionStateActionSchema",
    "OrderUpdateActionSchema",
    "OrderUpdateItemShippingAddressActionSchema",
    "OrderUpdateSchema",
    "OrderUpdateSyncInfoActionSchema",
    "ParcelDraftSchema",
    "ParcelMeasurementsSchema",
    "ParcelSchema",
    "PaymentInfoSchema",
    "ProductVariantImportDraftSchema",
    "ReturnInfoSchema",
    "ReturnItemDraftSchema",
    "ReturnItemSchema",
    "ShippingInfoDraftSchema",
    "StagedOrderUpdateActionSchema",
    "SyncInfoSchema",
    "TaxedItemPriceDraftSchema",
    "TrackingDataSchema",
]


class DeliveryItemSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.DeliveryItem`."
    id = marshmallow.fields.String(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DeliveryItem(**data)


class DeliverySchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.Delivery`."
    id = marshmallow.fields.String(allow_none=True)
    created_at = marshmallow.fields.DateTime(allow_none=True, data_key="createdAt")
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    parcels = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ParcelSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Delivery(**data)


class DiscountedLineItemPriceDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.DiscountedLineItemPriceDraft`."
    value = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    included_discounts = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.DiscountedLineItemPortionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="includedDiscounts",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountedLineItemPriceDraft(**data)


class ItemStateSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ItemState`."
    quantity = marshmallow.fields.Integer(allow_none=True)
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas._state.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ItemState(**data)


class LineItemImportDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.LineItemImportDraft`."
    product_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="productId"
    )
    name = LocalizedStringField(allow_none=True)
    variant = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ProductVariantImportDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.PriceDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    quantity = marshmallow.fields.Integer(allow_none=True)
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.TaxRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxRate",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.LineItemImportDraft(**data)


class OrderFromCartDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.OrderFromCartDraft`."
    id = marshmallow.fields.String(allow_none=True)
    version = marshmallow.fields.Integer(allow_none=True)
    order_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderNumber"
    )
    payment_state = marshmallow_enum.EnumField(
        types.PaymentState, by_value=True, missing=None, data_key="paymentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderFromCartDraft(**data)


class OrderImportDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.OrderImportDraft`."
    order_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderNumber"
    )
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId"
    )
    customer_email = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerEmail"
    )
    line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.LineItemImportDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="lineItems",
    )
    custom_line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.CustomLineItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="customLineItems",
    )
    total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.TaxedPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
    )
    shipping_address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingAddress",
    )
    billing_address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="billingAddress",
    )
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas._customer_group.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    country = marshmallow.fields.String(allow_none=True, missing=None)
    order_state = marshmallow_enum.EnumField(
        types.OrderState, by_value=True, missing=None, data_key="orderState"
    )
    shipment_state = marshmallow_enum.EnumField(
        types.ShipmentState, by_value=True, missing=None, data_key="shipmentState"
    )
    payment_state = marshmallow_enum.EnumField(
        types.PaymentState, by_value=True, missing=None, data_key="paymentState"
    )
    shipping_info = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ShippingInfoDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingInfo",
    )
    completed_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="completedAt"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    inventory_mode = marshmallow_enum.EnumField(
        types.InventoryMode, by_value=True, missing=None, data_key="inventoryMode"
    )
    tax_rounding_mode = marshmallow_enum.EnumField(
        types.RoundingMode, by_value=True, missing=None, data_key="taxRoundingMode"
    )
    item_shipping_addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="itemShippingAddresses",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderImportDraft(**data)


class OrderPagedQueryResponseSchema(PagedQueryResponseSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderPagedQueryResponse`."
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.OrderSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderPagedQueryResponse(**data)


class OrderReferenceSchema(ReferenceSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderReference`."
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.OrderSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.OrderReference(**data)


class OrderSchema(ResourceSchema):
    "Marshmallow schema for :class:`commercetools.types.Order`."
    completed_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="completedAt"
    )
    order_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderNumber"
    )
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId"
    )
    customer_email = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerEmail"
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )
    line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.LineItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="lineItems",
    )
    custom_line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.CustomLineItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="customLineItems",
    )
    total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.TaxedPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
    )
    shipping_address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingAddress",
    )
    billing_address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="billingAddress",
    )
    tax_mode = marshmallow_enum.EnumField(
        types.TaxMode, by_value=True, missing=None, data_key="taxMode"
    )
    tax_rounding_mode = marshmallow_enum.EnumField(
        types.RoundingMode, by_value=True, missing=None, data_key="taxRoundingMode"
    )
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas._customer_group.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    country = marshmallow.fields.String(allow_none=True, missing=None)
    order_state = marshmallow_enum.EnumField(
        types.OrderState, by_value=True, data_key="orderState"
    )
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas._state.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    shipment_state = marshmallow_enum.EnumField(
        types.ShipmentState, by_value=True, missing=None, data_key="shipmentState"
    )
    payment_state = marshmallow_enum.EnumField(
        types.PaymentState, by_value=True, missing=None, data_key="paymentState"
    )
    shipping_info = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ShippingInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingInfo",
    )
    sync_info = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.SyncInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="syncInfo",
    )
    return_info = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ReturnInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="returnInfo",
    )
    discount_codes = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.DiscountCodeInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="discountCodes",
    )
    last_message_sequence_number = marshmallow.fields.Integer(
        allow_none=True, data_key="lastMessageSequenceNumber"
    )
    cart = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.CartReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    payment_info = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.PaymentInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="paymentInfo",
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)
    inventory_mode = marshmallow_enum.EnumField(
        types.InventoryMode, by_value=True, missing=None, data_key="inventoryMode"
    )
    origin = marshmallow_enum.EnumField(types.CartOrigin, by_value=True)
    tax_calculation_mode = marshmallow_enum.EnumField(
        types.TaxCalculationMode,
        by_value=True,
        missing=None,
        data_key="taxCalculationMode",
    )
    shipping_rate_input = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": "commercetools.schemas._cart.ClassificationShippingRateInputSchema",
            "Score": "commercetools.schemas._cart.ScoreShippingRateInputSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingRateInput",
    )
    item_shipping_addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="itemShippingAddresses",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Order(**data)


class OrderUpdateActionSchema(UpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderUpdateAction`."

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderUpdateAction(**data)


class OrderUpdateSchema(UpdateSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderUpdate`."
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addDelivery": "commercetools.schemas._order.OrderAddDeliveryActionSchema",
                "addItemShippingAddress": "commercetools.schemas._order.OrderAddItemShippingAddressActionSchema",
                "addParcelToDelivery": "commercetools.schemas._order.OrderAddParcelToDeliveryActionSchema",
                "addPayment": "commercetools.schemas._order.OrderAddPaymentActionSchema",
                "addReturnInfo": "commercetools.schemas._order.OrderAddReturnInfoActionSchema",
                "changeOrderState": "commercetools.schemas._order.OrderChangeOrderStateActionSchema",
                "changePaymentState": "commercetools.schemas._order.OrderChangePaymentStateActionSchema",
                "changeShipmentState": "commercetools.schemas._order.OrderChangeShipmentStateActionSchema",
                "importCustomLineItemState": "commercetools.schemas._order.OrderImportCustomLineItemStateActionSchema",
                "importLineItemState": "commercetools.schemas._order.OrderImportLineItemStateActionSchema",
                "removeDelivery": "commercetools.schemas._order.OrderRemoveDeliveryActionSchema",
                "removeItemShippingAddress": "commercetools.schemas._order.OrderRemoveItemShippingAddressActionSchema",
                "removeParcelFromDelivery": "commercetools.schemas._order.OrderRemoveParcelFromDeliveryActionSchema",
                "removePayment": "commercetools.schemas._order.OrderRemovePaymentActionSchema",
                "setBillingAddress": "commercetools.schemas._order.OrderSetBillingAddressActionSchema",
                "setCustomField": "commercetools.schemas._order.OrderSetCustomFieldActionSchema",
                "setCustomLineItemCustomField": "commercetools.schemas._order.OrderSetCustomLineItemCustomFieldActionSchema",
                "setCustomLineItemCustomType": "commercetools.schemas._order.OrderSetCustomLineItemCustomTypeActionSchema",
                "setCustomLineItemShippingDetails": "commercetools.schemas._order.OrderSetCustomLineItemShippingDetailsActionSchema",
                "setCustomType": "commercetools.schemas._order.OrderSetCustomTypeActionSchema",
                "setCustomerEmail": "commercetools.schemas._order.OrderSetCustomerEmailActionSchema",
                "setCustomerId": "commercetools.schemas._order.OrderSetCustomerIdActionSchema",
                "setDeliveryAddress": "commercetools.schemas._order.OrderSetDeliveryAddressActionSchema",
                "setDeliveryItems": "commercetools.schemas._order.OrderSetDeliveryItemsActionSchema",
                "setLineItemCustomField": "commercetools.schemas._order.OrderSetLineItemCustomFieldActionSchema",
                "setLineItemCustomType": "commercetools.schemas._order.OrderSetLineItemCustomTypeActionSchema",
                "setLineItemShippingDetails": "commercetools.schemas._order.OrderSetLineItemShippingDetailsActionSchema",
                "setLocale": "commercetools.schemas._order.OrderSetLocaleActionSchema",
                "setOrderNumber": "commercetools.schemas._order.OrderSetOrderNumberActionSchema",
                "setParcelItems": "commercetools.schemas._order.OrderSetParcelItemsActionSchema",
                "setParcelMeasurements": "commercetools.schemas._order.OrderSetParcelMeasurementsActionSchema",
                "setParcelTrackingData": "commercetools.schemas._order.OrderSetParcelTrackingDataActionSchema",
                "setReturnPaymentState": "commercetools.schemas._order.OrderSetReturnPaymentStateActionSchema",
                "setReturnShipmentState": "commercetools.schemas._order.OrderSetReturnShipmentStateActionSchema",
                "setShippingAddress": "commercetools.schemas._order.OrderSetShippingAddressActionSchema",
                "transitionCustomLineItemState": "commercetools.schemas._order.OrderTransitionCustomLineItemStateActionSchema",
                "transitionLineItemState": "commercetools.schemas._order.OrderTransitionLineItemStateActionSchema",
                "transitionState": "commercetools.schemas._order.OrderTransitionStateActionSchema",
                "updateItemShippingAddress": "commercetools.schemas._order.OrderUpdateItemShippingAddressActionSchema",
                "updateSyncInfo": "commercetools.schemas._order.OrderUpdateSyncInfoActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderUpdate(**data)


class ParcelDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ParcelDraft`."
    measurements = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ParcelMeasurementsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    tracking_data = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.TrackingDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="trackingData",
    )
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ParcelDraft(**data)


class ParcelMeasurementsSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ParcelMeasurements`."
    height_in_millimeter = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="heightInMillimeter"
    )
    length_in_millimeter = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="lengthInMillimeter"
    )
    width_in_millimeter = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="widthInMillimeter"
    )
    weight_in_gram = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="weightInGram"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ParcelMeasurements(**data)


class ParcelSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.Parcel`."
    id = marshmallow.fields.String(allow_none=True)
    created_at = marshmallow.fields.DateTime(allow_none=True, data_key="createdAt")
    measurements = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ParcelMeasurementsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    tracking_data = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.TrackingDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="trackingData",
    )
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Parcel(**data)


class PaymentInfoSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.PaymentInfo`."
    payments = marshmallow.fields.Nested(
        nested="commercetools.schemas._payment.PaymentReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PaymentInfo(**data)


class ProductVariantImportDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ProductVariantImportDraft`."
    id = marshmallow.fields.Integer(allow_none=True, missing=None)
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    prices = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.PriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    attributes = marshmallow.fields.Nested(
        nested="commercetools.schemas._product.AttributeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    images = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.ImageSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductVariantImportDraft(**data)


class ReturnInfoSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ReturnInfo`."
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ReturnItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    return_tracking_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="returnTrackingId"
    )
    return_date = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="returnDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReturnInfo(**data)


class ReturnItemDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ReturnItemDraft`."
    quantity = marshmallow.fields.Integer(allow_none=True)
    line_item_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="lineItemId"
    )
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customLineItemId"
    )
    comment = marshmallow.fields.String(allow_none=True, missing=None)
    shipment_state = marshmallow_enum.EnumField(
        types.ReturnShipmentState, by_value=True, data_key="shipmentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReturnItemDraft(**data)


class ReturnItemSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ReturnItem`."
    id = marshmallow.fields.String(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)
    type = marshmallow.fields.String(allow_none=True)
    comment = marshmallow.fields.String(allow_none=True, missing=None)
    shipment_state = marshmallow_enum.EnumField(
        types.ReturnShipmentState, by_value=True, data_key="shipmentState"
    )
    payment_state = marshmallow_enum.EnumField(
        types.ReturnPaymentState, by_value=True, data_key="paymentState"
    )
    last_modified_at = marshmallow.fields.DateTime(
        allow_none=True, data_key="lastModifiedAt"
    )
    created_at = marshmallow.fields.DateTime(allow_none=True, data_key="createdAt")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReturnItem(**data)


class ShippingInfoDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.ShippingInfoDraft`."
    shipping_method_name = marshmallow.fields.String(
        allow_none=True, data_key="shippingMethodName"
    )
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    shipping_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._shipping_method.ShippingRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shippingRate",
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.TaxedItemPriceDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.TaxRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxRate",
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas._tax_category.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas._shipping_method.ShippingMethodReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingMethod",
    )
    deliveries = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.DeliverySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    discounted_price = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.DiscountedLineItemPriceDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="discountedPrice",
    )
    shipping_method_state = marshmallow_enum.EnumField(
        types.ShippingMethodState,
        by_value=True,
        missing=None,
        data_key="shippingMethodState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShippingInfoDraft(**data)


class StagedOrderUpdateActionSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.StagedOrderUpdateAction`."
    action = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderUpdateAction(**data)


class SyncInfoSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.SyncInfo`."
    channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )
    synced_at = marshmallow.fields.DateTime(allow_none=True, data_key="syncedAt")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.SyncInfo(**data)


class TaxedItemPriceDraftSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.TaxedItemPriceDraft`."
    total_net = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalNet",
    )
    total_gross = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalGross",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxedItemPriceDraft(**data)


class TrackingDataSchema(marshmallow.Schema):
    "Marshmallow schema for :class:`commercetools.types.TrackingData`."
    tracking_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="trackingId"
    )
    carrier = marshmallow.fields.String(allow_none=True, missing=None)
    provider = marshmallow.fields.String(allow_none=True, missing=None)
    provider_transaction = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="providerTransaction"
    )
    is_return = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isReturn"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TrackingData(**data)


class CustomLineItemReturnItemSchema(ReturnItemSchema):
    "Marshmallow schema for :class:`commercetools.types.CustomLineItemReturnItem`."
    customline_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customlineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomLineItemReturnItem(**data)


class LineItemReturnItemSchema(ReturnItemSchema):
    "Marshmallow schema for :class:`commercetools.types.LineItemReturnItem`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.LineItemReturnItem(**data)


class OrderAddDeliveryActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderAddDeliveryAction`."
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    parcels = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ParcelDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderAddDeliveryAction(**data)


class OrderAddItemShippingAddressActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderAddItemShippingAddressAction`."
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderAddItemShippingAddressAction(**data)


class OrderAddParcelToDeliveryActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderAddParcelToDeliveryAction`."
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    measurements = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ParcelMeasurementsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    tracking_data = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.TrackingDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="trackingData",
    )
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderAddParcelToDeliveryAction(**data)


class OrderAddPaymentActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderAddPaymentAction`."
    payment = marshmallow.fields.Nested(
        nested="commercetools.schemas._payment.PaymentReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderAddPaymentAction(**data)


class OrderAddReturnInfoActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderAddReturnInfoAction`."
    return_tracking_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="returnTrackingId"
    )
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ReturnItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    return_date = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="returnDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderAddReturnInfoAction(**data)


class OrderChangeOrderStateActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderChangeOrderStateAction`."
    order_state = marshmallow_enum.EnumField(
        types.OrderState, by_value=True, data_key="orderState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderChangeOrderStateAction(**data)


class OrderChangePaymentStateActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderChangePaymentStateAction`."
    payment_state = marshmallow_enum.EnumField(
        types.PaymentState, by_value=True, missing=None, data_key="paymentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderChangePaymentStateAction(**data)


class OrderChangeShipmentStateActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderChangeShipmentStateAction`."
    shipment_state = marshmallow_enum.EnumField(
        types.ShipmentState, by_value=True, missing=None, data_key="shipmentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderChangeShipmentStateAction(**data)


class OrderImportCustomLineItemStateActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderImportCustomLineItemStateAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderImportCustomLineItemStateAction(**data)


class OrderImportLineItemStateActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderImportLineItemStateAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderImportLineItemStateAction(**data)


class OrderRemoveDeliveryActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderRemoveDeliveryAction`."
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderRemoveDeliveryAction(**data)


class OrderRemoveItemShippingAddressActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderRemoveItemShippingAddressAction`."
    address_key = marshmallow.fields.String(allow_none=True, data_key="addressKey")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderRemoveItemShippingAddressAction(**data)


class OrderRemoveParcelFromDeliveryActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderRemoveParcelFromDeliveryAction`."
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderRemoveParcelFromDeliveryAction(**data)


class OrderRemovePaymentActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderRemovePaymentAction`."
    payment = marshmallow.fields.Nested(
        nested="commercetools.schemas._payment.PaymentReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderRemovePaymentAction(**data)


class OrderSetBillingAddressActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetBillingAddressAction`."
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetBillingAddressAction(**data)


class OrderSetCustomFieldActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetCustomFieldAction`."
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomFieldAction(**data)


class OrderSetCustomLineItemCustomFieldActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetCustomLineItemCustomFieldAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomLineItemCustomFieldAction(**data)


class OrderSetCustomLineItemCustomTypeActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetCustomLineItemCustomTypeAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomLineItemCustomTypeAction(**data)


class OrderSetCustomLineItemShippingDetailsActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetCustomLineItemShippingDetailsAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomLineItemShippingDetailsAction(**data)


class OrderSetCustomTypeActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetCustomTypeAction`."
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomTypeAction(**data)


class OrderSetCustomerEmailActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetCustomerEmailAction`."
    email = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomerEmailAction(**data)


class OrderSetCustomerIdActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetCustomerIdAction`."
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomerIdAction(**data)


class OrderSetDeliveryAddressActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetDeliveryAddressAction`."
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetDeliveryAddressAction(**data)


class OrderSetDeliveryItemsActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetDeliveryItemsAction`."
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetDeliveryItemsAction(**data)


class OrderSetLineItemCustomFieldActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetLineItemCustomFieldAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetLineItemCustomFieldAction(**data)


class OrderSetLineItemCustomTypeActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetLineItemCustomTypeAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas._type.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetLineItemCustomTypeAction(**data)


class OrderSetLineItemShippingDetailsActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetLineItemShippingDetailsAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas._cart.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetLineItemShippingDetailsAction(**data)


class OrderSetLocaleActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetLocaleAction`."
    locale = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetLocaleAction(**data)


class OrderSetOrderNumberActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetOrderNumberAction`."
    order_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderNumber"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetOrderNumberAction(**data)


class OrderSetParcelItemsActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetParcelItemsAction`."
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetParcelItemsAction(**data)


class OrderSetParcelMeasurementsActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetParcelMeasurementsAction`."
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    measurements = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.ParcelMeasurementsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetParcelMeasurementsAction(**data)


class OrderSetParcelTrackingDataActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetParcelTrackingDataAction`."
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    tracking_data = marshmallow.fields.Nested(
        nested="commercetools.schemas._order.TrackingDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="trackingData",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetParcelTrackingDataAction(**data)


class OrderSetReturnPaymentStateActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetReturnPaymentStateAction`."
    return_item_id = marshmallow.fields.String(allow_none=True, data_key="returnItemId")
    payment_state = marshmallow_enum.EnumField(
        types.ReturnPaymentState, by_value=True, data_key="paymentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetReturnPaymentStateAction(**data)


class OrderSetReturnShipmentStateActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetReturnShipmentStateAction`."
    return_item_id = marshmallow.fields.String(allow_none=True, data_key="returnItemId")
    shipment_state = marshmallow_enum.EnumField(
        types.ReturnShipmentState, by_value=True, data_key="shipmentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetReturnShipmentStateAction(**data)


class OrderSetShippingAddressActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderSetShippingAddressAction`."
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetShippingAddressAction(**data)


class OrderTransitionCustomLineItemStateActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderTransitionCustomLineItemStateAction`."
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True)
    from_state = marshmallow.fields.Nested(
        nested="commercetools.schemas._state.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="fromState",
    )
    to_state = marshmallow.fields.Nested(
        nested="commercetools.schemas._state.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="toState",
    )
    actual_transition_date = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="actualTransitionDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderTransitionCustomLineItemStateAction(**data)


class OrderTransitionLineItemStateActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderTransitionLineItemStateAction`."
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    quantity = marshmallow.fields.Integer(allow_none=True)
    from_state = marshmallow.fields.Nested(
        nested="commercetools.schemas._state.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="fromState",
    )
    to_state = marshmallow.fields.Nested(
        nested="commercetools.schemas._state.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="toState",
    )
    actual_transition_date = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="actualTransitionDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderTransitionLineItemStateAction(**data)


class OrderTransitionStateActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderTransitionStateAction`."
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas._state.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    force = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderTransitionStateAction(**data)


class OrderUpdateItemShippingAddressActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderUpdateItemShippingAddressAction`."
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas._common.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderUpdateItemShippingAddressAction(**data)


class OrderUpdateSyncInfoActionSchema(OrderUpdateActionSchema):
    "Marshmallow schema for :class:`commercetools.types.OrderUpdateSyncInfoAction`."
    channel = marshmallow.fields.Nested(
        nested="commercetools.schemas._channel.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )
    synced_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="syncedAt"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderUpdateSyncInfoAction(**data)
