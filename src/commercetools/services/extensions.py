# DO NOT EDIT! This file is automatically generated
import typing

from commercetools import schemas, types
from commercetools.services import abstract, traits
from commercetools.typing import OptionalListStr


class _ExtensionQuerySchema(
    traits.ExpandableSchema,
    traits.SortableSchema,
    traits.PagingSchema,
    traits.QuerySchema,
):
    pass


class _ExtensionUpdateSchema(traits.ExpandableSchema, traits.VersionedSchema):
    pass


class _ExtensionDeleteSchema(traits.VersionedSchema, traits.ExpandableSchema):
    pass


class ExtensionService(abstract.AbstractService):
    """Extend the behavior of an API with your business logic"""

    def get_by_id(self, id: str, *, expand: OptionalListStr = None) -> types.Extension:
        """Retrieves the representation of an extension by its id."""
        params = self._serialize_params({"expand": expand}, traits.ExpandableSchema)
        return self._client._get(
            endpoint=f"extensions/{id}",
            params=params,
            schema_cls=schemas.ExtensionSchema,
        )

    def get_by_key(
        self, key: str, *, expand: OptionalListStr = None
    ) -> types.Extension:
        """Retrieves the representation of an extension by its key."""
        params = self._serialize_params({"expand": expand}, traits.ExpandableSchema)
        return self._client._get(
            endpoint=f"extensions/key={key}",
            params=params,
            schema_cls=schemas.ExtensionSchema,
        )

    def query(
        self,
        *,
        expand: OptionalListStr = None,
        sort: OptionalListStr = None,
        limit: int = None,
        offset: int = None,
        with_total: bool = None,
        where: OptionalListStr = None,
        predicate_var: typing.Dict[str, str] = None,
    ) -> types.ExtensionPagedQueryResponse:
        """Extend the behavior of an API with your business logic
        """
        params = self._serialize_params(
            {
                "expand": expand,
                "sort": sort,
                "limit": limit,
                "offset": offset,
                "withTotal": with_total,
                "where": where,
                "predicate_var": predicate_var,
            },
            _ExtensionQuerySchema,
        )
        return self._client._get(
            endpoint="extensions",
            params=params,
            schema_cls=schemas.ExtensionPagedQueryResponseSchema,
        )

    def create(
        self, draft: types.ExtensionDraft, *, expand: OptionalListStr = None
    ) -> types.Extension:
        """Currently, a maximum of 25 extensions can be created per project.

        Extend the behavior of an API with your business logic
        """
        params = self._serialize_params({"expand": expand}, traits.ExpandableSchema)
        return self._client._post(
            endpoint="extensions",
            params=params,
            data_object=draft,
            request_schema_cls=schemas.ExtensionDraftSchema,
            response_schema_cls=schemas.ExtensionSchema,
        )

    def update_by_id(
        self,
        id: str,
        version: int,
        actions: typing.List[types.ExtensionUpdateAction],
        *,
        expand: OptionalListStr = None,
        force_update: bool = False,
    ) -> types.Extension:
        params = self._serialize_params({"expand": expand}, _ExtensionUpdateSchema)
        update_action = types.ExtensionUpdate(version=version, actions=actions)
        return self._client._post(
            endpoint=f"extensions/{id}",
            params=params,
            data_object=update_action,
            request_schema_cls=schemas.ExtensionUpdateSchema,
            response_schema_cls=schemas.ExtensionSchema,
            force_update=force_update,
        )

    def update_by_key(
        self,
        key: str,
        version: int,
        actions: typing.List[types.ExtensionUpdateAction],
        *,
        expand: OptionalListStr = None,
        force_update: bool = False,
    ) -> types.Extension:
        params = self._serialize_params({"expand": expand}, _ExtensionUpdateSchema)
        update_action = types.ExtensionUpdate(version=version, actions=actions)
        return self._client._post(
            endpoint=f"extensions/key={key}",
            params=params,
            data_object=update_action,
            request_schema_cls=schemas.ExtensionUpdateSchema,
            response_schema_cls=schemas.ExtensionSchema,
            force_update=force_update,
        )

    def delete_by_id(
        self,
        id: str,
        version: int,
        *,
        expand: OptionalListStr = None,
        force_delete: bool = False,
    ) -> types.Extension:
        params = self._serialize_params(
            {"version": version, "expand": expand}, _ExtensionDeleteSchema
        )
        return self._client._delete(
            endpoint=f"extensions/{id}",
            params=params,
            response_schema_cls=schemas.ExtensionSchema,
            force_delete=force_delete,
        )

    def delete_by_key(
        self,
        key: str,
        version: int,
        *,
        expand: OptionalListStr = None,
        force_delete: bool = False,
    ) -> types.Extension:
        params = self._serialize_params(
            {"version": version, "expand": expand}, _ExtensionDeleteSchema
        )
        return self._client._delete(
            endpoint=f"extensions/key={key}",
            params=params,
            response_schema_cls=schemas.ExtensionSchema,
            force_delete=force_delete,
        )
