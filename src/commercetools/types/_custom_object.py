# DO NOT EDIT! This file is automatically generated

import datetime
import typing

from commercetools.types._abstract import _BaseType
from commercetools.types._common import LoggedResource, Reference, ReferenceTypeId

if typing.TYPE_CHECKING:
    from ._common import CreatedBy, LastModifiedBy
__all__ = [
    "CustomObject",
    "CustomObjectDraft",
    "CustomObjectPagedQueryResponse",
    "CustomObjectReference",
]


class CustomObject(LoggedResource):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.CustomObjectSchema`."
    #: :class:`str`
    container: typing.Optional[str]
    #: :class:`str`
    key: typing.Optional[str]
    #: :class:`typing.Any`
    value: typing.Optional[typing.Any]

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        last_modified_by: typing.Optional["LastModifiedBy"] = None,
        created_by: typing.Optional["CreatedBy"] = None,
        container: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None
    ) -> None:
        self.container = container
        self.key = key
        self.value = value
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
            last_modified_by=last_modified_by,
            created_by=created_by,
        )

    def __repr__(self) -> str:
        return (
            "CustomObject(id=%r, version=%r, created_at=%r, last_modified_at=%r, last_modified_by=%r, created_by=%r, container=%r, key=%r, value=%r)"
            % (
                self.id,
                self.version,
                self.created_at,
                self.last_modified_at,
                self.last_modified_by,
                self.created_by,
                self.container,
                self.key,
                self.value,
            )
        )


class CustomObjectDraft(_BaseType):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.CustomObjectDraftSchema`."
    #: :class:`str`
    container: typing.Optional[str]
    #: :class:`str`
    key: typing.Optional[str]
    #: :class:`typing.Any`
    value: typing.Optional[typing.Any]
    #: Optional :class:`int`
    version: typing.Optional[int]

    def __init__(
        self,
        *,
        container: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        value: typing.Optional[typing.Any] = None,
        version: typing.Optional[int] = None
    ) -> None:
        self.container = container
        self.key = key
        self.value = value
        self.version = version
        super().__init__()

    def __repr__(self) -> str:
        return "CustomObjectDraft(container=%r, key=%r, value=%r, version=%r)" % (
            self.container,
            self.key,
            self.value,
            self.version,
        )


class CustomObjectPagedQueryResponse(_BaseType):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.CustomObjectPagedQueryResponseSchema`."
    #: :class:`int`
    limit: typing.Optional[int]
    #: :class:`int`
    count: typing.Optional[int]
    #: Optional :class:`int`
    total: typing.Optional[int]
    #: :class:`int`
    offset: typing.Optional[int]
    #: List of :class:`commercetools.types.CustomObject`
    results: typing.Optional[typing.Sequence["CustomObject"]]

    def __init__(
        self,
        *,
        limit: typing.Optional[int] = None,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.Sequence["CustomObject"]] = None
    ) -> None:
        self.limit = limit
        self.count = count
        self.total = total
        self.offset = offset
        self.results = results
        super().__init__()

    def __repr__(self) -> str:
        return (
            "CustomObjectPagedQueryResponse(limit=%r, count=%r, total=%r, offset=%r, results=%r)"
            % (self.limit, self.count, self.total, self.offset, self.results)
        )


class CustomObjectReference(Reference):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.CustomObjectReferenceSchema`."
    #: Optional :class:`commercetools.types.CustomObject`
    obj: typing.Optional["CustomObject"]

    def __init__(
        self,
        *,
        type_id: typing.Optional["ReferenceTypeId"] = None,
        id: typing.Optional[str] = None,
        obj: typing.Optional["CustomObject"] = None
    ) -> None:
        self.obj = obj
        super().__init__(type_id=ReferenceTypeId.KEY_VALUE_DOCUMENT, id=id)

    def __repr__(self) -> str:
        return "CustomObjectReference(type_id=%r, id=%r, obj=%r)" % (
            self.type_id,
            self.id,
            self.obj,
        )
