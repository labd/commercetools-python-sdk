# DO NOT EDIT! This file is automatically generated

import datetime
import typing

import attr

from commercetools.types._base import PagedQueryResponse, Update, UpdateAction
from commercetools.types._common import Reference, ReferenceTypeId, Resource

__all__ = [
    "SubRate",
    "TaxCategory",
    "TaxCategoryAddTaxRateAction",
    "TaxCategoryChangeNameAction",
    "TaxCategoryDraft",
    "TaxCategoryPagedQueryResponse",
    "TaxCategoryReference",
    "TaxCategoryRemoveTaxRateAction",
    "TaxCategoryReplaceTaxRateAction",
    "TaxCategorySetDescriptionAction",
    "TaxCategorySetKeyAction",
    "TaxCategoryUpdate",
    "TaxCategoryUpdateAction",
    "TaxRate",
    "TaxRateDraft",
]


@attr.s(auto_attribs=True, init=False, repr=False)
class SubRate:
    "Corresponding marshmallow schema is :class:`commercetools.schemas.SubRateSchema`."
    #: :class:`str`
    name: typing.Optional[str]
    #: :class:`float`
    amount: typing.Optional[float]

    def __init__(
        self,
        *,
        name: typing.Optional[str] = None,
        amount: typing.Optional[float] = None
    ) -> None:
        self.name = name
        self.amount = amount

    def __repr__(self) -> str:
        return "SubRate(name=%r, amount=%r)" % (self.name, self.amount)


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategoryDraft:
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategoryDraftSchema`."
    #: :class:`str`
    name: typing.Optional[str]
    #: Optional :class:`str`
    description: typing.Optional[str]
    #: List of :class:`commercetools.types.TaxRateDraft`
    rates: typing.Optional[typing.List["TaxRateDraft"]]
    #: Optional :class:`str`
    key: typing.Optional[str]

    def __init__(
        self,
        *,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        rates: typing.Optional[typing.List["TaxRateDraft"]] = None,
        key: typing.Optional[str] = None
    ) -> None:
        self.name = name
        self.description = description
        self.rates = rates
        self.key = key

    def __repr__(self) -> str:
        return "TaxCategoryDraft(name=%r, description=%r, rates=%r, key=%r)" % (
            self.name,
            self.description,
            self.rates,
            self.key,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxRate:
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxRateSchema`."
    #: Optional :class:`str`
    id: typing.Optional[str]
    #: :class:`str`
    name: typing.Optional[str]
    #: :class:`float`
    amount: typing.Optional[float]
    #: :class:`bool` `(Named` ``includedInPrice`` `in Commercetools)`
    included_in_price: typing.Optional[bool]
    #: :class:`str`
    country: typing.Optional["str"]
    #: Optional :class:`str`
    state: typing.Optional[str]
    #: Optional list of :class:`commercetools.types.SubRate` `(Named` ``subRates`` `in Commercetools)`
    sub_rates: typing.Optional[typing.List["SubRate"]]

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        amount: typing.Optional[float] = None,
        included_in_price: typing.Optional[bool] = None,
        country: typing.Optional["str"] = None,
        state: typing.Optional[str] = None,
        sub_rates: typing.Optional[typing.List["SubRate"]] = None
    ) -> None:
        self.id = id
        self.name = name
        self.amount = amount
        self.included_in_price = included_in_price
        self.country = country
        self.state = state
        self.sub_rates = sub_rates

    def __repr__(self) -> str:
        return (
            "TaxRate(id=%r, name=%r, amount=%r, included_in_price=%r, country=%r, state=%r, sub_rates=%r)"
            % (
                self.id,
                self.name,
                self.amount,
                self.included_in_price,
                self.country,
                self.state,
                self.sub_rates,
            )
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxRateDraft:
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxRateDraftSchema`."
    #: :class:`str`
    name: typing.Optional[str]
    #: Optional :class:`float`
    amount: typing.Optional[float]
    #: :class:`bool` `(Named` ``includedInPrice`` `in Commercetools)`
    included_in_price: typing.Optional[bool]
    #: :class:`str`
    country: typing.Optional["str"]
    #: Optional :class:`str`
    state: typing.Optional[str]
    #: Optional list of :class:`commercetools.types.SubRate` `(Named` ``subRates`` `in Commercetools)`
    sub_rates: typing.Optional[typing.List["SubRate"]]

    def __init__(
        self,
        *,
        name: typing.Optional[str] = None,
        amount: typing.Optional[float] = None,
        included_in_price: typing.Optional[bool] = None,
        country: typing.Optional["str"] = None,
        state: typing.Optional[str] = None,
        sub_rates: typing.Optional[typing.List["SubRate"]] = None
    ) -> None:
        self.name = name
        self.amount = amount
        self.included_in_price = included_in_price
        self.country = country
        self.state = state
        self.sub_rates = sub_rates

    def __repr__(self) -> str:
        return (
            "TaxRateDraft(name=%r, amount=%r, included_in_price=%r, country=%r, state=%r, sub_rates=%r)"
            % (
                self.name,
                self.amount,
                self.included_in_price,
                self.country,
                self.state,
                self.sub_rates,
            )
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategory(Resource):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategorySchema`."
    #: :class:`str`
    name: typing.Optional[str]
    #: Optional :class:`str`
    description: typing.Optional[str]
    #: List of :class:`commercetools.types.TaxRate`
    rates: typing.Optional[typing.List["TaxRate"]]
    #: Optional :class:`str`
    key: typing.Optional[str]

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        rates: typing.Optional[typing.List["TaxRate"]] = None,
        key: typing.Optional[str] = None
    ) -> None:
        self.name = name
        self.description = description
        self.rates = rates
        self.key = key
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
        )

    def __repr__(self) -> str:
        return (
            "TaxCategory(id=%r, version=%r, created_at=%r, last_modified_at=%r, name=%r, description=%r, rates=%r, key=%r)"
            % (
                self.id,
                self.version,
                self.created_at,
                self.last_modified_at,
                self.name,
                self.description,
                self.rates,
                self.key,
            )
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategoryPagedQueryResponse(PagedQueryResponse):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategoryPagedQueryResponseSchema`."
    #: List of :class:`commercetools.types.TaxCategory`
    results: typing.Optional[typing.Sequence["TaxCategory"]]

    def __init__(
        self,
        *,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.Sequence["TaxCategory"]] = None
    ) -> None:
        self.results = results
        super().__init__(count=count, total=total, offset=offset, results=results)

    def __repr__(self) -> str:
        return (
            "TaxCategoryPagedQueryResponse(count=%r, total=%r, offset=%r, results=%r)"
            % (self.count, self.total, self.offset, self.results)
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategoryReference(Reference):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategoryReferenceSchema`."
    #: Optional :class:`commercetools.types.TaxCategory`
    obj: typing.Optional["TaxCategory"]

    def __init__(
        self,
        *,
        type_id: typing.Optional["ReferenceTypeId"] = None,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["TaxCategory"] = None
    ) -> None:
        self.obj = obj
        super().__init__(type_id=ReferenceTypeId.TAX_CATEGORY, id=id, key=key)

    def __repr__(self) -> str:
        return "TaxCategoryReference(type_id=%r, id=%r, key=%r, obj=%r)" % (
            self.type_id,
            self.id,
            self.key,
            self.obj,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategoryUpdate(Update):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategoryUpdateSchema`."
    #: :class:`list`
    actions: typing.Optional[list]

    def __init__(
        self,
        *,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None
    ) -> None:
        self.actions = actions
        super().__init__(version=version, actions=actions)

    def __repr__(self) -> str:
        return "TaxCategoryUpdate(version=%r, actions=%r)" % (
            self.version,
            self.actions,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategoryUpdateAction(UpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategoryUpdateActionSchema`."

    def __init__(self, *, action: typing.Optional[str] = None) -> None:
        super().__init__(action=action)

    def __repr__(self) -> str:
        return "TaxCategoryUpdateAction(action=%r)" % (self.action,)


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategoryAddTaxRateAction(TaxCategoryUpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategoryAddTaxRateActionSchema`."
    #: :class:`commercetools.types.TaxRateDraft` `(Named` ``taxRate`` `in Commercetools)`
    tax_rate: typing.Optional["TaxRateDraft"]

    def __init__(
        self,
        *,
        action: typing.Optional[str] = None,
        tax_rate: typing.Optional["TaxRateDraft"] = None
    ) -> None:
        self.tax_rate = tax_rate
        super().__init__(action="addTaxRate")

    def __repr__(self) -> str:
        return "TaxCategoryAddTaxRateAction(action=%r, tax_rate=%r)" % (
            self.action,
            self.tax_rate,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategoryChangeNameAction(TaxCategoryUpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategoryChangeNameActionSchema`."
    #: :class:`str`
    name: typing.Optional[str]

    def __init__(
        self, *, action: typing.Optional[str] = None, name: typing.Optional[str] = None
    ) -> None:
        self.name = name
        super().__init__(action="changeName")

    def __repr__(self) -> str:
        return "TaxCategoryChangeNameAction(action=%r, name=%r)" % (
            self.action,
            self.name,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategoryRemoveTaxRateAction(TaxCategoryUpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategoryRemoveTaxRateActionSchema`."
    #: :class:`str` `(Named` ``taxRateId`` `in Commercetools)`
    tax_rate_id: typing.Optional[str]

    def __init__(
        self,
        *,
        action: typing.Optional[str] = None,
        tax_rate_id: typing.Optional[str] = None
    ) -> None:
        self.tax_rate_id = tax_rate_id
        super().__init__(action="removeTaxRate")

    def __repr__(self) -> str:
        return "TaxCategoryRemoveTaxRateAction(action=%r, tax_rate_id=%r)" % (
            self.action,
            self.tax_rate_id,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategoryReplaceTaxRateAction(TaxCategoryUpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategoryReplaceTaxRateActionSchema`."
    #: :class:`str` `(Named` ``taxRateId`` `in Commercetools)`
    tax_rate_id: typing.Optional[str]
    #: :class:`commercetools.types.TaxRateDraft` `(Named` ``taxRate`` `in Commercetools)`
    tax_rate: typing.Optional["TaxRateDraft"]

    def __init__(
        self,
        *,
        action: typing.Optional[str] = None,
        tax_rate_id: typing.Optional[str] = None,
        tax_rate: typing.Optional["TaxRateDraft"] = None
    ) -> None:
        self.tax_rate_id = tax_rate_id
        self.tax_rate = tax_rate
        super().__init__(action="replaceTaxRate")

    def __repr__(self) -> str:
        return (
            "TaxCategoryReplaceTaxRateAction(action=%r, tax_rate_id=%r, tax_rate=%r)"
            % (self.action, self.tax_rate_id, self.tax_rate)
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategorySetDescriptionAction(TaxCategoryUpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategorySetDescriptionActionSchema`."
    #: Optional :class:`str`
    description: typing.Optional[str]

    def __init__(
        self,
        *,
        action: typing.Optional[str] = None,
        description: typing.Optional[str] = None
    ) -> None:
        self.description = description
        super().__init__(action="setDescription")

    def __repr__(self) -> str:
        return "TaxCategorySetDescriptionAction(action=%r, description=%r)" % (
            self.action,
            self.description,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class TaxCategorySetKeyAction(TaxCategoryUpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.TaxCategorySetKeyActionSchema`."
    #: Optional :class:`str`
    key: typing.Optional[str]

    def __init__(
        self, *, action: typing.Optional[str] = None, key: typing.Optional[str] = None
    ) -> None:
        self.key = key
        super().__init__(action="setKey")

    def __repr__(self) -> str:
        return "TaxCategorySetKeyAction(action=%r, key=%r)" % (self.action, self.key)
