# DO NOT EDIT! This file is automatically generated

import datetime
import typing

import attr

from commercetools.types._base import PagedQueryResponse, Update, UpdateAction
from commercetools.types._common import Reference, ReferenceTypeId, Resource

__all__ = [
    "Location",
    "Zone",
    "ZoneAddLocationAction",
    "ZoneChangeNameAction",
    "ZoneDraft",
    "ZonePagedQueryResponse",
    "ZoneReference",
    "ZoneRemoveLocationAction",
    "ZoneSetDescriptionAction",
    "ZoneSetKeyAction",
    "ZoneUpdate",
    "ZoneUpdateAction",
]


@attr.s(auto_attribs=True, init=False, repr=False)
class Location:
    "Corresponding marshmallow schema is :class:`commercetools.schemas.LocationSchema`."
    #: :class:`str`
    country: typing.Optional["str"]
    #: Optional :class:`str`
    state: typing.Optional[str]

    def __init__(
        self,
        *,
        country: typing.Optional["str"] = None,
        state: typing.Optional[str] = None
    ) -> None:
        self.country = country
        self.state = state

    def __repr__(self) -> str:
        return "Location(country=%r, state=%r)" % (self.country, self.state)


@attr.s(auto_attribs=True, init=False, repr=False)
class ZoneDraft:
    "Corresponding marshmallow schema is :class:`commercetools.schemas.ZoneDraftSchema`."
    #: Optional :class:`str`
    key: typing.Optional[str]
    #: :class:`str`
    name: typing.Optional[str]
    #: Optional :class:`str`
    description: typing.Optional[str]
    #: List of :class:`commercetools.types.Location`
    locations: typing.Optional[typing.List["Location"]]

    def __init__(
        self,
        *,
        key: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        locations: typing.Optional[typing.List["Location"]] = None
    ) -> None:
        self.key = key
        self.name = name
        self.description = description
        self.locations = locations

    def __repr__(self) -> str:
        return "ZoneDraft(key=%r, name=%r, description=%r, locations=%r)" % (
            self.key,
            self.name,
            self.description,
            self.locations,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class Zone(Resource):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.ZoneSchema`."
    #: Optional :class:`str`
    key: typing.Optional[str]
    #: :class:`str`
    name: typing.Optional[str]
    #: Optional :class:`str`
    description: typing.Optional[str]
    #: List of :class:`commercetools.types.Location`
    locations: typing.Optional[typing.List["Location"]]

    def __init__(
        self,
        *,
        id: typing.Optional[str] = None,
        version: typing.Optional[int] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        last_modified_at: typing.Optional[datetime.datetime] = None,
        key: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        locations: typing.Optional[typing.List["Location"]] = None
    ) -> None:
        self.key = key
        self.name = name
        self.description = description
        self.locations = locations
        super().__init__(
            id=id,
            version=version,
            created_at=created_at,
            last_modified_at=last_modified_at,
        )

    def __repr__(self) -> str:
        return (
            "Zone(id=%r, version=%r, created_at=%r, last_modified_at=%r, key=%r, name=%r, description=%r, locations=%r)"
            % (
                self.id,
                self.version,
                self.created_at,
                self.last_modified_at,
                self.key,
                self.name,
                self.description,
                self.locations,
            )
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class ZonePagedQueryResponse(PagedQueryResponse):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.ZonePagedQueryResponseSchema`."
    #: List of :class:`commercetools.types.Zone`
    results: typing.Optional[typing.Sequence["Zone"]]

    def __init__(
        self,
        *,
        count: typing.Optional[int] = None,
        total: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        results: typing.Optional[typing.Sequence["Zone"]] = None
    ) -> None:
        self.results = results
        super().__init__(count=count, total=total, offset=offset, results=results)

    def __repr__(self) -> str:
        return "ZonePagedQueryResponse(count=%r, total=%r, offset=%r, results=%r)" % (
            self.count,
            self.total,
            self.offset,
            self.results,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class ZoneReference(Reference):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.ZoneReferenceSchema`."
    #: Optional :class:`commercetools.types.Zone`
    obj: typing.Optional["Zone"]

    def __init__(
        self,
        *,
        type_id: typing.Optional["ReferenceTypeId"] = None,
        id: typing.Optional[str] = None,
        key: typing.Optional[str] = None,
        obj: typing.Optional["Zone"] = None
    ) -> None:
        self.obj = obj
        super().__init__(type_id=ReferenceTypeId.ZONE, id=id, key=key)

    def __repr__(self) -> str:
        return "ZoneReference(type_id=%r, id=%r, key=%r, obj=%r)" % (
            self.type_id,
            self.id,
            self.key,
            self.obj,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class ZoneUpdate(Update):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.ZoneUpdateSchema`."
    #: :class:`list`
    actions: typing.Optional[list]

    def __init__(
        self,
        *,
        version: typing.Optional[int] = None,
        actions: typing.Optional[list] = None
    ) -> None:
        self.actions = actions
        super().__init__(version=version, actions=actions)

    def __repr__(self) -> str:
        return "ZoneUpdate(version=%r, actions=%r)" % (self.version, self.actions)


@attr.s(auto_attribs=True, init=False, repr=False)
class ZoneUpdateAction(UpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.ZoneUpdateActionSchema`."

    def __init__(self, *, action: typing.Optional[str] = None) -> None:
        super().__init__(action=action)

    def __repr__(self) -> str:
        return "ZoneUpdateAction(action=%r)" % (self.action,)


@attr.s(auto_attribs=True, init=False, repr=False)
class ZoneAddLocationAction(ZoneUpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.ZoneAddLocationActionSchema`."
    #: :class:`commercetools.types.Location`
    location: typing.Optional["Location"]

    def __init__(
        self,
        *,
        action: typing.Optional[str] = None,
        location: typing.Optional["Location"] = None
    ) -> None:
        self.location = location
        super().__init__(action="addLocation")

    def __repr__(self) -> str:
        return "ZoneAddLocationAction(action=%r, location=%r)" % (
            self.action,
            self.location,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class ZoneChangeNameAction(ZoneUpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.ZoneChangeNameActionSchema`."
    #: :class:`str`
    name: typing.Optional[str]

    def __init__(
        self, *, action: typing.Optional[str] = None, name: typing.Optional[str] = None
    ) -> None:
        self.name = name
        super().__init__(action="changeName")

    def __repr__(self) -> str:
        return "ZoneChangeNameAction(action=%r, name=%r)" % (self.action, self.name)


@attr.s(auto_attribs=True, init=False, repr=False)
class ZoneRemoveLocationAction(ZoneUpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.ZoneRemoveLocationActionSchema`."
    #: :class:`commercetools.types.Location`
    location: typing.Optional["Location"]

    def __init__(
        self,
        *,
        action: typing.Optional[str] = None,
        location: typing.Optional["Location"] = None
    ) -> None:
        self.location = location
        super().__init__(action="removeLocation")

    def __repr__(self) -> str:
        return "ZoneRemoveLocationAction(action=%r, location=%r)" % (
            self.action,
            self.location,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class ZoneSetDescriptionAction(ZoneUpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.ZoneSetDescriptionActionSchema`."
    #: Optional :class:`str`
    description: typing.Optional[str]

    def __init__(
        self,
        *,
        action: typing.Optional[str] = None,
        description: typing.Optional[str] = None
    ) -> None:
        self.description = description
        super().__init__(action="setDescription")

    def __repr__(self) -> str:
        return "ZoneSetDescriptionAction(action=%r, description=%r)" % (
            self.action,
            self.description,
        )


@attr.s(auto_attribs=True, init=False, repr=False)
class ZoneSetKeyAction(ZoneUpdateAction):
    "Corresponding marshmallow schema is :class:`commercetools.schemas.ZoneSetKeyActionSchema`."
    #: Optional :class:`str`
    key: typing.Optional[str]

    def __init__(
        self, *, action: typing.Optional[str] = None, key: typing.Optional[str] = None
    ) -> None:
        self.key = key
        super().__init__(action="setKey")

    def __repr__(self) -> str:
        return "ZoneSetKeyAction(action=%r, key=%r)" % (self.action, self.key)
